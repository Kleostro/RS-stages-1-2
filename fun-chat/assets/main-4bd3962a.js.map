{"version":3,"file":"main-4bd3962a.js","sources":["../../src/shared/EventMediator/types/enums.ts","../../src/shared/EventMediator/model/EventMediatorModel.ts","../../src/shared/types/enums.ts","../../src/utils/createBaseElement.ts","../../src/pages/MainPage/view/MainPageView.ts","../../src/pages/types/enums.ts","../../src/shared/Store/initialData.ts","../../src/shared/Store/reducer/rootReducer.ts","../../src/shared/Store/model/StoreModel.ts","../../src/widgets/UserList/view/UserListView.ts","../../src/utils/isFromServerMessage.ts","../../src/shared/Store/actions/types/enums.ts","../../src/shared/Store/actions/actions.ts","../../src/widgets/UserList/model/UserListModel.ts","../../src/pages/MainPage/model/MainPageModel.ts","../../src/shared/Button/view/ButtonView.ts","../../src/shared/Button/model/ButtonModel.ts","../../src/pages/AboutPage/view/AboutPageView.ts","../../src/pages/AboutPage/model/AboutPageModel.ts","../../src/pages/LoginPage/view/LoginPageView.ts","../../src/shared/Button/types/enums.ts","../../src/features/InputFieldValidator/model/InputFieldValidatorModel.ts","../../src/shared/Input/view/InputView.ts","../../src/shared/Input/model/InputModel.ts","../../src/entities/InputField/view/InputFieldView.ts","../../src/entities/InputField/model/InputFieldModel.ts","../../src/widgets/LoginForm/types/enums.ts","../../src/widgets/LoginForm/view/LoginFormView.ts","../../src/shared/Server/ServerApi/types/enums.ts","../../src/utils/isKeyOfUser.ts","../../src/widgets/LoginForm/model/LoginFormModel.ts","../../src/shared/SessionStorage/types/enums.ts","../../src/utils/isUser.ts","../../src/pages/LoginPage/model/LoginPageModel.ts","../../src/app/Router/types/enums.ts","../../src/app/Router/model/RouterModel.ts","../../src/app/App/view/AppView.ts","../../src/widgets/Header/types/enums.ts","../../src/widgets/Header/view/HeaderView.ts","../../src/widgets/Header/model/HeaderModel.ts","../../src/shared/Server/ClientApi/model/ClientApiModel.ts","../../src/shared/Server/ServerApi/model/ServerApiModel.ts","../../src/shared/Server/Socket/model/SocketModel.ts","../../src/utils/isSessionStorageData.ts","../../src/shared/SessionStorage/model/SessionStorage.ts","../../src/utils/createSVGUse.ts","../../src/widgets/Footer/types/enums.ts","../../src/widgets/Footer/view/FooterView.ts","../../src/widgets/Footer/model/FooterModel.ts","../../src/shared/Modal/view/ModalView.ts","../../src/shared/Modal/model/ModalModel.ts","../../src/app/App/types/enums.ts","../../src/app/App/model/AppModel.ts","../../src/index.ts"],"sourcesContent":["const MEDIATOR_EVENTS = {\n  CHANGE_PAGE: 'changePage',\n  CREATE_NEW_USER: 'createNewUser',\n  SET_NEW_USER: 'setNewUser',\n  NEW_MESSAGE: 'newMessage',\n  LOG_IN: 'logIn',\n  LOG_OUT: 'logOut',\n  SOCKET_CONNECT: 'socketConnect',\n  SOCKET_DISCONNECT: 'socketDisconnect',\n  GET_ALL_AUTHENTICATED_USERS_REQUEST: 'getAllAuthenticatedUsersRequest',\n  GET_ALL_AUTHENTICATED_USERS_RESPONSE: 'getAllAuthenticatedUsersResponse',\n} as const;\n\nexport default MEDIATOR_EVENTS;\n","import type ListenerCallback from '../types/types.ts';\n\nclass EventMediatorModel<T> {\n  private static mediator = new EventMediatorModel();\n\n  private listeners: Map<string, Array<ListenerCallback<T>>> = new Map();\n\n  public static getInstance(): EventMediatorModel<unknown> {\n    return EventMediatorModel.mediator;\n  }\n\n  public subscribe(eventName: string, listener: ListenerCallback<T>): void {\n    if (this.listeners.has(eventName)) {\n      const listeners = this.listeners.get(eventName);\n      listeners?.push(listener);\n    } else {\n      const newListeners = [];\n      newListeners.push(listener);\n      this.listeners.set(eventName, newListeners);\n    }\n  }\n\n  public notify(eventName: string, params: T): void {\n    const eventListeners = this.listeners.get(eventName);\n    if (eventListeners) {\n      eventListeners.forEach((listener) => listener(params));\n    }\n  }\n\n  public unsubscribe(eventName: string, listener: ListenerCallback<T>): void {\n    if (this.listeners.has(eventName)) {\n      const listeners = this.listeners.get(eventName);\n      const index = listeners?.findIndex(\n        (l) => l.toString() === listener.toString(),\n      );\n\n      if (index !== undefined && index !== -1) {\n        listeners?.splice(index, 1);\n\n        if (listeners) {\n          this.listeners.set(eventName, listeners);\n        }\n      }\n    }\n  }\n}\n\nexport default EventMediatorModel;\n","export const TAG_NAMES = {\n  MAIN: 'main',\n  HEADER: 'header',\n  FOOTER: 'footer',\n  NAV: 'nav',\n  SECTION: 'section',\n  ARTICLE: 'article',\n  ASIDE: 'aside',\n  BUTTON: 'button',\n  FORM: 'form',\n  INPUT: 'input',\n  LABEL: 'label',\n  SELECT: 'select',\n  TEXTAREA: 'textarea',\n  SPAN: 'span',\n  DIV: 'div',\n  SVG: 'svg',\n  A: 'a',\n  I: 'i',\n  P: 'p',\n  UL: 'ul',\n  OL: 'ol',\n  LI: 'li',\n  H1: 'h1',\n  H2: 'h2',\n  H3: 'h3',\n  H4: 'h4',\n  H5: 'h5',\n  H6: 'h6',\n  IMG: 'img',\n  VIDEO: 'video',\n  AUDIO: 'audio',\n  SOURCE: 'source',\n  TRACK: 'track',\n  CANVAS: 'canvas',\n  MAP: 'map',\n  MARK: 'mark',\n  DETAILS: 'details',\n  SUMMARY: 'summary',\n  PRE: 'pre',\n  BLOCKQUOTE: 'blockquote',\n  ADDRESS: 'address',\n  DIVIDER: 'hr',\n  TABLE: 'table',\n  THEAD: 'thead',\n  TBODY: 'tbody',\n  TFOOT: 'tfoot',\n  TR: 'tr',\n  TD: 'td',\n  TH: 'th',\n} as const;\n\nexport const EVENT_NAMES = {\n  CLICK: 'click',\n  CHANGE: 'change',\n  INPUT: 'input',\n  SUBMIT: 'submit',\n  KEYUP: 'keyup',\n  KEYDOWN: 'keydown',\n  SCROLL: 'scroll',\n  RESIZE: 'resize',\n  FOCUS: 'focus',\n  BLUR: 'blur',\n  CONTEXTMENU: 'contextmenu',\n  DOM_CONTENT_LOADED: 'DOMContentLoaded',\n  LOAD: 'load',\n  ERROR: 'error',\n  ANIMATIONSTART: 'animationstart',\n  ANIMATIONEND: 'animationend',\n  ANIMATIONITERATION: 'animationiteration',\n  TRANSITIONEND: 'transitionend',\n  POPSTATE: 'popstate',\n  HASHCHANGE: 'hashchange',\n  BEFOREUNLOAD: 'beforeunload',\n  OPEN: 'open',\n  CLOSE: 'close',\n  MESSAGE: 'message',\n} as const;\n\nexport const IS_DISABLED = {\n  DISABLED: true,\n  ENABLED: false,\n} as const;\n","interface CreateBaseElement<T> {\n  tag: T;\n  cssClasses?: string[];\n  attributes?: Record<string, string>;\n  innerContent?: string;\n}\n\nconst createBaseElement = <T extends keyof HTMLElementTagNameMap>({\n  tag,\n  cssClasses = [],\n  attributes = {},\n  innerContent = '',\n}: CreateBaseElement<T>): HTMLElementTagNameMap[T] => {\n  const elem = document.createElement(tag);\n\n  elem.classList.add(...cssClasses);\n\n  Object.entries(attributes).forEach(([attrName, attrValue]) => {\n    elem.setAttribute(attrName, attrValue);\n  });\n\n  elem.innerHTML = innerContent;\n\n  return elem;\n};\n\nexport default createBaseElement;\n","import { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport MAIN_PAGE_STYLES from './mainPage.module.scss';\n\nclass MainPageView {\n  private parent: HTMLDivElement;\n\n  private page: HTMLDivElement;\n\n  constructor(parent: HTMLDivElement) {\n    this.parent = parent;\n    this.page = this.createHTML();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.page;\n  }\n\n  private createHTML(): HTMLDivElement {\n    this.page = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [MAIN_PAGE_STYLES.mainPage],\n    });\n\n    this.parent.append(this.page);\n\n    return this.page;\n  }\n}\nexport default MainPageView;\n","const PAGES_IDS = {\n  FOR_DEPLOY: 'kleostro-JSFE2023Q4/fun-chat/',\n  DEFAULT_PAGE: '',\n  LOGIN_PAGE: 'login',\n  MAIN_PAGE: 'main',\n  ABOUT_PAGE: 'about',\n} as const;\n\nconst AUTHENTICATION_ANIMATE_PARAMS = [\n  { transform: 'translateX(110%)' },\n  { transform: 'translateX(-10%)' },\n  { transform: 'translateX(-10%)' },\n  { transform: 'translateX(-10%)', opacity: 1 },\n  { transform: 'translate(-10%, -110%)', opacity: 0 },\n];\n\nexport const AUTHENTICATION_ANIMATE_DETAILS = {\n  params: AUTHENTICATION_ANIMATE_PARAMS,\n  duration: 5500,\n  easing: 'cubic-bezier(0, 0.2, 0.58, 0.7)',\n};\n\nexport const ABOUT_INFO_TEXT = {\n  text: 'This project was created for educational purposes.',\n  backButtonText: 'Go back',\n};\n\nexport default PAGES_IDS;\n","interface Status {\n  isDelivered: boolean;\n  isEdited: boolean;\n  isReaded: boolean;\n}\n\nexport interface User {\n  login: string;\n  password: string;\n}\n\ninterface Message {\n  id: string;\n  from: string;\n  to: string;\n  text: string;\n  datetime: number;\n  status: Status;\n}\n\ninterface FetchHistoryWithUser {\n  id: string;\n  payload: Message[];\n  type: 'MSG_FROM_USER';\n}\n\nexport interface Dialog {\n  history: FetchHistoryWithUser[];\n  login: string;\n}\n\n// state field typing\nexport interface State {\n  currentUser: User | null;\n  currentAuthorizedUsers: User[];\n  currentUnauthorizedUsers: User[];\n  currentUserDialogs: Dialog[];\n}\n\n// enumeration of state fields\nexport const STATE_FIELDS = {\n  CURRENT_USER: 'currentUser',\n  CURRENT_AUTHORIZED_USERS: 'currentAuthorizedUsers',\n  CURRENT_UNAUTHORIZED_USERS: 'currentUnauthorizedUsers',\n  CURRENT_USER_DIALOGS: 'currentUserDialogs',\n} as const;\n\n// initial state values\nexport const INITIAL_STATE: State = {\n  currentUser: null,\n  currentAuthorizedUsers: [],\n  currentUnauthorizedUsers: [],\n  currentUserDialogs: [],\n} as const;\n\nexport default INITIAL_STATE;\n","import type { State } from '../initialData.ts';\nimport type { Action, Reducer } from './types/types.ts';\n\nexport const rootReducer: Reducer<State, Action> = (\n  state: State,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'setCurrentUser':\n      return {\n        ...state,\n        currentUser: action.payload,\n      };\n    case 'setCurrentAuthorizedUsers':\n      return {\n        ...state,\n        currentAuthorizedUsers: action.payload,\n      };\n    case 'setCurrentUnauthorizedUsers':\n      return {\n        ...state,\n        currentUnauthorizedUsers: action.payload,\n      };\n    case 'setCurrentUserDialogs':\n      return {\n        ...state,\n        currentUserDialogs: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;\n","import { INITIAL_STATE } from '../initialData.ts';\nimport type { State } from '../initialData.ts';\nimport type { Action, Reducer } from '../reducer/types/types.ts';\nimport { rootReducer } from '../reducer/rootReducer.ts';\nimport type ACTIONS from '../actions/types/enums.ts';\n\nclass StoreModel {\n  private static listeners: Map<string, VoidFunction> = new Map();\n\n  private static rootReducer: Reducer<State, Action> = rootReducer;\n\n  private static state: State = INITIAL_STATE;\n\n  public static dispatch(action: Action): Action {\n    StoreModel.state = StoreModel.rootReducer(StoreModel.state, action);\n\n    StoreModel.listeners.forEach((_, key) => {\n      console.log(action, key);\n      if (key === action.type) {\n        const currentListener = StoreModel.listeners.get(key);\n        console.log(currentListener);\n        if (currentListener) {\n          currentListener();\n        }\n      }\n    });\n\n    return action;\n  }\n\n  public static getState(): State {\n    return structuredClone(StoreModel.state);\n  }\n\n  public static subscribe(\n    key: (typeof ACTIONS)[keyof typeof ACTIONS],\n    listener: VoidFunction,\n  ): VoidFunction {\n    StoreModel.listeners.set(key, listener);\n\n    return () => {\n      StoreModel.listeners.delete(key);\n    };\n  }\n}\n\nexport default StoreModel;\n","import type { User } from '../../../shared/Store/initialData.ts';\nimport { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport USER_LIST_STYLES from './userList.module.scss';\n\nclass UserListView {\n  private userList: HTMLUListElement;\n\n  private wrapper: HTMLDivElement;\n\n  constructor() {\n    this.userList = this.createUserList();\n    this.wrapper = this.createHTML();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.wrapper;\n  }\n\n  public drawUser(userInfo: User): void {\n    const user = createBaseElement({\n      tag: TAG_NAMES.LI,\n      cssClasses: [USER_LIST_STYLES.user],\n      innerContent: userInfo.login,\n    });\n    this.userList.append(user);\n  }\n\n  public clearUserList(): void {\n    this.userList.innerHTML = '';\n  }\n\n  private createUserList(): HTMLUListElement {\n    this.userList = createBaseElement({\n      tag: TAG_NAMES.UL,\n      cssClasses: [USER_LIST_STYLES.userList],\n    });\n    return this.userList;\n  }\n\n  private createHTML(): HTMLDivElement {\n    this.wrapper = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [USER_LIST_STYLES.wrapper],\n    });\n\n    this.wrapper.append(this.userList);\n    return this.wrapper;\n  }\n}\n\nexport default UserListView;\n","import type { User } from '../shared/Store/initialData.ts';\n\nexport interface Message {\n  type: string;\n  id: string | null;\n  payload: {\n    error: string | null;\n    users: User[] | [];\n  };\n}\n\nexport const isFromServerMessage = (message: unknown): null | Message => {\n  const isValidMessage = (msg: unknown): msg is Message =>\n    typeof msg === 'object' &&\n    msg !== null &&\n    'type' in msg &&\n    'id' in msg &&\n    'payload' in msg;\n\n  if (isValidMessage(message)) {\n    return message;\n  }\n  return null;\n};\n","const ACTIONS = {\n  SET_CURRENT_USER: 'setCurrentUser',\n  SET_CURRENT_AUTHORIZED_USERS: 'setCurrentAuthorizedUsers',\n  SET_CURRENT_UNAUTHORIZED_USERS: 'setCurrentUnauthorizedUsers',\n  SET_CURRENT_USER_DIALOGS: 'setCurrentUserDialogs',\n} as const;\n\nexport default ACTIONS;\n","import type { User, Dialog } from '../initialData.ts';\nimport ACTIONS from './types/enums.ts';\n\ntype ActionType = (typeof ACTIONS)[keyof typeof ACTIONS];\n\ninterface ActionWithPayload<T, U extends ActionType> {\n  payload: T;\n  type: U;\n}\n\nexport const setCurrentUser = (\n  value: User | null,\n): ActionWithPayload<User | null, typeof ACTIONS.SET_CURRENT_USER> => ({\n  payload: value,\n  type: ACTIONS.SET_CURRENT_USER,\n});\n\nexport const setCurrentAuthorizedUsers = (\n  value: User[],\n): ActionWithPayload<User[], typeof ACTIONS.SET_CURRENT_AUTHORIZED_USERS> => ({\n  payload: value,\n  type: ACTIONS.SET_CURRENT_AUTHORIZED_USERS,\n});\n\nexport const setCurrentUnauthorizedUsers = (\n  value: User[],\n): ActionWithPayload<\n  User[],\n  typeof ACTIONS.SET_CURRENT_UNAUTHORIZED_USERS\n> => ({\n  payload: value,\n  type: ACTIONS.SET_CURRENT_UNAUTHORIZED_USERS,\n});\n\nexport const setCurrentUserDialogs = (\n  value: Dialog[],\n): ActionWithPayload<Dialog[], typeof ACTIONS.SET_CURRENT_USER_DIALOGS> => ({\n  payload: value,\n  type: ACTIONS.SET_CURRENT_USER_DIALOGS,\n});\n","import MEDIATOR_EVENTS from '../../../shared/EventMediator/types/enums.ts';\nimport EventMediatorModel from '../../../shared/EventMediator/model/EventMediatorModel.ts';\nimport UserListView from '../view/UserListView.ts';\nimport { isFromServerMessage } from '../../../utils/isFromServerMessage.ts';\nimport StoreModel from '../../../shared/Store/model/StoreModel.ts';\nimport type { User } from '../../../shared/Store/initialData.ts';\nimport { setCurrentAuthorizedUsers } from '../../../shared/Store/actions/actions.ts';\n\nclass UserListModel {\n  private view: UserListView = new UserListView();\n\n  private eventMediator = EventMediatorModel.getInstance();\n\n  constructor() {\n    this.subscribeToEventMediator();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.view.getHTML();\n  }\n\n  private getActiveUsers(): void {\n    const requestMessage = {\n      id: '',\n      type: 'USER_ACTIVE',\n      payload: null,\n    };\n    this.eventMediator.notify(\n      MEDIATOR_EVENTS.GET_ALL_AUTHENTICATED_USERS_REQUEST,\n      requestMessage,\n    );\n  }\n\n  private drawActiveUsers(users: User[]): void {\n    console.log(users);\n    this.view.clearUserList();\n    users.forEach((user) => {\n      this.view.drawUser(user);\n    });\n  }\n\n  private saveCurrentActiveUsers(users: User[]): void {\n    const currentAuthUserLogin = StoreModel.getState().currentUser?.login;\n    console.log(users, currentAuthUserLogin);\n    const copyUsers = [...users];\n    const currentUsers = copyUsers.filter(\n      (user) => user.login !== currentAuthUserLogin,\n    );\n    StoreModel.dispatch(setCurrentAuthorizedUsers(currentUsers));\n    console.log(StoreModel.getState().currentAuthorizedUsers, currentUsers);\n    this.drawActiveUsers(currentUsers);\n  }\n\n  private subscribeToEventMediator(): boolean {\n    this.eventMediator.subscribe(\n      MEDIATOR_EVENTS.GET_ALL_AUTHENTICATED_USERS_RESPONSE,\n      (message) => {\n        const checkedMessage = isFromServerMessage(message);\n        if (checkedMessage) {\n          this.saveCurrentActiveUsers(checkedMessage.payload.users);\n        }\n      },\n    );\n\n    this.eventMediator.subscribe(\n      MEDIATOR_EVENTS.SET_NEW_USER,\n      this.getActiveUsers.bind(this),\n    );\n    return true;\n  }\n}\n\nexport default UserListModel;\n","import MEDIATOR_EVENTS from '../../../shared/EventMediator/types/enums.ts';\nimport EventMediatorModel from '../../../shared/EventMediator/model/EventMediatorModel.ts';\nimport type PageInterface from '../../types/interfaces.ts';\nimport MainPageView from '../view/MainPageView.ts';\nimport MAIN_PAGE_STYLES from '../view/mainPage.module.scss';\nimport PAGES_IDS from '../../types/enums.ts';\nimport StoreModel from '../../../shared/Store/model/StoreModel.ts';\nimport type RouterModel from '../../../app/Router/model/RouterModel.ts';\nimport UserListModel from '../../../widgets/UserList/model/UserListModel.ts';\n\nclass MainPageModel implements PageInterface {\n  private router: RouterModel;\n\n  private eventMediator = EventMediatorModel.getInstance();\n\n  private mainPageView: MainPageView;\n\n  constructor(parent: HTMLDivElement, router: RouterModel) {\n    this.router = router;\n    this.mainPageView = new MainPageView(parent);\n    this.init();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.mainPageView.getHTML();\n  }\n\n  private show(): boolean {\n    this.mainPageView\n      .getHTML()\n      .classList.remove(MAIN_PAGE_STYLES.mainPage_hidden);\n    return true;\n  }\n\n  private hide(): boolean {\n    this.mainPageView.getHTML().classList.add(MAIN_PAGE_STYLES.mainPage_hidden);\n    return true;\n  }\n\n  private switchPage(params: string): boolean {\n    if (params === PAGES_IDS.MAIN_PAGE) {\n      if (StoreModel.getState().currentUser) {\n        this.show();\n      } else {\n        this.router.navigateTo(PAGES_IDS.LOGIN_PAGE);\n        this.hide();\n      }\n    }\n\n    return true;\n  }\n\n  private subscribeToMediator(): boolean {\n    this.eventMediator.subscribe(MEDIATOR_EVENTS.CHANGE_PAGE, (params) => {\n      this.hide();\n      this.switchPage(String(params));\n    });\n    return true;\n  }\n\n  private init(): boolean {\n    this.hide();\n    this.subscribeToMediator();\n    this.getHTML().append(new UserListModel().getHTML());\n    return true;\n  }\n}\n\nexport default MainPageModel;\n","import { TAG_NAMES } from '../../types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport type ButtonAttributesInterface from '../types/interfaces.ts';\n\nclass ButtonView {\n  private button: HTMLButtonElement;\n\n  constructor(params: ButtonAttributesInterface) {\n    this.button = this.createHTML(params);\n  }\n\n  public getHTML(): HTMLButtonElement {\n    return this.button;\n  }\n\n  private createHTML(params: ButtonAttributesInterface): HTMLButtonElement {\n    this.button = createBaseElement({\n      tag: TAG_NAMES.BUTTON,\n      cssClasses: params.classes,\n      attributes: params.attrs,\n      innerContent: params.text,\n    });\n\n    if (params.action) {\n      this.button.addEventListener(params.action.key, params.action.value);\n    }\n\n    return this.button;\n  }\n}\n\nexport default ButtonView;\n","import { IS_DISABLED } from '../../types/enums.ts';\nimport type ButtonAttributesInterface from '../types/interfaces.ts';\nimport ButtonView from '../view/ButtonView.ts';\n\nclass ButtonModel {\n  private view: ButtonView;\n\n  constructor(params: ButtonAttributesInterface) {\n    this.view = new ButtonView(params);\n  }\n\n  public getHTML(): HTMLButtonElement {\n    return this.view.getHTML();\n  }\n\n  public setDisabled(): void {\n    this.view.getHTML().disabled = IS_DISABLED.DISABLED;\n  }\n\n  public setEnabled(): void {\n    this.view.getHTML().disabled = IS_DISABLED.ENABLED;\n  }\n}\n\nexport default ButtonModel;\n","import { ABOUT_INFO_TEXT } from '../../types/enums.ts';\nimport ButtonModel from '../../../shared/Button/model/ButtonModel.ts';\nimport { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport ABOUT_PAGE_STYLES from './aboutPage.module.scss';\n\nclass LoginPageView {\n  private parent: HTMLDivElement;\n\n  private aboutText: HTMLSpanElement;\n\n  private backButton: ButtonModel;\n\n  private page: HTMLDivElement;\n\n  constructor(parent: HTMLDivElement) {\n    this.parent = parent;\n    this.aboutText = this.createAboutText();\n    this.backButton = this.createBackButton();\n    this.page = this.createHTML();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.page;\n  }\n\n  public getBackButton(): ButtonModel {\n    return this.backButton;\n  }\n\n  private createAboutText(): HTMLSpanElement {\n    this.aboutText = createBaseElement({\n      tag: TAG_NAMES.SPAN,\n      cssClasses: [ABOUT_PAGE_STYLES.aboutText],\n      innerContent: ABOUT_INFO_TEXT.text,\n    });\n\n    return this.aboutText;\n  }\n\n  private createBackButton(): ButtonModel {\n    this.backButton = new ButtonModel({\n      text: ABOUT_INFO_TEXT.backButtonText,\n      classes: [ABOUT_PAGE_STYLES.backButton],\n    });\n\n    return this.backButton;\n  }\n\n  private createHTML(): HTMLDivElement {\n    this.page = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [ABOUT_PAGE_STYLES.aboutPage],\n    });\n\n    this.page.append(this.aboutText, this.backButton.getHTML());\n    this.parent.append(this.page);\n\n    return this.page;\n  }\n}\nexport default LoginPageView;\n","import EventMediatorModel from '../../../shared/EventMediator/model/EventMediatorModel.ts';\nimport type PageInterface from '../../types/interfaces.ts';\nimport AboutPageView from '../view/AboutPageView.ts';\nimport ABOUT_PAGE_STYLES from '../view/aboutPage.module.scss';\nimport MEDIATOR_EVENTS from '../../../shared/EventMediator/types/enums.ts';\nimport PAGES_IDS from '../../types/enums.ts';\nimport { EVENT_NAMES } from '../../../shared/types/enums.ts';\nimport type RouterModel from '../../../app/Router/model/RouterModel.ts';\nimport StoreModel from '../../../shared/Store/model/StoreModel.ts';\n\nclass AboutPageModel implements PageInterface {\n  private eventMediator = EventMediatorModel.getInstance();\n\n  private router: RouterModel;\n\n  private view: AboutPageView;\n\n  constructor(parent: HTMLDivElement, router: RouterModel) {\n    this.router = router;\n    this.view = new AboutPageView(parent);\n    this.init();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.view.getHTML();\n  }\n\n  private show(): boolean {\n    this.view.getHTML().classList.remove(ABOUT_PAGE_STYLES.aboutPage_hidden);\n    return true;\n  }\n\n  private hide(): boolean {\n    this.view.getHTML().classList.add(ABOUT_PAGE_STYLES.aboutPage_hidden);\n    return true;\n  }\n\n  private subscribeToMediator(): boolean {\n    this.eventMediator.subscribe(MEDIATOR_EVENTS.CHANGE_PAGE, (params) => {\n      if (params === PAGES_IDS.ABOUT_PAGE) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    });\n    return true;\n  }\n\n  private backButtonHandler(): boolean {\n    if (StoreModel.getState().currentUser) {\n      this.router.navigateTo(PAGES_IDS.MAIN_PAGE);\n    } else {\n      this.router.navigateTo(PAGES_IDS.LOGIN_PAGE);\n    }\n    this.hide();\n    return true;\n  }\n\n  private setBackButtonHandler(): boolean {\n    const backButton = this.view.getBackButton().getHTML();\n\n    backButton.addEventListener(\n      EVENT_NAMES.CLICK,\n      this.backButtonHandler.bind(this),\n    );\n    return true;\n  }\n\n  private init(): boolean {\n    this.subscribeToMediator();\n    this.setBackButtonHandler();\n    return true;\n  }\n}\n\nexport default AboutPageModel;\n","import { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport LOGIN_PAGE_STYLES from './loginPage.module.scss';\n\nclass LoginPageView {\n  private parent: HTMLDivElement;\n\n  private authenticationMessage: HTMLSpanElement;\n\n  private authenticationWrapper: HTMLDivElement;\n\n  private page: HTMLDivElement;\n\n  constructor(parent: HTMLDivElement) {\n    this.parent = parent;\n    this.authenticationMessage = this.createAuthenticationMessage();\n    this.authenticationWrapper = this.createAuthenticationWrapper();\n    this.page = this.createHTML();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.page;\n  }\n\n  public getShowAuthenticationMessage(): HTMLSpanElement {\n    return this.authenticationMessage;\n  }\n\n  public getShowAuthenticationWrapper(): HTMLDivElement {\n    return this.authenticationWrapper;\n  }\n\n  private createAuthenticationMessage(): HTMLSpanElement {\n    this.authenticationMessage = createBaseElement({\n      tag: TAG_NAMES.SPAN,\n      cssClasses: [LOGIN_PAGE_STYLES.authenticationMessage],\n    });\n\n    return this.authenticationMessage;\n  }\n\n  private createAuthenticationWrapper(): HTMLDivElement {\n    this.authenticationWrapper = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [LOGIN_PAGE_STYLES.authenticationWrapper],\n    });\n\n    this.authenticationWrapper.append(this.authenticationMessage);\n\n    return this.authenticationWrapper;\n  }\n\n  private createHTML(): HTMLDivElement {\n    this.page = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [LOGIN_PAGE_STYLES.loginPage],\n    });\n\n    this.page.append(this.authenticationWrapper);\n    this.parent.append(this.page);\n\n    return this.page;\n  }\n}\nexport default LoginPageView;\n","const BUTTON_TYPES = {\n  SUBMIT: 'submit',\n  RESET: 'reset',\n  BUTTON: 'button',\n} as const;\n\nexport default BUTTON_TYPES;\n","import type InputFieldValidatorParams from '../types/interfaces.ts';\n\nclass InputFieldValidatorModel {\n  private validParams;\n\n  private isValid: boolean;\n\n  constructor(validParams: InputFieldValidatorParams, isValid: boolean) {\n    this.validParams = validParams;\n    this.isValid = isValid;\n  }\n\n  public validate(value: string): boolean | string[] {\n    const errors = [\n      this.checkRequired(value),\n      this.checkNotSpecialSymbols(value),\n      this.checkMinLength(value),\n      this.checkMaxLength(value),\n      this.checkRequiredSymbols(value),\n    ];\n\n    const errorMessages: string[] = [];\n    errors.forEach((error) => {\n      if (typeof error === 'string') {\n        errorMessages.push(error);\n      }\n    });\n\n    if (errorMessages.length) {\n      return errorMessages;\n    }\n\n    this.isValid = true;\n    return this.isValid;\n  }\n\n  private checkMinLength(value: string): boolean | string {\n    if (\n      this.validParams.minLength &&\n      value.length < this.validParams.minLength\n    ) {\n      const errorMessage = `Min length should be at least ${this.validParams.minLength}`;\n      return errorMessage;\n    }\n\n    return true;\n  }\n\n  private checkMaxLength(value: string): boolean | string {\n    if (\n      this.validParams.maxLength &&\n      value.length > this.validParams.maxLength\n    ) {\n      const errorMessage = `Max length should not exceed ${this.validParams.maxLength}`;\n      return errorMessage;\n    }\n\n    return true;\n  }\n\n  private checkRequired(value: string): boolean | string {\n    if (this.validParams.required && value.trim() === '') {\n      const errorMessage = 'Field is required';\n      return errorMessage;\n    }\n\n    return true;\n  }\n\n  private checkRequiredSymbols(value: string): boolean | string {\n    if (\n      this.validParams.requiredSymbols &&\n      !this.validParams.requiredSymbols.pattern.test(value)\n    ) {\n      const errorMessage = this.validParams.requiredSymbols.message;\n      return errorMessage;\n    }\n\n    return true;\n  }\n\n  private checkNotSpecialSymbols(value: string): boolean | string {\n    if (\n      this.validParams.notSpecialSymbols &&\n      !this.validParams.notSpecialSymbols.pattern.test(value)\n    ) {\n      const errorMessage = this.validParams.notSpecialSymbols.message;\n      return errorMessage;\n    }\n\n    return true;\n  }\n}\n\nexport default InputFieldValidatorModel;\n","import { TAG_NAMES } from '../../types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\n\nclass InputView {\n  private input: HTMLInputElement;\n\n  constructor(attrs: Record<string, string>) {\n    this.input = this.createHTML(attrs);\n  }\n\n  public getHTML(): HTMLInputElement {\n    return this.input;\n  }\n\n  private createHTML(attrs: Record<string, string>): HTMLInputElement {\n    this.input = createBaseElement({\n      tag: TAG_NAMES.INPUT,\n      attributes: attrs,\n    });\n\n    return this.input;\n  }\n}\n\nexport default InputView;\n","import { IS_DISABLED } from '../../types/enums.ts';\nimport InputView from '../view/InputView.ts';\n\nclass InputModel {\n  private view: InputView;\n\n  constructor(attrs: Record<string, string>) {\n    this.view = new InputView(attrs);\n  }\n\n  public getHTML(): HTMLInputElement {\n    return this.view.getHTML();\n  }\n\n  public getValue(): string {\n    return this.view.getHTML().value;\n  }\n\n  public setDisabled(): void {\n    this.view.getHTML().disabled = IS_DISABLED.DISABLED;\n  }\n\n  public setEnabled(): void {\n    this.view.getHTML().disabled = IS_DISABLED.ENABLED;\n  }\n\n  public clear(): void {\n    this.view.getHTML().value = '';\n  }\n}\n\nexport default InputModel;\n","import createBaseElement from '../../../utils/createBaseElement.ts';\nimport InputModel from '../../../shared/Input/model/InputModel.ts';\nimport type {\n  InputFieldParams,\n  InputParams,\n  LabelParams,\n} from '../types/interfaces';\nimport { TAG_NAMES } from '../../../shared/types/enums.ts';\n\nclass InputFieldView {\n  private inputField: InputModel | HTMLLabelElement;\n\n  private label: HTMLLabelElement | null = null;\n\n  private errorField: HTMLSpanElement | null = null;\n\n  private input: InputModel;\n\n  constructor(params: InputFieldParams) {\n    this.input = this.createInput(params.inputParams);\n    this.inputField = this.createHTML(params);\n  }\n\n  public getHTML(): InputModel | HTMLLabelElement {\n    return this.inputField;\n  }\n\n  public getValue(): string {\n    if (this.inputField instanceof InputModel) {\n      return this.inputField.getValue();\n    }\n    return this.input.getValue();\n  }\n\n  public getInput(): InputModel {\n    return this.input;\n  }\n\n  public getErrorField(): HTMLSpanElement | null {\n    return this.errorField;\n  }\n\n  private createInput(inputParams: InputParams): InputModel {\n    const { id, type, placeholder, autocomplete } = inputParams;\n    this.input = new InputModel({\n      id,\n      type,\n      placeholder: placeholder || '',\n      autocomplete,\n    });\n\n    return this.input;\n  }\n\n  private createLabel(labelParams: LabelParams): HTMLLabelElement {\n    const { for: htmlFor, text } = labelParams;\n    this.label = createBaseElement({\n      tag: TAG_NAMES.LABEL,\n      attributes: {\n        for: htmlFor,\n      },\n      innerContent: text || '',\n    });\n\n    return this.label;\n  }\n\n  private createErrorField(): HTMLSpanElement {\n    this.errorField = createBaseElement({\n      tag: TAG_NAMES.SPAN,\n    });\n\n    return this.errorField;\n  }\n\n  private createHTML(params: InputFieldParams): InputModel | HTMLLabelElement {\n    const { labelParams } = params;\n    if (labelParams) {\n      this.inputField = this.createLabel(labelParams);\n      this.errorField = this.createErrorField();\n      this.label?.append(this.input.getHTML(), this.errorField);\n    } else {\n      this.inputField = this.input;\n    }\n\n    return this.inputField;\n  }\n}\n\nexport default InputFieldView;\n","import type InputFieldValidatorParams from '../../../features/InputFieldValidator/types/interfaces.ts';\nimport InputFieldValidatorModel from '../../../features/InputFieldValidator/model/InputFieldValidatorModel.ts';\nimport type { InputFieldParams } from '../types/interfaces.ts';\nimport InputFieldView from '../view/InputFieldView.ts';\nimport { EVENT_NAMES } from '../../../shared/types/enums.ts';\n\nclass InputFieldModel {\n  private view: InputFieldView;\n\n  private isValid = false;\n\n  private validator: InputFieldValidatorModel | null = null;\n\n  constructor(\n    inputFieldParams: InputFieldParams,\n    validParams: InputFieldValidatorParams | null,\n  ) {\n    this.view = new InputFieldView(inputFieldParams);\n\n    if (validParams) {\n      this.validator = new InputFieldValidatorModel(validParams, this.isValid);\n      this.setInputHandler();\n    }\n  }\n\n  public getView(): InputFieldView {\n    return this.view;\n  }\n\n  public getIsValid(): boolean {\n    return this.isValid;\n  }\n\n  private inputHandler(): boolean {\n    const errorField = this.view.getErrorField();\n    const errors = this.validator?.validate(this.view.getValue());\n    if (errors === true) {\n      if (errorField) {\n        errorField.textContent = '';\n      }\n      this.isValid = true;\n    } else {\n      if (errorField && errors) {\n        const [firstError] = errors;\n        errorField.textContent = firstError;\n      }\n      this.isValid = false;\n    }\n\n    return true;\n  }\n\n  private setInputHandler(): boolean {\n    const input = this.view.getInput().getHTML();\n    input.addEventListener(EVENT_NAMES.INPUT, () => {\n      this.inputHandler();\n    });\n\n    return true;\n  }\n}\n\nexport default InputFieldModel;\n","export const LOGIN_INPUT_FIELD_PARAMS = {\n  inputParams: {\n    id: 'login',\n    type: 'text',\n    placeholder: 'Login',\n    autocomplete: 'off',\n  },\n  labelParams: {\n    for: 'login',\n    text: 'Enter your login',\n  },\n} as const;\n\nexport const PASSWORD_INPUT_FIELD_PARAMS = {\n  inputParams: {\n    id: 'password',\n    type: 'password',\n    placeholder: 'Password',\n    autocomplete: 'off',\n  },\n  labelParams: {\n    for: 'password',\n    text: 'Enter your password',\n  },\n} as const;\n\nexport const FORM_INPUT_FIELD_PARAMS = [\n  LOGIN_INPUT_FIELD_PARAMS,\n  PASSWORD_INPUT_FIELD_PARAMS,\n];\n\nconst LOGIN_INPUT_FIELD_VALIDATE_PARAMS = {\n  key: 'login',\n  minLength: 4,\n  maxLength: 16,\n  required: true,\n  notSpecialSymbols: {\n    pattern: /^[a-zA-Z0-9]*$/,\n    message: 'Login must contain only letters and numbers',\n  },\n} as const;\n\nconst PASSWORD_INPUT_FIELD_VALIDATE_PARAMS = {\n  key: 'password',\n  minLength: 6,\n  required: true,\n  requiredSymbols: {\n    pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).+/,\n    message:\n      'Password must contain English letters, at least 1 upper case letter and at least 1 number',\n  },\n  notSpecialSymbols: {\n    pattern: /^[a-zA-Z0-9]*$/,\n    message: 'Password must contain only letters and numbers',\n  },\n} as const;\n\nexport const INPUT_FIELD_VALIDATION_PARAMS = [\n  LOGIN_INPUT_FIELD_VALIDATE_PARAMS,\n  PASSWORD_INPUT_FIELD_VALIDATE_PARAMS,\n];\n","import BUTTON_TYPES from '../../../shared/Button/types/enums.ts';\nimport ButtonModel from '../../../shared/Button/model/ButtonModel.ts';\nimport { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport InputFieldModel from '../../../entities/InputField/model/InputFieldModel.ts';\nimport {\n  FORM_INPUT_FIELD_PARAMS,\n  INPUT_FIELD_VALIDATION_PARAMS,\n} from '../types/enums.ts';\nimport LOGIN_FORM_STYLES from './loginForm.module.scss';\n\nclass LoginFormView {\n  private submitFormButton: ButtonModel;\n\n  private inputFields: InputFieldModel[] = [];\n\n  private form: HTMLFormElement;\n\n  constructor() {\n    this.inputFields = this.createInputFields();\n    this.submitFormButton = this.createSubmitFormButton();\n    this.form = this.createHTML();\n  }\n\n  public getHTML(): HTMLFormElement {\n    return this.form;\n  }\n\n  public getInputFields(): InputFieldModel[] {\n    return this.inputFields;\n  }\n\n  public getSubmitFormButton(): ButtonModel {\n    return this.submitFormButton;\n  }\n\n  private createSubmitFormButton(): ButtonModel {\n    const text = 'Login';\n    this.submitFormButton = new ButtonModel({\n      text,\n      attrs: {\n        type: BUTTON_TYPES.SUBMIT,\n      },\n    });\n\n    this.submitFormButton.setDisabled();\n\n    return this.submitFormButton;\n  }\n\n  private createInputFields(): InputFieldModel[] {\n    FORM_INPUT_FIELD_PARAMS.forEach((inputFieldParams) => {\n      const currentValidateParams = INPUT_FIELD_VALIDATION_PARAMS.find(\n        (validParams) => validParams.key === inputFieldParams.inputParams.id,\n      );\n\n      if (currentValidateParams) {\n        const inputField = new InputFieldModel(\n          inputFieldParams,\n          currentValidateParams,\n        );\n        this.inputFields.push(inputField);\n      } else {\n        this.inputFields.push(new InputFieldModel(inputFieldParams, null));\n      }\n    });\n\n    return this.inputFields;\n  }\n\n  private createHTML(): HTMLFormElement {\n    this.form = createBaseElement({\n      tag: TAG_NAMES.FORM,\n      cssClasses: [LOGIN_FORM_STYLES.loginForm],\n    });\n\n    this.inputFields.forEach((inputField) => {\n      const inputFieldElement = inputField.getView().getHTML();\n\n      if (inputFieldElement instanceof HTMLLabelElement) {\n        this.form.append(inputFieldElement);\n      } else {\n        this.form.append(inputFieldElement.getHTML());\n      }\n    });\n\n    this.form.append(this.submitFormButton.getHTML());\n    return this.form;\n  }\n}\n\nexport default LoginFormView;\n","const API_URL = 'ws://127.0.0.1:4000';\n\nexport const API_TYPES = {\n  USER_LOGIN: 'USER_LOGIN',\n  USER_LOGOUT: 'USER_LOGOUT',\n  USER_ACTIVE: 'USER_ACTIVE',\n  USER_INACTIVE: 'USER_INACTIVE',\n  ERROR: 'ERROR',\n} as const;\n\nexport const CHECK_INTERVAL = 5000;\n\nexport default API_URL;\n","import type { User } from '../shared/Store/initialData.ts';\n\nconst isKeyOfUser = (context: User, key: string): key is keyof User =>\n  Object.hasOwnProperty.call(context, key);\n\nexport default isKeyOfUser;\n","import LoginFormView from '../view/LoginFormView.ts';\nimport { EVENT_NAMES } from '../../../shared/types/enums.ts';\nimport type InputFieldModel from '../../../entities/InputField/model/InputFieldModel.ts';\nimport type { User } from '../../../shared/Store/initialData.ts';\nimport EventMediatorModel from '../../../shared/EventMediator/model/EventMediatorModel.ts';\nimport MEDIATOR_EVENTS from '../../../shared/EventMediator/types/enums.ts';\nimport type LoginUser from '../../../shared/Server/ServerApi/types/interfaces.ts';\nimport { API_TYPES } from '../../../shared/Server/ServerApi/types/enums.ts';\nimport isKeyOfUser from '../../../utils/isKeyOfUser.ts';\n\nclass LoginFormModel {\n  private view: LoginFormView = new LoginFormView();\n\n  private messageID = '';\n\n  private userData: User = {\n    login: '',\n    password: '',\n  };\n\n  private inputFields: InputFieldModel[] = [];\n\n  private isValidInputFields: Record<string, boolean> = {};\n\n  private eventMediator = EventMediatorModel.getInstance();\n\n  constructor() {\n    this.init();\n  }\n\n  public getHTML(): HTMLFormElement {\n    return this.view.getHTML();\n  }\n\n  public getMessageID(): string {\n    return this.messageID;\n  }\n\n  public getUserData(): User {\n    return this.userData;\n  }\n\n  private setInputFieldHandlers(inputField: InputFieldModel): boolean {\n    const inputHTML = inputField.getView().getInput().getHTML();\n    this.isValidInputFields[inputHTML.id] = false;\n    inputHTML.addEventListener(EVENT_NAMES.INPUT, () => {\n      this.isValidInputFields[inputHTML.id] = inputField.getIsValid();\n      this.switchSubmitFormButtonAccess();\n    });\n    return true;\n  }\n\n  private switchSubmitFormButtonAccess(): boolean {\n    if (Object.values(this.isValidInputFields).every((value) => value)) {\n      this.view.getSubmitFormButton().setEnabled();\n    } else {\n      this.view.getSubmitFormButton().setDisabled();\n    }\n\n    return true;\n  }\n\n  private getFormData(): User {\n    this.inputFields.forEach((inputField) => {\n      const input = inputField.getView().getInput();\n      const inputHTML = input.getHTML();\n      const inputValue = input.getValue();\n\n      if (isKeyOfUser(this.userData, inputHTML.id)) {\n        this.userData[inputHTML.id] = inputValue;\n        this.isValidInputFields[inputHTML.id] = false;\n      }\n\n      input.clear();\n    });\n\n    this.view.getSubmitFormButton().setDisabled();\n    return this.userData;\n  }\n\n  private submitFormButtonHandler(): boolean {\n    this.messageID = crypto.randomUUID();\n    const userData: LoginUser = {\n      id: this.messageID,\n      type: API_TYPES.USER_LOGIN,\n      payload: {\n        user: this.getFormData(),\n      },\n    };\n\n    this.eventMediator.notify(MEDIATOR_EVENTS.CREATE_NEW_USER, userData);\n    return true;\n  }\n\n  private setSubmitFormButtonHandler(): boolean {\n    const submitFormButton = this.view.getSubmitFormButton().getHTML();\n    submitFormButton.addEventListener(\n      EVENT_NAMES.CLICK,\n      this.submitFormButtonHandler.bind(this),\n    );\n\n    return true;\n  }\n\n  private setPreventDefaultToForm(): boolean {\n    this.getHTML().addEventListener(EVENT_NAMES.SUBMIT, (event) => {\n      event.preventDefault();\n    });\n\n    return true;\n  }\n\n  private init(): boolean {\n    this.inputFields = this.view.getInputFields();\n    this.inputFields.forEach((inputField) =>\n      this.setInputFieldHandlers(inputField),\n    );\n    this.setSubmitFormButtonHandler();\n    this.setPreventDefaultToForm();\n\n    return true;\n  }\n}\n\nexport default LoginFormModel;\n","const STORE_KEYS = {\n  SS_NAME: 'b3413f43-40a4-440c-80c0-6aa64b9b1240',\n  CURRENT_USER: 'currentUser',\n} as const;\n\nexport default STORE_KEYS;\n","import type { User } from '../shared/Store/initialData.ts';\n\nconst isUser = (data: unknown): data is User =>\n  typeof data === 'object' &&\n  data !== null &&\n  'login' in data &&\n  'password' in data;\n\nexport default isUser;\n","import MEDIATOR_EVENTS from '../../../shared/EventMediator/types/enums.ts';\nimport EventMediatorModel from '../../../shared/EventMediator/model/EventMediatorModel.ts';\nimport type PageInterface from '../../types/interfaces.ts';\nimport LoginPageView from '../view/LoginPageView.ts';\nimport LOGIN_PAGE_STYLES from '../view/loginPage.module.scss';\nimport PAGES_IDS, {\n  AUTHENTICATION_ANIMATE_DETAILS,\n} from '../../types/enums.ts';\nimport LoginFormModel from '../../../widgets/LoginForm/model/LoginFormModel.ts';\nimport StoreModel from '../../../shared/Store/model/StoreModel.ts';\nimport type RouterModel from '../../../app/Router/model/RouterModel.ts';\nimport type { Message } from '../../../utils/isFromServerMessage.ts';\nimport { isFromServerMessage } from '../../../utils/isFromServerMessage.ts';\nimport { API_TYPES } from '../../../shared/Server/ServerApi/types/enums.ts';\nimport type SessionStorageModel from '../../../shared/SessionStorage/model/SessionStorage.ts';\nimport STORE_KEYS from '../../../shared/SessionStorage/types/enums.ts';\nimport isUser from '../../../utils/isUser.ts';\nimport type { User } from '../../../shared/Store/initialData.ts';\nimport type LoginUser from '../../../shared/Server/ServerApi/types/interfaces.ts';\nimport { setCurrentUser } from '../../../shared/Store/actions/actions.ts';\n\nclass LoginPageModel implements PageInterface {\n  private loginPageView: LoginPageView;\n\n  private router: RouterModel;\n\n  private storage: SessionStorageModel;\n\n  private eventMediator = EventMediatorModel.getInstance();\n\n  private loginFormModel = new LoginFormModel();\n\n  constructor(\n    parent: HTMLDivElement,\n    router: RouterModel,\n    storage: SessionStorageModel,\n  ) {\n    this.loginPageView = new LoginPageView(parent);\n    this.router = router;\n    this.storage = storage;\n    this.initPage();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.loginPageView.getHTML();\n  }\n\n  private show(): boolean {\n    this.loginPageView\n      .getHTML()\n      .classList.remove(LOGIN_PAGE_STYLES.loginPage_hidden);\n    return true;\n  }\n\n  private hide(): boolean {\n    this.loginPageView\n      .getHTML()\n      .classList.add(LOGIN_PAGE_STYLES.loginPage_hidden);\n    return true;\n  }\n\n  private checkAuthorizedUser(): User | null {\n    const currentUser = this.storage.get(STORE_KEYS.CURRENT_USER);\n\n    if (currentUser && isUser(currentUser)) {\n      const userData: LoginUser = {\n        id: null,\n        type: API_TYPES.USER_LOGIN,\n        payload: {\n          user: currentUser,\n        },\n      };\n\n      StoreModel.dispatch(setCurrentUser(currentUser));\n      this.eventMediator.notify(MEDIATOR_EVENTS.CREATE_NEW_USER, userData);\n      return currentUser;\n    }\n\n    return null;\n  }\n\n  private switchPage(params: string): boolean {\n    if (params === PAGES_IDS.LOGIN_PAGE || params === PAGES_IDS.DEFAULT_PAGE) {\n      if (StoreModel.getState().currentUser) {\n        this.router.navigateTo(PAGES_IDS.MAIN_PAGE);\n        this.hide();\n      } else {\n        this.show();\n      }\n    } else {\n      this.hide();\n    }\n\n    return true;\n  }\n\n  private handleSuccessMessage(): boolean {\n    const userData = this.loginFormModel.getUserData();\n    StoreModel.dispatch(setCurrentUser(userData));\n    this.storage.add(STORE_KEYS.CURRENT_USER, JSON.stringify(userData));\n    this.router.navigateTo(PAGES_IDS.MAIN_PAGE);\n    this.hide();\n    return true;\n  }\n\n  private showErrorMessage(error: string): boolean {\n    const authenticationWrapper =\n      this.loginPageView.getShowAuthenticationWrapper();\n    this.loginPageView.getShowAuthenticationMessage().textContent = error;\n    authenticationWrapper.animate(AUTHENTICATION_ANIMATE_DETAILS.params, {\n      duration: AUTHENTICATION_ANIMATE_DETAILS.duration,\n      easing: AUTHENTICATION_ANIMATE_DETAILS.easing,\n    });\n    return true;\n  }\n\n  private handleErrorMessage(checkedMessage: Message): boolean {\n    if (checkedMessage?.payload?.error) {\n      this.showErrorMessage(checkedMessage?.payload?.error);\n    }\n    return true;\n  }\n\n  private handleMessageFromServer(checkedMessage: Message): boolean {\n    const savedUser = this.storage.get(STORE_KEYS.CURRENT_USER);\n    if (savedUser && isUser(savedUser)) {\n      StoreModel.dispatch(setCurrentUser(savedUser));\n      this.router.navigateTo(PAGES_IDS.MAIN_PAGE);\n      this.hide();\n      return true;\n    }\n\n    if (checkedMessage?.type !== API_TYPES.ERROR) {\n      this.handleSuccessMessage();\n    } else if (checkedMessage?.id === this.loginFormModel.getMessageID()) {\n      this.handleErrorMessage(checkedMessage);\n    }\n    return true;\n  }\n\n  private subscribeToMediator(): boolean {\n    this.eventMediator.subscribe(MEDIATOR_EVENTS.CHANGE_PAGE, (params) => {\n      this.switchPage(String(params));\n    });\n\n    this.eventMediator.subscribe(MEDIATOR_EVENTS.SET_NEW_USER, (message) => {\n      const checkedMessage = isFromServerMessage(message);\n      if (checkedMessage) {\n        this.handleMessageFromServer(checkedMessage);\n      }\n    });\n    return true;\n  }\n\n  private initPage(): boolean {\n    this.checkAuthorizedUser();\n    this.subscribeToMediator();\n    this.hide();\n    const loginFormHTML = this.loginFormModel.getHTML();\n    this.getHTML().append(loginFormHTML);\n    return true;\n  }\n}\n\nexport default LoginPageModel;\n","const ROUTER_DETAILS = {\n  DEFAULT_SEGMENT: '/',\n  NEXT_SEGMENT: 1,\n  PATH_SEGMENTS_TO_KEEP: 2,\n  CURRENT_SEGMENT: 0,\n} as const;\n\nexport default ROUTER_DETAILS;\n","import { EVENT_NAMES } from '../../../shared/types/enums.ts';\nimport PAGES_IDS from '../../../pages/types/enums.ts';\nimport type PageInterface from '../../../pages/types/interfaces.ts';\nimport ROUTER_DETAILS from '../types/enums.ts';\nimport EventMediatorModel from '../../../shared/EventMediator/model/EventMediatorModel.ts';\nimport MEDIATOR_EVENTS from '../../../shared/EventMediator/types/enums.ts';\n\nclass RouterModel {\n  private pages: Map<string, PageInterface> = new Map();\n\n  private eventMediator = EventMediatorModel.getInstance();\n\n  constructor() {\n    document.addEventListener(EVENT_NAMES.DOM_CONTENT_LOADED, () => {\n      const currentPath = window.location.pathname\n        .split(ROUTER_DETAILS.DEFAULT_SEGMENT)\n        .slice(\n          ROUTER_DETAILS.PATH_SEGMENTS_TO_KEEP + ROUTER_DETAILS.NEXT_SEGMENT,\n        )\n        .join(ROUTER_DETAILS.DEFAULT_SEGMENT);\n      this.handleRequest(currentPath);\n      this.eventMediator.notify(\n        MEDIATOR_EVENTS.CHANGE_PAGE,\n        currentPath.split(ROUTER_DETAILS.DEFAULT_SEGMENT).join(),\n      );\n    });\n\n    window.addEventListener(EVENT_NAMES.POPSTATE, () => {\n      const currentPath = window.location.pathname\n        .split(ROUTER_DETAILS.DEFAULT_SEGMENT)\n        .slice(\n          ROUTER_DETAILS.PATH_SEGMENTS_TO_KEEP + ROUTER_DETAILS.NEXT_SEGMENT,\n        )\n        .join(ROUTER_DETAILS.DEFAULT_SEGMENT);\n      this.handleRequest(currentPath);\n    });\n  }\n\n  public setPages(pages: Map<string, PageInterface>): void {\n    this.pages = pages;\n  }\n\n  public navigateTo(route: string): void {\n    this.handleRequest(route);\n\n    const pathnameApp = window.location.pathname\n      .split(ROUTER_DETAILS.DEFAULT_SEGMENT)\n      .slice(\n        ROUTER_DETAILS.NEXT_SEGMENT,\n        ROUTER_DETAILS.PATH_SEGMENTS_TO_KEEP + ROUTER_DETAILS.NEXT_SEGMENT,\n      )\n      .join(ROUTER_DETAILS.DEFAULT_SEGMENT);\n    const url = `/${pathnameApp}/${route}`;\n    window.history.pushState({}, '', url);\n  }\n\n  private handleRequest(path: string): void {\n    const pathParts = path.split(ROUTER_DETAILS.DEFAULT_SEGMENT);\n    const hasRoute = this.pages.has(pathParts.join(''));\n    if (!hasRoute) {\n      window.location.pathname = `${PAGES_IDS.FOR_DEPLOY}`;\n      this.eventMediator.notify(\n        MEDIATOR_EVENTS.CHANGE_PAGE,\n        PAGES_IDS.DEFAULT_PAGE,\n      );\n      return;\n    }\n\n    this.eventMediator.notify(MEDIATOR_EVENTS.CHANGE_PAGE, pathParts.join());\n  }\n}\n\nexport default RouterModel;\n","import { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport APP_STYLES from './app.module.scss';\n\nclass AppView {\n  private pagesContainer: HTMLDivElement;\n\n  constructor() {\n    this.pagesContainer = this.createHTML();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.pagesContainer;\n  }\n\n  private createHTML(): HTMLDivElement {\n    this.pagesContainer = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [APP_STYLES.siteWrapper],\n    });\n\n    return this.pagesContainer;\n  }\n}\n\nexport default AppView;\n","export const APP_NAME = 'Fun Chat';\nexport const LOGOUT_BUTTON_TEXT = 'Logout';\nexport const ABOUT_BUTTON_TEXT = 'About';\n","import ButtonModel from '../../../shared/Button/model/ButtonModel.ts';\nimport { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport {\n  ABOUT_BUTTON_TEXT,\n  APP_NAME,\n  LOGOUT_BUTTON_TEXT,\n} from '../types/enums.ts';\nimport HEADER_STYLES from './header.module.scss';\n\nclass HeaderView {\n  private nameApp: HTMLHeadingElement;\n\n  private userLogin: HTMLSpanElement;\n\n  private aboutButton: ButtonModel;\n\n  private logoutButton: ButtonModel;\n\n  private header: HTMLElement;\n\n  constructor() {\n    this.nameApp = this.createNameApp();\n    this.userLogin = this.createUserLogin();\n    this.aboutButton = this.createAboutButton();\n    this.logoutButton = this.createLogoutButton();\n    this.header = this.createHTML();\n  }\n\n  public getHTML(): HTMLElement {\n    return this.header;\n  }\n\n  public getUserLogin(): HTMLSpanElement {\n    return this.userLogin;\n  }\n\n  public getLogoutButton(): ButtonModel {\n    return this.logoutButton;\n  }\n\n  public getAboutButton(): ButtonModel {\n    return this.aboutButton;\n  }\n\n  private createNameApp(): HTMLHeadingElement {\n    this.nameApp = createBaseElement({\n      tag: TAG_NAMES.H1,\n      cssClasses: [HEADER_STYLES.nameApp],\n      innerContent: APP_NAME,\n    });\n\n    return this.nameApp;\n  }\n\n  private createUserLogin(): HTMLSpanElement {\n    this.userLogin = createBaseElement({\n      tag: TAG_NAMES.SPAN,\n      cssClasses: [HEADER_STYLES.userLogin],\n    });\n\n    return this.userLogin;\n  }\n\n  private createAboutButton(): ButtonModel {\n    this.aboutButton = new ButtonModel({\n      classes: [HEADER_STYLES.aboutButton],\n      text: ABOUT_BUTTON_TEXT,\n    });\n\n    return this.aboutButton;\n  }\n\n  private createLogoutButton(): ButtonModel {\n    this.logoutButton = new ButtonModel({\n      classes: [HEADER_STYLES.logoutButton],\n      text: LOGOUT_BUTTON_TEXT,\n    });\n\n    this.logoutButton.setDisabled();\n\n    return this.logoutButton;\n  }\n\n  private createHTML(): HTMLElement {\n    this.header = createBaseElement({\n      tag: TAG_NAMES.HEADER,\n      cssClasses: [HEADER_STYLES.header],\n    });\n\n    this.header.append(\n      this.nameApp,\n      this.userLogin,\n      this.aboutButton.getHTML(),\n      this.logoutButton.getHTML(),\n    );\n\n    return this.header;\n  }\n}\n\nexport default HeaderView;\n","import PAGES_IDS from '../../../pages/types/enums.ts';\nimport type RouterModel from '../../../app/Router/model/RouterModel.ts';\nimport HeaderView from '../view/HeaderView.ts';\nimport { EVENT_NAMES } from '../../../shared/types/enums.ts';\nimport StoreModel from '../../../shared/Store/model/StoreModel.ts';\nimport STORE_KEYS from '../../../shared/SessionStorage/types/enums.ts';\nimport type SessionStorageModel from '../../../shared/SessionStorage/model/SessionStorage.ts';\nimport EventMediatorModel from '../../../shared/EventMediator/model/EventMediatorModel.ts';\nimport MEDIATOR_EVENTS from '../../../shared/EventMediator/types/enums.ts';\nimport { API_TYPES } from '../../../shared/Server/ServerApi/types/enums.ts';\nimport { setCurrentUser } from '../../../shared/Store/actions/actions.ts';\nimport ACTIONS from '../../../shared/Store/actions/types/enums.ts';\n\nclass HeaderModel {\n  private view: HeaderView = new HeaderView();\n\n  private eventMediator = EventMediatorModel.getInstance();\n\n  private router: RouterModel;\n\n  private storage: SessionStorageModel;\n\n  constructor(router: RouterModel, storage: SessionStorageModel) {\n    this.router = router;\n    this.storage = storage;\n    this.init();\n  }\n\n  public getHTML(): HTMLElement {\n    return this.view.getHTML();\n  }\n\n  private logoutButtonHandler(): boolean {\n    const logOutData = {\n      id: null,\n      type: API_TYPES.USER_LOGOUT,\n      payload: {\n        user: {\n          login: StoreModel.getState().currentUser?.login,\n          password: StoreModel.getState().currentUser?.password,\n        },\n      },\n    };\n    this.eventMediator.notify(MEDIATOR_EVENTS.LOG_OUT, logOutData);\n    this.storage.remove(STORE_KEYS.CURRENT_USER);\n    StoreModel.dispatch(setCurrentUser(null));\n    this.view.getLogoutButton().setDisabled();\n    this.router.navigateTo(PAGES_IDS.LOGIN_PAGE);\n\n    return true;\n  }\n\n  private setLogoutButtonHandler(): boolean {\n    const logoutButton = this.view.getLogoutButton().getHTML();\n    const aboutButton = this.view.getAboutButton().getHTML();\n\n    logoutButton.addEventListener(\n      EVENT_NAMES.CLICK,\n      this.logoutButtonHandler.bind(this),\n    );\n\n    aboutButton.addEventListener(\n      EVENT_NAMES.CLICK,\n      this.router.navigateTo.bind(this.router, PAGES_IDS.ABOUT_PAGE),\n    );\n\n    return true;\n  }\n\n  private changeCurrentUserLogin(): boolean {\n    const userLogin = this.view.getUserLogin();\n    userLogin.textContent = StoreModel.getState().currentUser?.login || '';\n    this.view.getLogoutButton().setEnabled();\n    return true;\n  }\n\n  private init(): boolean {\n    this.setLogoutButtonHandler();\n\n    StoreModel.subscribe(\n      ACTIONS.SET_CURRENT_USER,\n      this.changeCurrentUserLogin.bind(this),\n    );\n\n    return true;\n  }\n}\n\nexport default HeaderModel;\n","import MEDIATOR_EVENTS from '../../../EventMediator/types/enums.ts';\nimport EventMediatorModel from '../../../EventMediator/model/EventMediatorModel.ts';\n\nclass ClientApiModel {\n  private webSocket: WebSocket;\n\n  private isOpen: boolean;\n\n  private eventMediator = EventMediatorModel.getInstance();\n\n  constructor(webSocket: WebSocket, isOpen: boolean) {\n    this.webSocket = webSocket;\n    this.isOpen = isOpen;\n    this.subscribeToEventMediator();\n  }\n\n  public isWorks(): boolean {\n    return this.isOpen;\n  }\n\n  private sendMessage(message: unknown): boolean {\n    this.webSocket.send(JSON.stringify(message));\n    return true;\n  }\n\n  private subscribeToEventMediator(): boolean {\n    const createNewUserListener = (message: unknown): void => {\n      this.sendMessage(message);\n    };\n\n    this.eventMediator.unsubscribe(\n      MEDIATOR_EVENTS.CREATE_NEW_USER,\n      createNewUserListener,\n    );\n\n    this.eventMediator.unsubscribe(\n      MEDIATOR_EVENTS.LOG_OUT,\n      createNewUserListener,\n    );\n\n    this.eventMediator.unsubscribe(\n      MEDIATOR_EVENTS.GET_ALL_AUTHENTICATED_USERS_REQUEST,\n      createNewUserListener,\n    );\n\n    this.eventMediator.subscribe(\n      MEDIATOR_EVENTS.CREATE_NEW_USER,\n      createNewUserListener,\n    );\n\n    this.eventMediator.subscribe(\n      MEDIATOR_EVENTS.LOG_OUT,\n      createNewUserListener,\n    );\n\n    this.eventMediator.subscribe(\n      MEDIATOR_EVENTS.GET_ALL_AUTHENTICATED_USERS_REQUEST,\n      createNewUserListener,\n    );\n\n    return true;\n  }\n}\n\nexport default ClientApiModel;\n","import MEDIATOR_EVENTS from '../../../EventMediator/types/enums.ts';\nimport EventMediatorModel from '../../../EventMediator/model/EventMediatorModel.ts';\nimport { EVENT_NAMES } from '../../../types/enums.ts';\nimport { API_TYPES } from '../types/enums.ts';\nimport type { Message } from '../../../../utils/isFromServerMessage.ts';\nimport { isFromServerMessage } from '../../../../utils/isFromServerMessage.ts';\n\nclass ServerApiModel {\n  private webSocket: WebSocket;\n\n  private isOpen: boolean;\n\n  private eventMediator = EventMediatorModel.getInstance();\n\n  constructor(webSocket: WebSocket, isOpen: boolean) {\n    this.webSocket = webSocket;\n    this.isOpen = isOpen;\n    this.getMessage();\n  }\n\n  public isWorks(): boolean {\n    return this.isOpen;\n  }\n\n  private getMessage(): boolean {\n    this.webSocket.addEventListener(EVENT_NAMES.MESSAGE, ({ data }) => {\n      const message: unknown = JSON.parse(String(data));\n      const checkedMessage = isFromServerMessage(message);\n      if (checkedMessage) {\n        this.handleMessageType(checkedMessage);\n      }\n    });\n    return true;\n  }\n\n  private handleMessageType(message: Message): null | boolean {\n    switch (message.type) {\n      case API_TYPES.USER_LOGIN: {\n        this.eventMediator.notify(MEDIATOR_EVENTS.SET_NEW_USER, message);\n        return true;\n      }\n      case API_TYPES.ERROR: {\n        this.eventMediator.notify(MEDIATOR_EVENTS.SET_NEW_USER, message);\n        return false;\n      }\n      case API_TYPES.USER_ACTIVE: {\n        this.eventMediator.notify(\n          MEDIATOR_EVENTS.GET_ALL_AUTHENTICATED_USERS_RESPONSE,\n          message,\n        );\n        return true;\n      }\n      default: {\n        return null;\n      }\n    }\n  }\n}\n\nexport default ServerApiModel;\n","import MEDIATOR_EVENTS from '../../../EventMediator/types/enums.ts';\nimport EventMediatorModel from '../../../EventMediator/model/EventMediatorModel.ts';\nimport { EVENT_NAMES } from '../../../types/enums.ts';\nimport ClientApiModel from '../../ClientApi/model/ClientApiModel.ts';\nimport ServerApiModel from '../../ServerApi/model/ServerApiModel.ts';\nimport API_URL, {\n  API_TYPES,\n  CHECK_INTERVAL,\n} from '../../ServerApi/types/enums.ts';\nimport StoreModel from '../../../Store/model/StoreModel.ts';\n\nclass SocketModel {\n  private webSocket = new WebSocket(API_URL);\n\n  private eventMediator = EventMediatorModel.getInstance();\n\n  private isOpen = false;\n\n  constructor() {\n    this.connectWebSocket();\n  }\n\n  public isWorks(): boolean {\n    return this.isOpen;\n  }\n\n  private connectWebSocket(): boolean {\n    let reconnectTimeout: NodeJS.Timeout;\n\n    this.webSocket = new WebSocket(API_URL);\n\n    const reconnect = (): void => {\n      reconnectTimeout = setTimeout(() => {\n        this.connectWebSocket();\n      }, CHECK_INTERVAL);\n    };\n\n    this.webSocket.addEventListener(EVENT_NAMES.OPEN, () => {\n      this.isOpen = true;\n      this.init();\n      clearTimeout(reconnectTimeout);\n\n      const authUserLogin = StoreModel.getState().currentUser?.login;\n      const authUserPassword = StoreModel.getState().currentUser?.password;\n      if (authUserLogin && authUserPassword) {\n        const userData = {\n          id: null,\n          type: API_TYPES.USER_LOGIN,\n          payload: {\n            user: {\n              login: authUserLogin,\n              password: authUserPassword,\n            },\n          },\n        };\n        this.eventMediator.notify(MEDIATOR_EVENTS.CREATE_NEW_USER, userData);\n      }\n\n      this.eventMediator.notify(MEDIATOR_EVENTS.SOCKET_CONNECT, null);\n    });\n\n    this.webSocket.addEventListener(EVENT_NAMES.CLOSE, () => {\n      this.isOpen = false;\n      this.eventMediator.notify(MEDIATOR_EVENTS.SOCKET_DISCONNECT, null);\n      reconnect();\n    });\n\n    return this.isOpen;\n  }\n\n  private init(): boolean {\n    const clientApi = new ClientApiModel(this.webSocket, this.isOpen);\n    const serverApi = new ServerApiModel(this.webSocket, this.isOpen);\n    clientApi.isWorks();\n    serverApi.isWorks();\n    return this.isOpen;\n  }\n}\n\nexport default SocketModel;\n","import type SessionStorageInterface from '../shared/SessionStorage/types/interfaces.ts';\n\nconst isSessionStorageData = (\n  data: unknown,\n): data is SessionStorageInterface => {\n  if (typeof data === 'object' && data !== null) {\n    return true;\n  }\n  return false;\n};\n\nexport default isSessionStorageData;\n","import isSessionStorageData from '../../../utils/isSessionStorageData.ts';\nimport STORE_KEYS from '../types/enums.ts';\nimport type SessionStorageInterface from '../types/interfaces.ts';\n\nclass SessionStorageModel {\n  private storage: SessionStorageInterface;\n\n  constructor() {\n    this.storage = this.init();\n  }\n\n  public get(key: string): unknown {\n    if (key in this.storage) {\n      const data = this.storage[key];\n      const result: unknown = JSON.parse(data);\n      return result;\n    }\n    return null;\n  }\n\n  public add(key: string, value: string): boolean {\n    this.storage[key] = value;\n    this.save(this.storage);\n    return true;\n  }\n\n  public remove(key: string): boolean {\n    if (key in this.storage) {\n      delete this.storage[key];\n      this.save(this.storage);\n      return true;\n    }\n\n    return false;\n  }\n\n  public clear(): boolean {\n    sessionStorage.clear();\n    this.init();\n    return true;\n  }\n\n  private save(data: Record<string, string>): boolean {\n    sessionStorage.setItem(STORE_KEYS.SS_NAME, JSON.stringify(data));\n    this.storage = this.init();\n    return true;\n  }\n\n  private init(): SessionStorageInterface {\n    const storedData = sessionStorage.getItem(STORE_KEYS.SS_NAME);\n\n    if (storedData) {\n      const parsedData: unknown = JSON.parse(storedData);\n      if (isSessionStorageData(parsedData)) {\n        this.storage = parsedData;\n      }\n    } else {\n      sessionStorage.setItem(STORE_KEYS.SS_NAME, '{}');\n      this.storage = this.init();\n    }\n\n    return this.storage;\n  }\n}\n\nexport default SessionStorageModel;\n","const createSVGUse = (id: string): SVGUseElement => {\n  const use = document.createElementNS('http://www.w3.org/2000/svg', 'use');\n  use.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', `#${id}`);\n  return use;\n};\n\nexport default createSVGUse;\n","export const LINK_ATTRIBUTES = {\n  TARGET_BLANK: '_blank',\n  RS_HREF: 'https://rs.school/',\n  GITHUB_HREF: 'https://github.com/kleostro',\n} as const;\n\nexport const FOOTER_SVG_DETAILS = {\n  SVG_URL: 'http://www.w3.org/2000/svg',\n  RS_ID: 'rsLogo',\n  GITHUB_ID: 'githubLogo',\n} as const;\n\nexport const FOOTER_YEAR = '2024';\n","import createSVGUse from '../../../utils/createSVGUse.ts';\nimport { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport {\n  LINK_ATTRIBUTES,\n  FOOTER_SVG_DETAILS,\n  FOOTER_YEAR,\n} from '../types/enums.ts';\nimport FOOTER_STYLES from './footer.module.scss';\n\nclass FooterView {\n  private appYear: HTMLSpanElement;\n\n  private githubLogo: SVGSVGElement;\n\n  private githubLink: HTMLAnchorElement;\n\n  private rsLogo: SVGSVGElement;\n\n  private rsLink: HTMLAnchorElement;\n\n  private footer: HTMLElement;\n\n  constructor() {\n    this.appYear = this.createAppYear();\n    this.githubLogo = this.createGithubLogo();\n    this.githubLink = this.createGithubLink();\n    this.rsLogo = this.createRSLogo();\n    this.rsLink = this.createRSLink();\n    this.footer = this.createHTML();\n  }\n\n  public getHTML(): HTMLElement {\n    return this.footer;\n  }\n\n  private createAppYear(): HTMLSpanElement {\n    this.appYear = createBaseElement({\n      tag: TAG_NAMES.SPAN,\n      cssClasses: [FOOTER_STYLES.appYear],\n      innerContent: FOOTER_YEAR,\n    });\n\n    return this.appYear;\n  }\n\n  private createGithubLogo(): SVGSVGElement {\n    this.githubLogo = document.createElementNS(\n      FOOTER_SVG_DETAILS.SVG_URL,\n      TAG_NAMES.SVG,\n    );\n\n    this.githubLogo.append(createSVGUse(FOOTER_SVG_DETAILS.GITHUB_ID));\n\n    return this.githubLogo;\n  }\n\n  private createGithubLink(): HTMLAnchorElement {\n    this.githubLink = createBaseElement({\n      tag: TAG_NAMES.A,\n      cssClasses: [FOOTER_STYLES.githubLink],\n      attributes: {\n        href: LINK_ATTRIBUTES.GITHUB_HREF,\n        target: LINK_ATTRIBUTES.TARGET_BLANK,\n      },\n    });\n\n    this.githubLink.append(this.githubLogo);\n\n    return this.githubLink;\n  }\n\n  private createRSLogo(): SVGSVGElement {\n    this.rsLogo = document.createElementNS(\n      FOOTER_SVG_DETAILS.SVG_URL,\n      TAG_NAMES.SVG,\n    );\n\n    this.rsLogo.append(createSVGUse(FOOTER_SVG_DETAILS.RS_ID));\n\n    return this.rsLogo;\n  }\n\n  private createRSLink(): HTMLAnchorElement {\n    this.rsLink = createBaseElement({\n      tag: TAG_NAMES.A,\n      cssClasses: [FOOTER_STYLES.rsLink],\n      attributes: {\n        href: LINK_ATTRIBUTES.RS_HREF,\n        target: LINK_ATTRIBUTES.TARGET_BLANK,\n      },\n    });\n\n    this.rsLink.append(this.rsLogo);\n\n    return this.rsLink;\n  }\n\n  private createHTML(): HTMLElement {\n    this.footer = createBaseElement({\n      tag: TAG_NAMES.FOOTER,\n      cssClasses: [FOOTER_STYLES.footer],\n    });\n\n    this.footer.append(this.rsLink, this.githubLink, this.appYear);\n    return this.footer;\n  }\n}\n\nexport default FooterView;\n","import FooterView from '../view/FooterView.ts';\n\nclass FooterModel {\n  private view: FooterView = new FooterView();\n\n  public getHTML(): HTMLElement {\n    return this.view.getHTML();\n  }\n}\n\nexport default FooterModel;\n","import { TAG_NAMES } from '../../types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport MODAL_STYLES from './modal.module.scss';\n\nclass ModalView {\n  private modalContent: HTMLDivElement;\n\n  private modalOverlay: HTMLDivElement;\n\n  private modal: HTMLDivElement;\n\n  constructor() {\n    this.modalContent = this.createModalContent();\n    this.modalOverlay = this.createModalOverlay();\n    this.modal = this.createHTML();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.modal;\n  }\n\n  public getModalOverlay(): HTMLDivElement {\n    return this.modalOverlay;\n  }\n\n  public getModalContent(): HTMLDivElement {\n    return this.modalContent;\n  }\n\n  private createModalContent(): HTMLDivElement {\n    this.modalContent = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [MODAL_STYLES.modalContent],\n    });\n\n    return this.modalContent;\n  }\n\n  private createModalOverlay(): HTMLDivElement {\n    this.modalOverlay = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [MODAL_STYLES.modalOverlay],\n    });\n\n    return this.modalOverlay;\n  }\n\n  private createHTML(): HTMLDivElement {\n    this.modal = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [MODAL_STYLES.modal, MODAL_STYLES.modal_hidden],\n    });\n\n    this.modalOverlay.append(this.modalContent);\n    this.modal.append(this.modalOverlay);\n\n    return this.modal;\n  }\n}\n\nexport default ModalView;\n","import ModalView from '../view/ModalView.ts';\nimport MODAL_STYLES from '../view/modal.module.scss';\n\nclass ModalModel {\n  private view = new ModalView();\n\n  public getHTML(): HTMLDivElement {\n    return this.view.getHTML();\n  }\n\n  public setModalText(text: string): void {\n    this.view.getModalContent().textContent = text;\n  }\n\n  public show(): void {\n    const modal = this.getHTML();\n    const modalOverlay = this.view.getModalOverlay();\n    const modalContent = this.view.getModalContent();\n    modal.classList.remove(MODAL_STYLES.modal_hidden);\n    modalOverlay.classList.remove(MODAL_STYLES.modalOverlay_hidden);\n    modalContent.classList.remove(MODAL_STYLES.modalContent_hidden);\n    document.body.classList.add('stop-scroll');\n  }\n\n  public hide(): void {\n    const modal = this.getHTML();\n    const modalOverlay = this.view.getModalOverlay();\n    const modalContent = this.view.getModalContent();\n    modal.classList.add(MODAL_STYLES.modal_hidden);\n    modalOverlay.classList.add(MODAL_STYLES.modalOverlay_hidden);\n    modalContent.classList.add(MODAL_STYLES.modalContent_hidden);\n    document.body.classList.remove('stop-scroll');\n  }\n}\n\nexport default ModalModel;\n","const SOCKET_MESSAGE = 'Connecting to the server...';\n\nexport default SOCKET_MESSAGE;\n","import MainPageModel from '../../../pages/MainPage/model/MainPageModel.ts';\nimport AboutPageModel from '../../../pages/AboutPage/model/AboutPageModel.ts';\nimport LoginPageModel from '../../../pages/LoginPage/model/LoginPageModel.ts';\nimport PAGES_IDS from '../../../pages/types/enums.ts';\nimport type PageInterface from '../../../pages/types/interfaces.ts';\nimport RouterModel from '../../Router/model/RouterModel.ts';\nimport AppView from '../view/AppView.ts';\nimport HeaderModel from '../../../widgets/Header/model/HeaderModel.ts';\nimport SocketModel from '../../../shared/Server/Socket/model/SocketModel.ts';\nimport SessionStorageModel from '../../../shared/SessionStorage/model/SessionStorage.ts';\nimport FooterModel from '../../../widgets/Footer/model/FooterModel.ts';\nimport ModalModel from '../../../shared/Modal/model/ModalModel.ts';\nimport EventMediatorModel from '../../../shared/EventMediator/model/EventMediatorModel.ts';\nimport MEDIATOR_EVENTS from '../../../shared/EventMediator/types/enums.ts';\nimport SOCKET_MESSAGE from '../types/enums.ts';\n\nclass AppModel {\n  private appView: AppView = new AppView();\n\n  private storage = new SessionStorageModel();\n\n  private eventMediator = EventMediatorModel.getInstance();\n\n  private serverApi: SocketModel = new SocketModel();\n\n  private router = new RouterModel();\n\n  private modal = new ModalModel();\n\n  constructor() {\n    this.router.setPages(this.initPages());\n    this.subscribeToEvents();\n    this.serverApi.isWorks();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.appView.getHTML();\n  }\n\n  private initPages(): Map<string, PageInterface> {\n    const root = this.getHTML();\n    root.prepend(new HeaderModel(this.router, this.storage).getHTML());\n    const loginPage = new LoginPageModel(root, this.router, this.storage);\n    const pages: Map<string, PageInterface> = new Map(\n      Object.entries({\n        [PAGES_IDS.DEFAULT_PAGE]: loginPage,\n        [PAGES_IDS.LOGIN_PAGE]: loginPage,\n        [PAGES_IDS.MAIN_PAGE]: new MainPageModel(root, this.router),\n        [PAGES_IDS.ABOUT_PAGE]: new AboutPageModel(root, this.router),\n      }),\n    );\n    root.append(new FooterModel().getHTML(), this.modal.getHTML());\n    return pages;\n  }\n\n  private subscribeToEvents(): void {\n    this.eventMediator.subscribe(MEDIATOR_EVENTS.SOCKET_CONNECT, () => {\n      this.modal.hide();\n    });\n\n    this.eventMediator.subscribe(MEDIATOR_EVENTS.SOCKET_DISCONNECT, () => {\n      this.modal.show();\n      this.modal.setModalText(SOCKET_MESSAGE);\n    });\n  }\n}\n\nexport default AppModel;\n","import AppModel from './app/App/model/AppModel.ts';\nimport './index.scss';\n\nconst myApp = new AppModel();\ndocument.body.append(myApp.getHTML());\n"],"names":["index","AboutPageView","backButton","LoginPageView","authenticationWrapper","logoutButton","aboutButton","userLogin","modal","modalOverlay","modalContent","loginPage"],"mappings":"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"}