{"version":3,"file":"main-67355978.js","sources":["../../src/shared/types/enums.ts","../../src/pages/types/enums.ts","../../src/app/Router/model/RouterModel.ts","../../src/utils/createBaseElement.ts","../../src/app/App/view/AppView.ts","../../src/shared/Api/types/enums.ts","../../src/shared/Store/initialData.ts","../../src/shared/Store/reducer/rootReducer.ts","../../src/shared/Store/model/StoreModel.ts","../../src/shared/Button/view/ButtonView.ts","../../src/shared/Button/model/ButtonModel.ts","../../src/pages/GaragePage/view/GaragePageView.ts","../../src/shared/Api/model/ApiModel.ts","../../src/shared/Store/actions/types/enums.ts","../../src/entities/RaceTrack/types/enums.ts","../../src/utils/createCarImg.ts","../../src/entities/RaceTrack/view/RaceTrackView.ts","../../src/shared/Mediator/model/MediatorModel.ts","../../src/shared/Mediator/types/enums.ts","../../src/shared/Loader/view/LoaderView.ts","../../src/shared/Loader/model/LoaderModel.ts","../../src/entities/RaceTrack/model/RaceTrackModel.ts","../../src/shared/Input/view/InputView.ts","../../src/shared/Input/model/InputModel.ts","../../src/shared/Input/types/enums.ts","../../src/shared/Button/types/enums.ts","../../src/widgets/CreateCarForm/view/CreateCarFormView.ts","../../src/utils/formatText.ts","../../src/widgets/CreateCarForm/model/CreateCarFormModel.ts","../../src/features/PreviewCar/view/PreviewCarView.ts","../../src/features/PreviewCar/model/PreviewCarModel.ts","../../src/widgets/ChangeCarForm/view/ChangeCarFormView.ts","../../src/widgets/ChangeCarForm/model/ChangeCarFormModel.ts","../../src/utils/getRandomIndex.ts","../../src/utils/createRandomDataCars.ts","../../src/features/Pagination/view/PaginationView.ts","../../src/shared/Store/types/enums.ts","../../src/features/Pagination/model/PaginationModel.ts","../../src/pages/GaragePage/model/GaragePageModel.ts","../../src/pages/WinnersPage/view/WinnersPageView.ts","../../src/pages/WinnersPage/model/WinnersPageModel.ts","../../src/widgets/Header/types/enums.ts","../../src/widgets/Header/view/HeaderView.ts","../../src/widgets/Header/model/HeaderModel.ts","../../src/app/App/model/AppModel.ts","../../src/index.ts"],"sourcesContent":["export const TAG_NAMES = {\n  MAIN: 'main',\n  HEADER: 'header',\n  FOOTER: 'footer',\n  NAV: 'nav',\n  SECTION: 'section',\n  ARTICLE: 'article',\n  ASIDE: 'aside',\n  BUTTON: 'button',\n  FORM: 'form',\n  INPUT: 'input',\n  LABEL: 'label',\n  SELECT: 'select',\n  TEXTAREA: 'textarea',\n  SPAN: 'span',\n  DIV: 'div',\n  SVG: 'svg',\n  I: 'i',\n  P: 'p',\n  UL: 'ul',\n  OL: 'ol',\n  LI: 'li',\n  H1: 'h1',\n  H2: 'h2',\n  H3: 'h3',\n  H4: 'h4',\n  H5: 'h5',\n  H6: 'h6',\n  IMG: 'img',\n  VIDEO: 'video',\n  AUDIO: 'audio',\n  SOURCE: 'source',\n  TRACK: 'track',\n  CANVAS: 'canvas',\n  MAP: 'map',\n  MARK: 'mark',\n  DETAILS: 'details',\n  SUMMARY: 'summary',\n  PRE: 'pre',\n  BLOCKQUOTE: 'blockquote',\n  ADDRESS: 'address',\n  DIVIDER: 'hr',\n} as const;\n\nexport const EVENT_NAMES = {\n  CLICK: 'click',\n  CHANGE: 'change',\n  INPUT: 'input',\n  SUBMIT: 'submit',\n  KEYUP: 'keyup',\n  KEYDOWN: 'keydown',\n  SCROLL: 'scroll',\n  RESIZE: 'resize',\n  FOCUS: 'focus',\n  BLUR: 'blur',\n  CONTEXTMENU: 'contextmenu',\n  DOM_CONTENT_LOADED: 'DOMContentLoaded',\n  LOAD: 'load',\n  ERROR: 'error',\n  ANIMATIONSTART: 'animationstart',\n  ANIMATIONEND: 'animationend',\n  ANIMATIONITERATION: 'animationiteration',\n  TRANSITIONEND: 'transitionend',\n  POPSTATE: 'popstate',\n  HASHCHANGE: 'hashchange',\n  BEFOREUNLOAD: 'beforeunload',\n} as const;\n\nexport const IS_DISABLED = {\n  DISABLED: true,\n  ENABLED: false,\n} as const;\n","const PAGES_IDS = {\n  DEFAULT_PAGE: '',\n  GARAGE_PAGE: 'garage',\n  WINNERS_PAGE: 'winners',\n} as const;\n\nexport default PAGES_IDS;\n","import { EVENT_NAMES } from '../../../shared/types/enums.ts';\nimport PAGES_IDS from '../../../pages/types/enums.ts';\nimport type PageInterface from '../../../pages/types/interfaces.ts';\n\nexport default class RouterModel {\n  private pages: Map<string, PageInterface>;\n\n  private currentPage: PageInterface | undefined = undefined;\n\n  private pathSegmentsToKeep = 2;\n\n  constructor(pages: Map<string, PageInterface>) {\n    this.pages = pages;\n    document.addEventListener(EVENT_NAMES.DOM_CONTENT_LOADED, () => {\n      const currentPath = window.location.pathname\n        .split('/')\n        .slice(this.pathSegmentsToKeep + 1)\n        .join('/');\n      this.navigateTo(currentPath);\n    });\n\n    window.addEventListener(EVENT_NAMES.POPSTATE, () => {\n      const currentPath = window.location.pathname\n        .split('/')\n        .slice(this.pathSegmentsToKeep + 1)\n        .join('/');\n      this.handleRequest(currentPath);\n    });\n  }\n\n  public navigateTo(route: string): void {\n    this.handleRequest(route);\n\n    const pathnameApp = window.location.pathname\n      .split('/')\n      .slice(1, this.pathSegmentsToKeep + 1)\n      .join('/');\n    const url = `/${pathnameApp}/${route}`;\n    window.history.pushState({}, '', url);\n  }\n\n  private handleRequest(path: string): void {\n    const pathParts = path.split('/');\n    const hasRoute = this.pages.has(pathParts[0]);\n    if (!hasRoute) {\n      window.location.pathname = PAGES_IDS.DEFAULT_PAGE;\n      return;\n    }\n\n    this.currentPage?.hide();\n    this.currentPage = this.pages.get(path);\n    this.currentPage?.show();\n  }\n}\n","interface CreateBaseElement<T> {\n  tag: T;\n  cssClasses?: string[];\n  attributes?: Record<string, string>;\n  innerContent?: string;\n}\n\nconst createBaseElement = <T extends keyof HTMLElementTagNameMap>({\n  tag,\n  cssClasses = [],\n  attributes = {},\n  innerContent = '',\n}: CreateBaseElement<T>): HTMLElementTagNameMap[T] => {\n  const elem = document.createElement(tag);\n\n  elem.classList.add(...cssClasses);\n\n  Object.entries(attributes).forEach(([attrName, attrValue]) => {\n    elem.setAttribute(attrName, attrValue);\n  });\n\n  elem.innerHTML = innerContent;\n\n  return elem;\n};\n\nexport default createBaseElement;\n","import { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport APP_STYLES from './app.module.scss';\n\nclass AppView {\n  private pagesContainer: HTMLDivElement;\n\n  constructor() {\n    this.pagesContainer = this.createHTML();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.pagesContainer;\n  }\n\n  private createHTML(): HTMLDivElement {\n    this.pagesContainer = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [APP_STYLES['site-wrapper']],\n    });\n\n    return this.pagesContainer;\n  }\n}\n\nexport default AppView;\n","export const API_METHODS = {\n  GET: 'GET',\n  POST: 'POST',\n  PUT: 'PUT',\n  PATCH: 'PATCH',\n  DELETE: 'DELETE',\n} as const;\n\nexport const QUERY_PARAMS = {\n  PAGE: '_page',\n  LIMIT: '_limit',\n  SORT: '_sort',\n  ORDER: '_order',\n  ID: 'id',\n  STATUS: 'status',\n} as const;\n\nexport const QUERY_VALUES = {\n  ASC: 'asc',\n  DESC: 'desc',\n  WINS: 'wins',\n  TIME: 'time',\n  ID: 'id',\n  DEFAULT_PAGE: 1,\n  DEFAULT_CARS_LIMIT: 7,\n  DEFAULT_WINNERS_LIMIT: 10,\n  NO_CARS_LIMIT: 0,\n  NO_WINNERS_LIMIT: 0,\n  STARTED: 'started',\n  STOPPED: 'stopped',\n  DRIVE: 'drive',\n} as const;\n\nexport const API_HEADERS = {\n  CONTENT_TYPE: 'Content-Type',\n  APPLICATION_JSON: 'application/json',\n} as const;\n\nexport const API_URLS = {\n  CARS: 'http://127.0.0.1:3000/garage/',\n  WINNERS: 'http://127.0.0.1:3000/winners/',\n  ENGINE: 'http://127.0.0.1:3000/engine/',\n} as const;\n\nexport const STATUS_CODES = {\n  OK: 200,\n  CREATED: 201,\n  NO_CONTENT: 204,\n  BAD_REQUEST: 400,\n  UNAUTHORIZED: 401,\n  FORBIDDEN: 403,\n  NOT_FOUND: 404,\n  INTERNAL_SERVER_ERROR: 500,\n  BAD_GATEWAY: 502,\n  SERVICE_UNAVAILABLE: 503,\n} as const;\n\nexport const API_ERRORS = {\n  INCORRECT_PARAMS: 'Incorrect params',\n};\n","import type { State } from './reducer/types/interfaces.ts';\n\nconst INITIAL_DATA: State = {\n  cars: [],\n  winners: [],\n  garagePage: 1,\n  totalPages: 1,\n} as const;\n\nexport default INITIAL_DATA;\n","/* eslint-disable max-lines-per-function */\nimport type Reducer from '../types/types.ts';\nimport type { State } from './types/interfaces.ts';\nimport type { Action } from './types/types.ts';\n\nexport const rootReducer: Reducer<State, Action> = (\n  state: State,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'getCars':\n      return {\n        ...state,\n        cars: [...action.payload],\n      };\n    case 'getWinners':\n      return {\n        ...state,\n        winners: [...state.winners, ...action.payload],\n      };\n    case 'addNewCar':\n      return {\n        ...state,\n        cars: [...state.cars, ...action.payload],\n      };\n    case 'deleteCar':\n      return {\n        ...state,\n        cars: [...action.payload],\n      };\n    case 'setTotalGaragePages':\n      return {\n        ...state,\n        totalPages: action.payload,\n      };\n    case 'changeGaragePage':\n      return {\n        ...state,\n        garagePage: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;\n","import type Reducer from '../types/types.ts';\nimport INITIAL_DATA from '../initialData.ts';\nimport type { State } from '../reducer/types/interfaces.ts';\nimport type { Action } from '../reducer/types/types.ts';\nimport { rootReducer } from '../reducer/rootReducer.ts';\n\nclass StoreModel {\n  private static listeners: Map<string, VoidFunction> = new Map();\n\n  private static rootReducer: Reducer<State, Action> = rootReducer;\n\n  private static state: State = INITIAL_DATA;\n\n  public static dispatch(action: Action): Action {\n    StoreModel.state = StoreModel.rootReducer(StoreModel.state, action);\n\n    StoreModel.listeners.forEach((_, key) => {\n      if (key in StoreModel.state) {\n        const currentListener = StoreModel.listeners.get(key);\n        if (currentListener) {\n          currentListener();\n        }\n      }\n    });\n\n    return action;\n  }\n\n  public static getState(): State {\n    return structuredClone(StoreModel.state);\n  }\n\n  public static subscribe(key: string, listener: VoidFunction): VoidFunction {\n    StoreModel.listeners.set(key, listener);\n\n    return () => {\n      StoreModel.listeners.delete(key);\n    };\n  }\n}\n\nexport default StoreModel;\n","import { TAG_NAMES } from '../../types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport type ButtonInterface from '../types/interfaces.ts';\n\nclass ButtonView {\n  private button: HTMLButtonElement;\n\n  constructor(params: ButtonInterface) {\n    this.button = this.createHTML(params);\n  }\n\n  public getHTML(): HTMLButtonElement {\n    return this.button;\n  }\n\n  private createHTML(params: ButtonInterface): HTMLButtonElement {\n    this.button = createBaseElement({\n      tag: TAG_NAMES.BUTTON,\n      cssClasses: params.classes,\n      attributes: params.attrs,\n      innerContent: params.text,\n    });\n\n    if (params.action) {\n      this.button.addEventListener(params.action.key, params.action.value);\n    }\n\n    return this.button;\n  }\n}\n\nexport default ButtonView;\n","import { IS_DISABLED } from '../../types/enums.ts';\nimport type ButtonInterface from '../types/interfaces.ts';\nimport ButtonView from '../view/ButtonView.ts';\n\nclass ButtonModel {\n  private view: ButtonView;\n\n  private button: HTMLButtonElement;\n\n  constructor(params: ButtonInterface) {\n    this.view = new ButtonView(params);\n    this.button = this.view.getHTML();\n  }\n\n  public getHTML(): HTMLButtonElement {\n    return this.button;\n  }\n\n  public setDisabled(): void {\n    this.button.disabled = IS_DISABLED.DISABLED;\n  }\n\n  public setEnabled(): void {\n    this.button.disabled = IS_DISABLED.ENABLED;\n  }\n}\n\nexport default ButtonModel;\n","import ButtonModel from '../../../shared/Button/model/ButtonModel.ts';\nimport { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport GARAGE_PAGE_STYLES from './garagePage.module.scss';\n\nclass GaragePageView {\n  private parent: HTMLDivElement;\n\n  private raceTrackTopWrapper: HTMLDivElement;\n\n  private raceTrackBottomWrapper: HTMLDivElement;\n\n  private garageTitle: HTMLHeadingElement;\n\n  private moreCarsButton: ButtonModel;\n\n  private raceTracksList: HTMLUListElement;\n\n  private page: HTMLDivElement;\n\n  constructor(parent: HTMLDivElement) {\n    this.parent = parent;\n    this.moreCarsButton = this.createMoreCarsButton();\n    this.raceTrackTopWrapper = this.createRaceTrackTopWrapper();\n    this.garageTitle = this.createGarageTitle();\n    this.raceTracksList = this.createRaceTracksList();\n    this.raceTrackBottomWrapper = this.createRaceTrackBottomWrapper();\n    this.page = this.createHTML();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.page;\n  }\n\n  public getRaceTrackTopWrapper(): HTMLDivElement {\n    return this.raceTrackTopWrapper;\n  }\n\n  public getRaceTrackBottomWrapper(): HTMLDivElement {\n    return this.raceTrackBottomWrapper;\n  }\n\n  public clearRaceTracksList(): void {\n    this.raceTracksList.innerHTML = '';\n  }\n\n  public getGarageTitle(): HTMLHeadingElement {\n    return this.garageTitle;\n  }\n\n  public getRaceTracksList(): HTMLUListElement {\n    return this.raceTracksList;\n  }\n\n  public getMoreCarsButton(): ButtonModel {\n    return this.moreCarsButton;\n  }\n\n  private createGarageTitle(): HTMLHeadingElement {\n    this.garageTitle = createBaseElement({\n      tag: TAG_NAMES.H2,\n      cssClasses: [GARAGE_PAGE_STYLES['garage-page_title']],\n    });\n    return this.garageTitle;\n  }\n\n  private createRaceTracksList(): HTMLUListElement {\n    this.raceTracksList = createBaseElement({\n      tag: TAG_NAMES.UL,\n      cssClasses: [GARAGE_PAGE_STYLES['garage-page_list']],\n    });\n\n    return this.raceTracksList;\n  }\n\n  private createMoreCarsButton(): ButtonModel {\n    const buttonText = 'Create 100 cars';\n    this.moreCarsButton = new ButtonModel({\n      text: buttonText,\n      classes: [GARAGE_PAGE_STYLES['garage-page_more-button']],\n    });\n\n    return this.moreCarsButton;\n  }\n\n  private createRaceTrackTopWrapper(): HTMLDivElement {\n    this.raceTrackTopWrapper = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [GARAGE_PAGE_STYLES['garage-page_top-wrapper']],\n    });\n\n    this.raceTrackTopWrapper.append(this.moreCarsButton.getHTML());\n    return this.raceTrackTopWrapper;\n  }\n\n  private createRaceTrackBottomWrapper(): HTMLDivElement {\n    this.raceTrackBottomWrapper = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [GARAGE_PAGE_STYLES['garage-page_bottom-wrapper']],\n    });\n    return this.raceTrackBottomWrapper;\n  }\n\n  private createHTML(): HTMLDivElement {\n    this.page = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [GARAGE_PAGE_STYLES['garage-page']],\n    });\n\n    this.raceTrackBottomWrapper = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [GARAGE_PAGE_STYLES['garage-page_bottom-wrapper']],\n    });\n\n    this.raceTrackBottomWrapper.append(this.garageTitle, this.raceTracksList);\n    this.page.append(this.raceTrackTopWrapper, this.raceTrackBottomWrapper);\n    this.parent.append(this.page);\n    return this.page;\n  }\n}\nexport default GaragePageView;\n","import {\n  API_ERRORS,\n  API_METHODS,\n  API_HEADERS,\n  API_URLS,\n  QUERY_PARAMS,\n  QUERY_VALUES,\n  STATUS_CODES,\n} from '../types/enums.ts';\nimport type {\n  CarInterface,\n  EngineCarDataInterface,\n  EngineCarDriveInterface,\n  WinnerInterface,\n  WinnersQueryParamsInterface,\n} from '../types/interfaces.ts';\n\nclass ApiModel {\n  public static async getCars(\n    params: Map<string, number>,\n  ): Promise<CarInterface[] | undefined> {\n    const pageParam = params.get(QUERY_PARAMS.PAGE);\n    const limitParam = params.get(QUERY_PARAMS.LIMIT);\n\n    let url = `${API_URLS.CARS}`;\n    if (pageParam && limitParam) {\n      url = `${API_URLS.CARS}?${QUERY_PARAMS.PAGE}=${pageParam}&${QUERY_PARAMS.LIMIT}=${limitParam}`;\n    }\n    return this.fetchData<CarInterface[]>(url, API_METHODS.GET);\n  }\n\n  public static async getCarById(\n    id: number,\n  ): Promise<CarInterface | undefined> {\n    const url = `${API_URLS.CARS}${id}`;\n    return this.fetchData<CarInterface>(url, API_METHODS.GET);\n  }\n\n  public static async getWinners(\n    params: Map<string, WinnersQueryParamsInterface>,\n  ): Promise<WinnerInterface[] | undefined> {\n    const pageParam = Number(\n      params.get(QUERY_PARAMS.PAGE) ?? QUERY_VALUES.DEFAULT_PAGE,\n    );\n    const limitParam = Number(\n      params.get(QUERY_PARAMS.LIMIT) ?? QUERY_VALUES.NO_WINNERS_LIMIT,\n    );\n    const sortParam = String(params.get(QUERY_PARAMS.SORT) ?? QUERY_VALUES.ID);\n    const orderParam = String(\n      params.get(QUERY_PARAMS.ORDER) ?? QUERY_VALUES.ASC,\n    );\n\n    const url = `${API_URLS.WINNERS}?${QUERY_PARAMS.PAGE}=${pageParam}&${QUERY_PARAMS.LIMIT}=${limitParam}&${QUERY_PARAMS.SORT}=${sortParam}&${QUERY_PARAMS.ORDER}=${orderParam}`;\n    return this.fetchData<WinnerInterface[]>(url, API_METHODS.GET);\n  }\n\n  public static async getWinnerById(\n    id: number,\n  ): Promise<WinnerInterface | undefined> {\n    const url = `${API_URLS.WINNERS}${id}`;\n    return this.fetchData<WinnerInterface>(url, API_METHODS.GET);\n  }\n\n  public static async createCar(\n    car: CarInterface,\n  ): Promise<CarInterface | undefined> {\n    const url = API_URLS.CARS;\n    return this.fetchData<CarInterface>(url, API_METHODS.POST, car);\n  }\n\n  public static async createWinner(\n    winner: WinnerInterface,\n  ): Promise<WinnerInterface | undefined> {\n    const url = API_URLS.WINNERS;\n    return this.fetchData<WinnerInterface>(url, API_METHODS.POST, winner);\n  }\n\n  public static async deleteCarById(\n    id: number,\n  ): Promise<CarInterface | undefined> {\n    const url = `${API_URLS.CARS}${id}`;\n    return this.fetchData<CarInterface>(url, API_METHODS.DELETE);\n  }\n\n  public static async deleteWinnerById(\n    id: number,\n  ): Promise<WinnerInterface | undefined> {\n    const url = `${API_URLS.WINNERS}${id}`;\n    return this.fetchData<WinnerInterface>(url, API_METHODS.DELETE);\n  }\n\n  public static async updateCarById(\n    id: number,\n    car: CarInterface,\n  ): Promise<CarInterface | undefined> {\n    const url = `${API_URLS.CARS}${id}`;\n    return this.fetchData<CarInterface>(url, API_METHODS.PUT, car);\n  }\n\n  public static async updateWinnerById(\n    id: number,\n    winner: WinnerInterface,\n  ): Promise<WinnerInterface | undefined> {\n    const url = `${API_URLS.WINNERS}${id}`;\n    return this.fetchData<WinnerInterface>(url, API_METHODS.PUT, winner);\n  }\n\n  public static async startCarEngine(\n    params: Map<string, string | number>,\n  ): Promise<EngineCarDataInterface | undefined> {\n    const idParam = Number(params.get(QUERY_PARAMS.ID));\n    const statusParam = String(params.get(QUERY_PARAMS.STATUS));\n    if (!idParam || !statusParam) {\n      throw new Error(API_ERRORS.INCORRECT_PARAMS);\n    }\n    const url = `${API_URLS.ENGINE}?${QUERY_PARAMS.ID}=${idParam}&${QUERY_PARAMS.STATUS}=${statusParam}`;\n    return this.fetchData<EngineCarDataInterface>(url, API_METHODS.PATCH);\n  }\n\n  public static async stopCarEngine(\n    params: Map<string, string | number>,\n  ): Promise<EngineCarDataInterface | undefined> {\n    const idParam = Number(params.get(QUERY_PARAMS.ID));\n    const statusParam = String(params.get(QUERY_PARAMS.STATUS));\n    if (!idParam || !statusParam) {\n      throw new Error(API_ERRORS.INCORRECT_PARAMS);\n    }\n    const url = `${API_URLS.ENGINE}?${QUERY_PARAMS.ID}=${idParam}&${QUERY_PARAMS.STATUS}=${statusParam}`;\n    return this.fetchData<EngineCarDataInterface>(url, API_METHODS.PATCH);\n  }\n\n  public static async driveCarEngine(\n    params: Map<string, string | number>,\n  ): Promise<EngineCarDriveInterface | undefined> {\n    const idParam = Number(params.get(QUERY_PARAMS.ID));\n    const statusParam = String(params.get(QUERY_PARAMS.STATUS));\n    if (!idParam || !statusParam) {\n      throw new Error(API_ERRORS.INCORRECT_PARAMS);\n    }\n    const url = `${API_URLS.ENGINE}?${QUERY_PARAMS.ID}=${idParam}&${QUERY_PARAMS.STATUS}=${statusParam}`;\n    return this.fetchData<EngineCarDriveInterface>(url, API_METHODS.PATCH);\n  }\n\n  private static async fetchData<T>(\n    url: string,\n    method: string,\n    body?: T | null,\n  ): Promise<T | undefined> {\n    return fetch(url, {\n      method,\n      headers: {\n        [API_HEADERS.CONTENT_TYPE]: API_HEADERS.APPLICATION_JSON,\n      },\n      body: body ? JSON.stringify(body) : null,\n    })\n      .then((response) => response.json())\n      .then((json: T) => json)\n      .catch(() => {\n        throw new Error(`${STATUS_CODES.INTERNAL_SERVER_ERROR}`);\n      });\n  }\n}\n\nexport default ApiModel;\n","const ACTIONS = {\n  GET_CARS: 'getCars',\n  GET_WINNERS: 'getWinners',\n  ADD_NEW_CAR: 'addNewCar',\n  DELETE_CAR: 'deleteCar',\n  CHANGE_GARAGE_PAGE: 'changeGaragePage',\n  SET_TOTAL_GARAGE_PAGES: 'setTotalGaragePages',\n} as const;\n\nexport default ACTIONS;\n","const RACE_TRACK_BUTTON_TEXT = {\n  SELECT_CAR: 'Select',\n  REMOVE_CAR: 'Remove',\n  START_ENGINE: 'A',\n  STOP_ENGINE: 'B',\n} as const;\n\nexport default RACE_TRACK_BUTTON_TEXT;\n","export const createSVGUse = (id: string): SVGUseElement => {\n  const use = document.createElementNS('http://www.w3.org/2000/svg', 'use');\n  use.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', `#${id}`);\n  return use;\n};\n\nexport const changeSVGFill = (svg: SVGSVGElement, color: string): void => {\n  svg.setAttribute('fill', color);\n};\n","import ButtonModel from '../../../shared/Button/model/ButtonModel.ts';\nimport type { CarInterface } from '../../../shared/Api/types/interfaces.ts';\nimport { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport RACE_TRACK_STYLES from './raceTrack.module.scss';\nimport RACE_TRACK_BUTTON_TEXT from '../types/enums.ts';\nimport { changeSVGFill, createSVGUse } from '../../../utils/createCarImg.ts';\n\nclass RaceTrackView {\n  private carData: CarInterface;\n\n  private selectCarButton: ButtonModel;\n\n  private removeCarButton: ButtonModel;\n\n  private nameCarSpan: HTMLSpanElement;\n\n  private startEngineButton: ButtonModel;\n\n  private stopEngineButton: ButtonModel;\n\n  private carSVG: SVGSVGElement;\n\n  private carSVGWrapper: HTMLDivElement;\n\n  private raceTrack: HTMLLIElement;\n\n  constructor(carData: CarInterface) {\n    this.carData = carData;\n    this.selectCarButton = this.createSelectCarButton();\n    this.removeCarButton = this.createRemoveCarButton();\n    this.nameCarSpan = this.createNameCarSpan();\n    this.startEngineButton = this.createStartEngineButton();\n    this.stopEngineButton = this.createStopEngineButton();\n    this.carSVG = this.createCarSVG();\n    this.carSVGWrapper = this.createCarSVGWrapper();\n    this.raceTrack = this.createHTML();\n  }\n\n  public getHTML(): HTMLLIElement {\n    return this.raceTrack;\n  }\n\n  public getSelectCarButton(): ButtonModel {\n    return this.selectCarButton;\n  }\n\n  public getRemoveCarButton(): ButtonModel {\n    return this.removeCarButton;\n  }\n\n  public getStartEngineButton(): ButtonModel {\n    return this.startEngineButton;\n  }\n\n  public getStopEngineButton(): ButtonModel {\n    return this.stopEngineButton;\n  }\n\n  public getNameCarSpan(): HTMLSpanElement {\n    return this.nameCarSpan;\n  }\n\n  public getCarSvgWrapper(): HTMLDivElement {\n    return this.carSVGWrapper;\n  }\n\n  public getCarSvg(): SVGSVGElement {\n    return this.carSVG;\n  }\n\n  private createSelectCarButton(): ButtonModel {\n    this.selectCarButton = new ButtonModel({\n      text: RACE_TRACK_BUTTON_TEXT.SELECT_CAR,\n      classes: [RACE_TRACK_STYLES['race-track_car-button']],\n    });\n\n    return this.selectCarButton;\n  }\n\n  private createRemoveCarButton(): ButtonModel {\n    this.removeCarButton = new ButtonModel({\n      text: RACE_TRACK_BUTTON_TEXT.REMOVE_CAR,\n      classes: [RACE_TRACK_STYLES['race-track_car-button']],\n    });\n\n    return this.removeCarButton;\n  }\n\n  private createNameCarSpan(): HTMLSpanElement {\n    this.nameCarSpan = createBaseElement({\n      tag: TAG_NAMES.SPAN,\n      cssClasses: [RACE_TRACK_STYLES['race-track__name-car']],\n      innerContent: this.carData.name,\n    });\n\n    return this.nameCarSpan;\n  }\n\n  private createStartEngineButton(): ButtonModel {\n    this.startEngineButton = new ButtonModel({\n      text: RACE_TRACK_BUTTON_TEXT.START_ENGINE,\n      classes: [RACE_TRACK_STYLES['race-track_engine-button']],\n    });\n\n    return this.startEngineButton;\n  }\n\n  private createStopEngineButton(): ButtonModel {\n    this.stopEngineButton = new ButtonModel({\n      text: RACE_TRACK_BUTTON_TEXT.STOP_ENGINE,\n      classes: [RACE_TRACK_STYLES['race-track_engine-button']],\n    });\n    this.stopEngineButton.setDisabled();\n\n    return this.stopEngineButton;\n  }\n\n  private createCarSVG(): SVGSVGElement {\n    const svgURL = 'http://www.w3.org/2000/svg';\n    const carID = 'car';\n    this.carSVG = document.createElementNS(svgURL, TAG_NAMES.SVG);\n    this.carSVG.classList.add(RACE_TRACK_STYLES['race-track__car-img']);\n    this.carSVG.appendChild(createSVGUse(carID));\n    changeSVGFill(this.carSVG, this.carData.color);\n    return this.carSVG;\n  }\n\n  private createCarSVGWrapper(): HTMLDivElement {\n    this.carSVGWrapper = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [RACE_TRACK_STYLES['race-track__car-svg-wrapper']],\n    });\n\n    this.carSVGWrapper.append(this.carSVG);\n    return this.carSVGWrapper;\n  }\n\n  private createHTML(): HTMLLIElement {\n    this.raceTrack = createBaseElement({\n      tag: TAG_NAMES.LI,\n      cssClasses: [RACE_TRACK_STYLES['race-track']],\n    });\n\n    const topRaceTrackWrapper = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [RACE_TRACK_STYLES['race-track__top-wrapper']],\n    });\n\n    topRaceTrackWrapper.append(\n      this.selectCarButton.getHTML(),\n      this.removeCarButton.getHTML(),\n      this.nameCarSpan,\n    );\n\n    const bottomRaceTrackWrapper = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [RACE_TRACK_STYLES['race-track__bottom-wrapper']],\n    });\n\n    const svgURL = 'http://www.w3.org/2000/svg';\n    const flagID = 'race-flag';\n    const raceFlag = document.createElementNS(svgURL, TAG_NAMES.SVG);\n    raceFlag.classList.add(RACE_TRACK_STYLES['race-track__flag-img']);\n    raceFlag.appendChild(createSVGUse(flagID));\n\n    bottomRaceTrackWrapper.append(\n      this.startEngineButton.getHTML(),\n      this.stopEngineButton.getHTML(),\n      this.carSVGWrapper,\n      raceFlag,\n    );\n\n    this.raceTrack.append(topRaceTrackWrapper, bottomRaceTrackWrapper);\n\n    return this.raceTrack;\n  }\n}\n\nexport default RaceTrackView;\n","import type ListenerCallback from '../types/types.ts';\n\nclass MediatorModel<T> {\n  private static mediator = new MediatorModel();\n\n  private listeners: Map<string, Array<ListenerCallback<T>>>;\n\n  constructor() {\n    this.listeners = new Map();\n  }\n\n  public static getInstance(): MediatorModel<unknown> {\n    return MediatorModel.mediator;\n  }\n\n  public subscribe(eventName: string, listener: ListenerCallback<T>): void {\n    if (this.listeners.has(eventName)) {\n      const listeners = this.listeners.get(eventName);\n      listeners?.push(listener);\n    } else {\n      const newListeners = [];\n      newListeners.push(listener);\n      this.listeners.set(eventName, newListeners);\n    }\n  }\n\n  public notify(eventName: string, params: T): void {\n    const eventListeners = this.listeners.get(eventName);\n    if (eventListeners) {\n      eventListeners.forEach((listener) => listener(params));\n    }\n  }\n\n  public unsubscribe(eventName: string, listener: ListenerCallback<T>): void {\n    if (this.listeners.has(eventName)) {\n      const listeners = this.listeners.get(eventName);\n      const index = listeners?.indexOf(listener);\n\n      if (index && index !== -1) {\n        listeners?.splice(index, 1);\n      }\n    }\n  }\n}\n\nexport default MediatorModel;\n","const MEDIATOR_EVENTS = {\n  GET_CURRENT_CARS: 'getCurrentCars',\n  GET_CURRENT_WINNERS: 'getCurrentWinners',\n  DELETE_CAR: 'deleteCar',\n  DELETE_WINNER: 'deleteWinner',\n  CREATE_CAR: 'createCar',\n  CREATE_WINNER: 'createWinner',\n  CREATE_MORE_CARS: 'createMoreCars',\n  SELECT_CAR: 'selectCar',\n  UPDATE_CAR: 'updateCar',\n  CHANGE_COLOR_PREVIEW_CAR: 'changeColorPreviewCar',\n  CHANGE_NAME_PREVIEW_CAR: 'changeNamePreviewCar',\n  CHANGE_GARAGE_PAGE: 'changeGaragePage',\n  CHANGE_TOTAL_GARAGE_PAGES: 'changeTotalGaragePages',\n  CHANGE_WINNER_PAGE: 'changeWinnerPage',\n} as const;\n\nexport default MEDIATOR_EVENTS;\n","import { TAG_NAMES } from '../../types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport LOADER_STYLES from './loaderView.module.scss';\n\nclass LoaderView {\n  private loader: HTMLDivElement;\n\n  constructor() {\n    this.loader = this.createHTML();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.loader;\n  }\n\n  private createHTML(): HTMLDivElement {\n    this.loader = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [LOADER_STYLES.loader],\n    });\n\n    return this.loader;\n  }\n}\n\nexport default LoaderView;\n","import LoaderView from '../view/LoaderView.ts';\n\nclass LoaderModel {\n  private loaderView: LoaderView;\n\n  private loader: HTMLDivElement;\n\n  constructor() {\n    this.loaderView = new LoaderView();\n    this.loader = this.loaderView.getHTML();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.loader;\n  }\n}\n\nexport default LoaderModel;\n","import { EVENT_NAMES } from '../../../shared/types/enums.ts';\nimport type { CarInterface } from '../../../shared/Api/types/interfaces.ts';\nimport RaceTrackView from '../view/RaceTrackView.ts';\nimport ApiModel from '../../../shared/Api/model/ApiModel.ts';\nimport StoreModel from '../../../shared/Store/model/StoreModel.ts';\nimport ACTIONS from '../../../shared/Store/actions/types/enums.ts';\nimport MediatorModel from '../../../shared/Mediator/model/MediatorModel.ts';\nimport MEDIATOR_EVENTS from '../../../shared/Mediator/types/enums.ts';\nimport { changeSVGFill } from '../../../utils/createCarImg.ts';\nimport {\n  QUERY_PARAMS,\n  QUERY_VALUES,\n  STATUS_CODES,\n} from '../../../shared/Api/types/enums.ts';\nimport LoaderModel from '../../../shared/Loader/model/LoaderModel.ts';\n\nclass RaceTrackModel {\n  private carData: CarInterface;\n\n  private carAnimation: Animation | null;\n\n  private singletonMediator: MediatorModel<unknown>;\n\n  private raceTrackView: RaceTrackView;\n\n  private raceTrack: HTMLLIElement;\n\n  constructor(carData: CarInterface) {\n    this.carData = carData;\n    this.carAnimation = null;\n    this.singletonMediator = MediatorModel.getInstance();\n    this.raceTrackView = new RaceTrackView(this.carData);\n    this.raceTrack = this.raceTrackView.getHTML();\n    this.setHandlerToButtons();\n  }\n\n  public getHTML(): HTMLLIElement {\n    return this.raceTrack;\n  }\n\n  public getView(): RaceTrackView {\n    return this.raceTrackView;\n  }\n\n  private createCarAnimation(duration: number): Animation {\n    const raceTrackWidth = this.raceTrack.clientWidth;\n    const carWidth = this.raceTrackView.getCarSvg().clientWidth;\n    const startEngineButtonWidth = this.raceTrackView\n      .getStartEngineButton()\n      .getHTML().clientWidth;\n    const stopEngineButtonWidth = this.raceTrackView\n      .getStopEngineButton()\n      .getHTML().clientWidth;\n    const carXPosition =\n      raceTrackWidth -\n      carWidth -\n      startEngineButtonWidth -\n      stopEngineButtonWidth;\n    const startTransition = 'translateX(0)';\n    const endTransition = `translateX(${carXPosition}px)`;\n    const fill = 'forwards';\n    return this.raceTrackView\n      .getCarSvgWrapper()\n      .animate([{ transform: startTransition }, { transform: endTransition }], {\n        duration,\n        fill,\n      });\n  }\n\n  private driveCarEngine(): void {\n    if (!this.carData.id) {\n      return;\n    }\n\n    const driveQueryParams: Map<string, string | number> = new Map();\n    driveQueryParams.set(QUERY_PARAMS.ID, this.carData.id);\n    driveQueryParams.set(QUERY_PARAMS.STATUS, QUERY_VALUES.DRIVE);\n    ApiModel.driveCarEngine(driveQueryParams)\n      .then(() => {})\n      .catch((error: Error) => {\n        if (Number(error.message) === STATUS_CODES.INTERNAL_SERVER_ERROR) {\n          this.carAnimation?.pause();\n        }\n      });\n  }\n\n  private startEngineHandler(): void {\n    if (!this.carData.id) {\n      return;\n    }\n    this.raceTrackView.getStartEngineButton().setDisabled();\n    this.raceTrackView.getStopEngineButton().setEnabled();\n    const queryParams: Map<string, string | number> = new Map();\n    queryParams.set(QUERY_PARAMS.ID, this.carData.id);\n    queryParams.set(QUERY_PARAMS.STATUS, QUERY_VALUES.STARTED);\n    const loader = new LoaderModel();\n    this.raceTrackView\n      .getStartEngineButton()\n      .getHTML()\n      .append(loader.getHTML());\n    ApiModel.startCarEngine(queryParams)\n      .then((data) => {\n        if (data) {\n          loader.getHTML().remove();\n          const duration = data.distance / data.velocity;\n          this.carAnimation = this.createCarAnimation(duration);\n          this.driveCarEngine();\n        }\n      })\n      .catch(() => {});\n  }\n\n  private stopEngineHandler(): void {\n    this.raceTrackView.getStartEngineButton().setEnabled();\n    this.raceTrackView.getStopEngineButton().setDisabled();\n    this.carAnimation?.pause();\n    if (!this.carData.id) {\n      return;\n    }\n    const queryParams: Map<string, string | number> = new Map();\n    queryParams.set(QUERY_PARAMS.ID, this.carData.id);\n    queryParams.set(QUERY_PARAMS.STATUS, QUERY_VALUES.STOPPED);\n    const loader = new LoaderModel();\n    this.raceTrackView.getStopEngineButton().getHTML().append(loader.getHTML());\n    ApiModel.stopCarEngine(queryParams)\n      .then(() => {\n        loader.getHTML().remove();\n        this.carAnimation?.cancel();\n      })\n      .catch(() => {});\n  }\n\n  private deleteCarHandler(): void {\n    if (this.carData.id) {\n      const loader = new LoaderModel();\n      this.raceTrackView\n        .getRemoveCarButton()\n        .getHTML()\n        .append(loader.getHTML());\n      ApiModel.deleteCarById(this.carData.id)\n        .then(() => {\n          loader.getHTML().remove();\n          const { cars } = StoreModel.getState();\n          const carsWithoutDeleted = cars.filter(\n            (car) => car.id !== this.carData.id,\n          );\n\n          StoreModel.dispatch({\n            type: ACTIONS.DELETE_CAR,\n            payload: carsWithoutDeleted,\n          });\n          this.raceTrack.remove();\n\n          this.singletonMediator.notify(MEDIATOR_EVENTS.DELETE_CAR, '');\n        })\n        .catch(() => {});\n    }\n  }\n\n  private updateCarView(): void {\n    if (!this.carData.id) {\n      return;\n    }\n    const carNameSpan = this.raceTrackView.getNameCarSpan();\n    const carSVG = this.raceTrackView.getCarSvg();\n    const carState = StoreModel.getState().cars.find(\n      (car) => car.id === this.carData.id,\n    );\n    carNameSpan.textContent = carState?.name || this.carData.name;\n    changeSVGFill(carSVG, carState?.color || this.carData.color);\n  }\n\n  private setHandlerToButtons(): void {\n    const removeCarButton = this.raceTrackView.getRemoveCarButton();\n    const selectCarButton = this.raceTrackView.getSelectCarButton().getHTML();\n    const startEngineButton = this.raceTrackView\n      .getStartEngineButton()\n      .getHTML();\n    const stopEngineButton = this.raceTrackView.getStopEngineButton().getHTML();\n    removeCarButton\n      .getHTML()\n      .addEventListener(EVENT_NAMES.CLICK, this.deleteCarHandler.bind(this));\n\n    selectCarButton.addEventListener(EVENT_NAMES.CLICK, () => {\n      removeCarButton.setDisabled();\n      this.singletonMediator.notify(\n        MEDIATOR_EVENTS.SELECT_CAR,\n        this.carData.id,\n      );\n    });\n\n    startEngineButton.addEventListener(\n      EVENT_NAMES.CLICK,\n      this.startEngineHandler.bind(this),\n    );\n\n    stopEngineButton.addEventListener(\n      EVENT_NAMES.CLICK,\n      this.stopEngineHandler.bind(this),\n    );\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.UPDATE_CAR, (params) => {\n      if (this.carData.id === params) {\n        this.updateCarView();\n        removeCarButton.setEnabled();\n      }\n    });\n  }\n}\n\nexport default RaceTrackModel;\n","import { TAG_NAMES } from '../../types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\n\nclass InputView {\n  private input: HTMLInputElement;\n\n  constructor(attrs: Record<string, string>) {\n    this.input = this.createHTML(attrs);\n  }\n\n  public getHTML(): HTMLInputElement {\n    return this.input;\n  }\n\n  private createHTML(attrs: Record<string, string>): HTMLInputElement {\n    this.input = createBaseElement({\n      tag: TAG_NAMES.INPUT,\n      attributes: attrs,\n    });\n\n    return this.input;\n  }\n}\n\nexport default InputView;\n","import { IS_DISABLED } from '../../types/enums.ts';\nimport InputView from '../view/InputView.ts';\n\nclass InputModel {\n  private view: InputView;\n\n  private input: HTMLInputElement;\n\n  constructor(attrs: Record<string, string>) {\n    this.view = new InputView(attrs);\n    this.input = this.view.getHTML();\n  }\n\n  public getHTML(): HTMLInputElement {\n    return this.input;\n  }\n\n  public setDisabled(): void {\n    this.input.disabled = IS_DISABLED.DISABLED;\n  }\n\n  public setEnabled(): void {\n    this.input.disabled = IS_DISABLED.ENABLED;\n  }\n\n  public clear(): void {\n    this.input.value = '';\n  }\n}\n\nexport default InputModel;\n","const INPUT_TYPES = {\n  TEXT: 'text',\n  NUMBER: 'number',\n  EMAIL: 'email',\n  PASSWORD: 'password',\n  RANGE: 'range',\n  DATE: 'date',\n  COLOR: 'color',\n} as const;\n\nexport default INPUT_TYPES;\n","const BUTTON_TYPES = {\n  SUBMIT: 'submit',\n  RESET: 'reset',\n  BUTTON: 'button',\n} as const;\n\nexport default BUTTON_TYPES;\n","import InputModel from '../../../shared/Input/model/InputModel.ts';\nimport { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport CREATE_CAR_FORM_STYLES from './createCarForm.module.scss';\nimport INPUT_TYPES from '../../../shared/Input/types/enums.ts';\nimport ButtonModel from '../../../shared/Button/model/ButtonModel.ts';\nimport BUTTON_TYPES from '../../../shared/Button/types/enums.ts';\n\nclass CreateCarFormView {\n  private carNameInput: InputModel;\n\n  private carColorInput: InputModel;\n\n  private submitButton: ButtonModel;\n\n  private form: HTMLFormElement;\n\n  constructor() {\n    this.carNameInput = this.createCarNameInput();\n    this.carColorInput = this.createCarColorInput();\n    this.submitButton = this.createSubmitButton();\n    this.form = this.createHTML();\n  }\n\n  public getHTML(): HTMLFormElement {\n    return this.form;\n  }\n\n  public getCarNameInput(): InputModel {\n    return this.carNameInput;\n  }\n\n  public getCarColorInput(): InputModel {\n    return this.carColorInput;\n  }\n\n  public getSubmitButton(): ButtonModel {\n    return this.submitButton;\n  }\n\n  private createCarNameInput(): InputModel {\n    const placeholder = 'Car name';\n    this.carNameInput = new InputModel({\n      type: INPUT_TYPES.TEXT,\n      placeholder,\n    });\n\n    return this.carNameInput;\n  }\n\n  private createCarColorInput(): InputModel {\n    this.carColorInput = new InputModel({\n      type: INPUT_TYPES.COLOR,\n    });\n\n    return this.carColorInput;\n  }\n\n  private createSubmitButton(): ButtonModel {\n    const buttonText = 'Create';\n    this.submitButton = new ButtonModel({\n      text: buttonText,\n      classes: [CREATE_CAR_FORM_STYLES['form_submit-button']],\n      attrs: {\n        type: BUTTON_TYPES.SUBMIT,\n      },\n    });\n\n    this.submitButton.setDisabled();\n\n    return this.submitButton;\n  }\n\n  private createHTML(): HTMLFormElement {\n    this.form = createBaseElement({\n      tag: TAG_NAMES.FORM,\n      cssClasses: [CREATE_CAR_FORM_STYLES.form],\n    });\n\n    this.form.append(\n      this.carNameInput.getHTML(),\n      this.carColorInput.getHTML(),\n      this.submitButton.getHTML(),\n    );\n\n    return this.form;\n  }\n}\n\nexport default CreateCarFormView;\n","const formatText = (text: string): string =>\n  text\n    .trim()\n    .split(' ')\n    .map((word) => word[0].toUpperCase() + word.slice(1).toLowerCase())\n    .join(' ');\n\nexport default formatText;\n","import type { CarInterface } from '../../../shared/Api/types/interfaces.ts';\nimport ApiModel from '../../../shared/Api/model/ApiModel.ts';\nimport { EVENT_NAMES } from '../../../shared/types/enums.ts';\nimport CreateCarFormView from '../view/CreateCarFormView.ts';\nimport StoreModel from '../../../shared/Store/model/StoreModel.ts';\nimport ACTIONS from '../../../shared/Store/actions/types/enums.ts';\nimport formatText from '../../../utils/formatText.ts';\nimport MediatorModel from '../../../shared/Mediator/model/MediatorModel.ts';\nimport MEDIATOR_EVENTS from '../../../shared/Mediator/types/enums.ts';\nimport LoaderModel from '../../../shared/Loader/model/LoaderModel.ts';\n\nclass CreateCarFormModel {\n  private singletonMediator: MediatorModel<unknown>;\n\n  private createCarFormView: CreateCarFormView;\n\n  private form: HTMLFormElement;\n\n  constructor() {\n    this.singletonMediator = MediatorModel.getInstance();\n    this.createCarFormView = new CreateCarFormView();\n    this.form = this.createCarFormView.getHTML();\n    this.init();\n  }\n\n  public getHTML(): HTMLFormElement {\n    return this.form;\n  }\n\n  private checkForm(): void {\n    const carNameInput = this.createCarFormView.getCarNameInput().getHTML();\n    const carColorInput = this.createCarFormView.getCarColorInput().getHTML();\n    const submitButton = this.createCarFormView.getSubmitButton();\n\n    if (!carNameInput.value.length || !carColorInput.value.length) {\n      submitButton.setDisabled();\n    } else {\n      submitButton.setEnabled();\n    }\n  }\n\n  private async submitHandler(): Promise<void> {\n    const carNameInput = this.createCarFormView.getCarNameInput();\n    const carColorInput = this.createCarFormView.getCarColorInput();\n    const submitButton = this.createCarFormView.getSubmitButton();\n\n    const newCarData: CarInterface = {\n      name: formatText(carNameInput.getHTML().value),\n      color: formatText(carColorInput.getHTML().value),\n    };\n\n    const loader = new LoaderModel();\n\n    submitButton.getHTML().append(loader.getHTML());\n\n    await ApiModel.createCar(newCarData);\n\n    const carsWithoutCreated = await ApiModel.getCars(new Map());\n\n    loader.getHTML().remove();\n\n    if (!carsWithoutCreated) {\n      return;\n    }\n\n    StoreModel.dispatch({\n      type: ACTIONS.GET_CARS,\n      payload: carsWithoutCreated,\n    });\n\n    carNameInput.clear();\n    const initColor = '#000000';\n    carColorInput.getHTML().value = initColor;\n    submitButton.setDisabled();\n    this.singletonMediator.notify(MEDIATOR_EVENTS.CREATE_CAR, '');\n  }\n\n  private init(): void {\n    const carNameInput = this.createCarFormView.getCarNameInput().getHTML();\n    const carColorInput = this.createCarFormView.getCarColorInput().getHTML();\n\n    carNameInput.addEventListener(EVENT_NAMES.INPUT, () => {\n      this.checkForm();\n      this.singletonMediator.notify(\n        MEDIATOR_EVENTS.CHANGE_NAME_PREVIEW_CAR,\n        carNameInput.value,\n      );\n    });\n\n    carColorInput.addEventListener(EVENT_NAMES.INPUT, () => {\n      this.checkForm();\n      this.singletonMediator.notify(\n        MEDIATOR_EVENTS.CHANGE_COLOR_PREVIEW_CAR,\n        carColorInput.value,\n      );\n    });\n\n    this.getHTML().addEventListener(\n      EVENT_NAMES.SUBMIT,\n      (event: SubmitEvent) => {\n        event.preventDefault();\n        this.submitHandler().catch(() => {});\n      },\n    );\n  }\n}\n\nexport default CreateCarFormModel;\n","import createBaseElement from '../../../utils/createBaseElement.ts';\nimport PREVIEW_CAR_STYLES from './previewCarView.module.scss';\nimport { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport { createSVGUse } from '../../../utils/createCarImg.ts';\n\nclass PreviewCarView {\n  private carName: HTMLSpanElement;\n\n  private carSVG: SVGSVGElement;\n\n  private previewCar: HTMLDivElement;\n\n  constructor() {\n    this.carName = this.createCarName();\n    this.carSVG = this.createCarSVG();\n    this.previewCar = this.createHTML();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.previewCar;\n  }\n\n  public getCarSVG(): SVGSVGElement {\n    return this.carSVG;\n  }\n\n  public getCarName(): HTMLSpanElement {\n    return this.carName;\n  }\n\n  private createCarName(): HTMLSpanElement {\n    this.carName = createBaseElement({\n      tag: TAG_NAMES.SPAN,\n      cssClasses: [PREVIEW_CAR_STYLES['preview-car_name']],\n    });\n\n    return this.carName;\n  }\n\n  private createCarSVG(): SVGSVGElement {\n    const svgURL = 'http://www.w3.org/2000/svg';\n    const carID = 'car';\n    this.carSVG = document.createElementNS(svgURL, TAG_NAMES.SVG);\n    this.carSVG.classList.add(PREVIEW_CAR_STYLES['preview-car_img']);\n    this.carSVG.appendChild(createSVGUse(carID));\n    return this.carSVG;\n  }\n\n  private createHTML(): HTMLDivElement {\n    this.previewCar = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [PREVIEW_CAR_STYLES['preview-car']],\n    });\n\n    this.previewCar.append(this.carSVG, this.carName);\n\n    return this.previewCar;\n  }\n}\n\nexport default PreviewCarView;\n","import MEDIATOR_EVENTS from '../../../shared/Mediator/types/enums.ts';\nimport MediatorModel from '../../../shared/Mediator/model/MediatorModel.ts';\nimport { changeSVGFill } from '../../../utils/createCarImg.ts';\nimport PreviewCarView from '../view/PreviewCarView.ts';\n\nclass PreviewCarModel {\n  private previewCarView: PreviewCarView;\n\n  private singletonMediator: MediatorModel<unknown>;\n\n  private previewCar: HTMLDivElement;\n\n  constructor() {\n    this.previewCarView = new PreviewCarView();\n    this.singletonMediator = MediatorModel.getInstance();\n    this.previewCar = this.previewCarView.getHTML();\n    this.init();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.previewCar;\n  }\n\n  private setColorCar(color: string): void {\n    const carSvg = this.previewCarView.getCarSVG();\n    changeSVGFill(carSvg, color);\n  }\n\n  private setNameCar(name: string): void {\n    this.previewCarView.getCarName().textContent = name;\n  }\n\n  private setInitialStateFields(): void {\n    this.previewCarView.getCarName().textContent = '';\n    const attr = 'fill';\n    this.previewCarView.getCarSVG().removeAttribute(attr);\n  }\n\n  private init(): void {\n    this.singletonMediator.subscribe(\n      MEDIATOR_EVENTS.CHANGE_COLOR_PREVIEW_CAR,\n      (params) => {\n        if (typeof params === 'string') {\n          this.setColorCar(params);\n        }\n      },\n    );\n\n    this.singletonMediator.subscribe(\n      MEDIATOR_EVENTS.CHANGE_NAME_PREVIEW_CAR,\n      (params) => {\n        if (typeof params === 'string') {\n          this.setNameCar(params);\n        }\n      },\n    );\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.CREATE_CAR, () => {\n      this.setInitialStateFields();\n    });\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.UPDATE_CAR, () => {\n      this.setInitialStateFields();\n    });\n  }\n}\n\nexport default PreviewCarModel;\n","import InputModel from '../../../shared/Input/model/InputModel.ts';\nimport { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport CHANGE_CAR_FORM_STYLES from './changeCarForm.module.scss';\nimport INPUT_TYPES from '../../../shared/Input/types/enums.ts';\nimport ButtonModel from '../../../shared/Button/model/ButtonModel.ts';\nimport BUTTON_TYPES from '../../../shared/Button/types/enums.ts';\n\nclass ChangeCarFormView {\n  private carNameInput: InputModel;\n\n  private carColorInput: InputModel;\n\n  private submitButton: ButtonModel;\n\n  private form: HTMLFormElement;\n\n  constructor() {\n    this.carNameInput = this.createCarNameInput();\n    this.carColorInput = this.createCarColorInput();\n    this.submitButton = this.createSubmitButton();\n    this.form = this.createHTML();\n  }\n\n  public getHTML(): HTMLFormElement {\n    return this.form;\n  }\n\n  public getCarNameInput(): InputModel {\n    return this.carNameInput;\n  }\n\n  public getCarColorInput(): InputModel {\n    return this.carColorInput;\n  }\n\n  public getSubmitButton(): ButtonModel {\n    return this.submitButton;\n  }\n\n  private createCarNameInput(): InputModel {\n    const placeholder = 'Car name';\n    this.carNameInput = new InputModel({\n      type: INPUT_TYPES.TEXT,\n      placeholder,\n    });\n\n    this.carNameInput.setDisabled();\n\n    return this.carNameInput;\n  }\n\n  private createCarColorInput(): InputModel {\n    this.carColorInput = new InputModel({\n      type: INPUT_TYPES.COLOR,\n    });\n\n    this.carColorInput.setDisabled();\n\n    return this.carColorInput;\n  }\n\n  private createSubmitButton(): ButtonModel {\n    const buttonText = 'Save';\n    this.submitButton = new ButtonModel({\n      text: buttonText,\n      classes: [CHANGE_CAR_FORM_STYLES['form_submit-button']],\n      attrs: {\n        type: BUTTON_TYPES.SUBMIT,\n      },\n    });\n\n    this.submitButton.setDisabled();\n\n    return this.submitButton;\n  }\n\n  private createHTML(): HTMLFormElement {\n    this.form = createBaseElement({\n      tag: TAG_NAMES.FORM,\n      cssClasses: [CHANGE_CAR_FORM_STYLES.form],\n    });\n\n    this.form.append(\n      this.carNameInput.getHTML(),\n      this.carColorInput.getHTML(),\n      this.submitButton.getHTML(),\n    );\n\n    return this.form;\n  }\n}\n\nexport default ChangeCarFormView;\n","import type { CarInterface } from '../../../shared/Api/types/interfaces.ts';\nimport ApiModel from '../../../shared/Api/model/ApiModel.ts';\nimport { EVENT_NAMES } from '../../../shared/types/enums.ts';\nimport ChangeCarFormView from '../view/ChangeCarFormView.ts';\nimport StoreModel from '../../../shared/Store/model/StoreModel.ts';\nimport ACTIONS from '../../../shared/Store/actions/types/enums.ts';\nimport formatText from '../../../utils/formatText.ts';\nimport MediatorModel from '../../../shared/Mediator/model/MediatorModel.ts';\nimport MEDIATOR_EVENTS from '../../../shared/Mediator/types/enums.ts';\nimport LoaderModel from '../../../shared/Loader/model/LoaderModel.ts';\n\nclass ChangeCarFormModel {\n  private singletonMediator: MediatorModel<unknown>;\n\n  private selectCar: CarInterface | null = null;\n\n  private changeCarFormView: ChangeCarFormView;\n\n  private form: HTMLFormElement;\n\n  constructor() {\n    this.singletonMediator = MediatorModel.getInstance();\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.SELECT_CAR, (params) => {\n      this.getSelectCar(params);\n    });\n    this.changeCarFormView = new ChangeCarFormView();\n    this.form = this.changeCarFormView.getHTML();\n    this.init();\n  }\n\n  public getHTML(): HTMLFormElement {\n    return this.form;\n  }\n\n  private getSelectCar(id: unknown): void {\n    if (typeof id === 'number') {\n      const loader = new LoaderModel();\n      this.changeCarFormView\n        .getSubmitButton()\n        .getHTML()\n        .append(loader.getHTML());\n      ApiModel.getCarById(id)\n        .then((car) => {\n          if (car) {\n            loader.getHTML().remove();\n            this.selectCar = car;\n            this.unDisableForm();\n            this.singletonMediator.notify(\n              MEDIATOR_EVENTS.CHANGE_NAME_PREVIEW_CAR,\n              car.name,\n            );\n            this.singletonMediator.notify(\n              MEDIATOR_EVENTS.CHANGE_COLOR_PREVIEW_CAR,\n              car.color,\n            );\n          }\n        })\n        .catch(() => {});\n    }\n  }\n\n  private unDisableForm(): void {\n    const carNameInput = this.changeCarFormView.getCarNameInput();\n    const carColorInput = this.changeCarFormView.getCarColorInput();\n    const submitButton = this.changeCarFormView.getSubmitButton();\n    carNameInput.setEnabled();\n    carColorInput.setEnabled();\n    submitButton.setEnabled();\n\n    carNameInput.getHTML().value = this.selectCar?.name || '';\n    carColorInput.getHTML().value = this.selectCar?.color || '';\n  }\n\n  private checkForm(): void {\n    const carNameInput = this.changeCarFormView.getCarNameInput().getHTML();\n    const carColorInput = this.changeCarFormView.getCarColorInput().getHTML();\n    const submitButton = this.changeCarFormView.getSubmitButton();\n\n    if (!carNameInput.value.length || !carColorInput.value.length) {\n      submitButton.setDisabled();\n    } else {\n      submitButton.setEnabled();\n    }\n  }\n\n  private async submitHandler(): Promise<void> {\n    const carNameInput = this.changeCarFormView.getCarNameInput();\n    const carColorInput = this.changeCarFormView.getCarColorInput();\n    const submitButton = this.changeCarFormView.getSubmitButton();\n\n    const newCarData: CarInterface = {\n      name: formatText(carNameInput.getHTML().value),\n      color: formatText(carColorInput.getHTML().value),\n    };\n\n    if (!this.selectCar || !this.selectCar.id) {\n      return;\n    }\n    const loader = new LoaderModel();\n    this.changeCarFormView.getSubmitButton().getHTML().append(loader.getHTML());\n\n    await ApiModel.updateCarById(this.selectCar.id, newCarData);\n\n    const carWithoutChange = await ApiModel.getCarById(this.selectCar.id);\n\n    loader.getHTML().remove();\n\n    if (!carWithoutChange || !carWithoutChange.id) {\n      return;\n    }\n\n    const { cars } = StoreModel.getState();\n\n    const updateCar = cars.find((car) => car.id === carWithoutChange.id);\n    if (updateCar) {\n      updateCar.name = newCarData.name;\n      updateCar.color = newCarData.color;\n    }\n\n    StoreModel.dispatch({\n      type: ACTIONS.ADD_NEW_CAR,\n      payload: cars,\n    });\n\n    carNameInput.clear();\n    const initColor = '#000000';\n    carColorInput.getHTML().value = initColor;\n    carNameInput.setDisabled();\n    carColorInput.setDisabled();\n    submitButton.setDisabled();\n    this.singletonMediator.notify(MEDIATOR_EVENTS.UPDATE_CAR, updateCar?.id);\n  }\n\n  private init(): void {\n    const carNameInput = this.changeCarFormView.getCarNameInput().getHTML();\n    const carColorInput = this.changeCarFormView.getCarColorInput().getHTML();\n\n    carNameInput.addEventListener(EVENT_NAMES.INPUT, () => {\n      this.checkForm();\n      this.singletonMediator.notify(\n        MEDIATOR_EVENTS.CHANGE_NAME_PREVIEW_CAR,\n        carNameInput.value,\n      );\n    });\n\n    carColorInput.addEventListener(EVENT_NAMES.INPUT, () => {\n      this.checkForm();\n      this.singletonMediator.notify(\n        MEDIATOR_EVENTS.CHANGE_COLOR_PREVIEW_CAR,\n        carColorInput.value,\n      );\n    });\n\n    this.getHTML().addEventListener(\n      EVENT_NAMES.SUBMIT,\n      (event: SubmitEvent) => {\n        event.preventDefault();\n        this.submitHandler().catch(() => {});\n      },\n    );\n  }\n}\n\nexport default ChangeCarFormModel;\n","const getRandomIndex = (max: number): number => Math.floor(Math.random() * max);\n\nexport default getRandomIndex;\n","import type { CarInterface } from '../shared/Api/types/interfaces.ts';\nimport getRandomIndex from './getRandomIndex.ts';\n\nenum CarModel {\n  'Model 3' = 'Model 3',\n  'Model S' = 'Model S',\n  'Model X' = 'Model X',\n  'Model Y' = 'Model Y',\n  'Roadster' = 'Roadster',\n  'Cybertruck' = 'Cybertruck',\n  'Bolt EV' = 'Bolt EV',\n  'I-Pace' = 'I-Pace',\n  'Kona Electric' = 'Kona Electric',\n  'Taycan Turbo' = 'Taycan Turbo',\n  'Taycan Turbo S' = 'Taycan Turbo S',\n  'e-Golf' = 'e-Golf',\n  'Soul Electric' = 'Soul Electric',\n  'e6' = 'e6',\n  'Leaf' = 'Leaf',\n  'Zoe' = 'Zoe',\n  'i3' = 'i3',\n  'dolphin' = 'dolphin',\n  'eQ' = 'eQ',\n}\n\nenum CarBrand {\n  'Tesla' = 'Tesla',\n  'Chevrolet' = 'Chevrolet',\n  'Hyundai' = 'Hyundai',\n  'Kia' = 'Kia',\n  'Jaguar' = 'Jaguar',\n  'Porche' = 'Porche',\n  'BYD' = 'BYD',\n  'Volkswagen' = 'Volkswagen',\n  'Nissan' = 'Nissan',\n  'Renault' = 'Renault',\n  'Chery' = 'Chery',\n  'BMW' = 'BMW',\n}\n\nconst createRandomDataCars = (countCars: number): CarInterface[] => {\n  const cars: CarInterface[] = [];\n  const getRandomBrand = (): string =>\n    Object.keys(CarBrand)[getRandomIndex(Object.keys(CarBrand).length)];\n  const getRandomModel = (): string =>\n    Object.keys(CarModel)[getRandomIndex(Object.keys(CarModel).length)];\n  const getRandomColor = (): string =>\n    `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n  for (let i = 0; i < countCars; i += 1) {\n    cars.push({\n      name: `${getRandomBrand()} ${getRandomModel()}`,\n      color: getRandomColor(),\n    });\n  }\n  return cars;\n};\n\nexport default createRandomDataCars;\n","import ButtonModel from '../../../shared/Button/model/ButtonModel.ts';\nimport { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport PAGINATION_STYLES from './pagination.module.scss';\n\nclass PaginationView {\n  private paginationWrapper: HTMLDivElement;\n\n  private currentPageSpan: HTMLSpanElement;\n\n  private prevButton: ButtonModel;\n\n  private nextButton: ButtonModel;\n\n  constructor() {\n    this.currentPageSpan = this.createCurrentPageSpan();\n    this.prevButton = this.createPrevButton();\n    this.nextButton = this.createNextButton();\n    this.paginationWrapper = this.createHTML();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.paginationWrapper;\n  }\n\n  public getCurrentPageSpan(): HTMLSpanElement {\n    return this.currentPageSpan;\n  }\n\n  public getPrevButton(): ButtonModel {\n    return this.prevButton;\n  }\n\n  public getNextButton(): ButtonModel {\n    return this.nextButton;\n  }\n\n  private createCurrentPageSpan(): HTMLSpanElement {\n    this.currentPageSpan = createBaseElement({\n      tag: TAG_NAMES.SPAN,\n      cssClasses: [PAGINATION_STYLES.pagination_current_page],\n    });\n    return this.currentPageSpan;\n  }\n\n  private createPrevButton(): ButtonModel {\n    const text = 'prev';\n    this.prevButton = new ButtonModel({\n      text,\n      classes: [PAGINATION_STYLES.pagination_button],\n    });\n\n    this.prevButton.setDisabled();\n    return this.prevButton;\n  }\n\n  private createNextButton(): ButtonModel {\n    const text = 'next';\n    this.nextButton = new ButtonModel({\n      text,\n      classes: [PAGINATION_STYLES.pagination_button],\n    });\n\n    return this.nextButton;\n  }\n\n  private createHTML(): HTMLDivElement {\n    this.paginationWrapper = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [PAGINATION_STYLES.pagination_wrapper],\n    });\n\n    this.paginationWrapper.append(\n      this.currentPageSpan,\n      this.prevButton.getHTML(),\n      this.nextButton.getHTML(),\n    );\n    return this.paginationWrapper;\n  }\n}\n\nexport default PaginationView;\n","const STORE_FIELDS = {\n  CARS: 'cars',\n  WINNERS: 'winners',\n  GARAGE_PAGE: 'garagePage',\n  TOTAL_GARAGE_PAGES: 'totalPages',\n} as const;\n\nexport default STORE_FIELDS;\n","import { EVENT_NAMES } from '../../../shared/types/enums.ts';\nimport PaginationView from '../view/PaginationView.ts';\nimport StoreModel from '../../../shared/Store/model/StoreModel.ts';\nimport ACTIONS from '../../../shared/Store/actions/types/enums.ts';\nimport MediatorModel from '../../../shared/Mediator/model/MediatorModel.ts';\nimport MEDIATOR_EVENTS from '../../../shared/Mediator/types/enums.ts';\nimport ApiModel from '../../../shared/Api/model/ApiModel.ts';\nimport { QUERY_VALUES } from '../../../shared/Api/types/enums.ts';\nimport STORE_FIELDS from '../../../shared/Store/types/enums.ts';\nimport LoaderModel from '../../../shared/Loader/model/LoaderModel.ts';\n\nclass PaginationModel {\n  private singletonMediator: MediatorModel<unknown>;\n\n  private paginationView: PaginationView;\n\n  private pagination: HTMLDivElement;\n\n  constructor() {\n    this.singletonMediator = MediatorModel.getInstance();\n    this.paginationView = new PaginationView();\n    this.pagination = this.paginationView.getHTML();\n    this.init();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.pagination;\n  }\n\n  private initPageInfo(): void {\n    const pageSpan = this.paginationView.getCurrentPageSpan();\n    const loader = new LoaderModel();\n    this.pagination.append(loader.getHTML());\n    ApiModel.getCars(new Map())\n      .then((cars) => {\n        if (cars) {\n          loader.getHTML().remove();\n          const maxPage = Math.ceil(\n            cars.length / QUERY_VALUES.DEFAULT_CARS_LIMIT,\n          );\n          StoreModel.dispatch({\n            type: ACTIONS.SET_TOTAL_GARAGE_PAGES,\n            payload: maxPage,\n          });\n          const currentPage = StoreModel.getState().garagePage;\n          const textContent = `Page: ${currentPage} / ${maxPage} `;\n          pageSpan.textContent = textContent;\n        }\n      })\n      .catch(() => {});\n  }\n\n  private redrawPageInfo(currentPage: number): void {\n    const pageSpan = this.paginationView.getCurrentPageSpan();\n    const maxPage = StoreModel.getState().totalPages;\n    const textContent = `Page: ${currentPage} / ${maxPage} `;\n    pageSpan.textContent = textContent;\n  }\n\n  private prevButtonHandler(): void {\n    const nextButton = this.paginationView.getNextButton();\n    nextButton.setEnabled();\n    const garagePageCountDec = StoreModel.getState().garagePage - 1;\n    StoreModel.dispatch({\n      type: ACTIONS.CHANGE_GARAGE_PAGE,\n      payload: garagePageCountDec,\n    });\n    this.allButtonsDisabled();\n    this.redrawPageInfo(garagePageCountDec);\n  }\n\n  private nextButtonHandler(): void {\n    const prevButton = this.paginationView.getPrevButton();\n    prevButton.setEnabled();\n    const garagePageCountInc = StoreModel.getState().garagePage + 1;\n    StoreModel.dispatch({\n      type: ACTIONS.CHANGE_GARAGE_PAGE,\n      payload: garagePageCountInc,\n    });\n    this.allButtonsDisabled();\n    this.redrawPageInfo(garagePageCountInc);\n  }\n\n  private allButtonsDisabled(): void {\n    const prevButton = this.paginationView.getPrevButton();\n    const nextButton = this.paginationView.getNextButton();\n    const { garagePage } = StoreModel.getState();\n    const { totalPages } = StoreModel.getState();\n    if (garagePage === totalPages || totalPages === 0) {\n      nextButton.setDisabled();\n    } else {\n      nextButton.setEnabled();\n    }\n    if (StoreModel.getState().garagePage === 1) {\n      prevButton.setDisabled();\n    } else {\n      prevButton.setEnabled();\n    }\n  }\n\n  private setSubscribeToMediator(): void {\n    this.singletonMediator.subscribe(\n      MEDIATOR_EVENTS.CHANGE_TOTAL_GARAGE_PAGES,\n      () => {\n        this.initPageInfo();\n      },\n    );\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.CREATE_MORE_CARS, () => {\n      this.initPageInfo();\n      this.allButtonsDisabled();\n    });\n\n    this.singletonMediator.subscribe(\n      MEDIATOR_EVENTS.CHANGE_TOTAL_GARAGE_PAGES,\n      () => {\n        this.allButtonsDisabled();\n      },\n    );\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.DELETE_CAR, () => {\n      this.initPageInfo();\n      this.allButtonsDisabled();\n    });\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.CREATE_CAR, () => {\n      this.allButtonsDisabled();\n    });\n  }\n\n  private init(): void {\n    this.initPageInfo();\n    this.allButtonsDisabled();\n    const prevButton = this.paginationView.getPrevButton();\n    const nextButton = this.paginationView.getNextButton();\n    prevButton.getHTML().addEventListener(EVENT_NAMES.CLICK, () => {\n      this.prevButtonHandler();\n      this.singletonMediator.notify(MEDIATOR_EVENTS.CHANGE_GARAGE_PAGE, '');\n    });\n    nextButton.getHTML().addEventListener(EVENT_NAMES.CLICK, () => {\n      this.nextButtonHandler();\n      this.singletonMediator.notify(MEDIATOR_EVENTS.CHANGE_GARAGE_PAGE, '');\n    });\n\n    this.setSubscribeToMediator();\n\n    StoreModel.subscribe(STORE_FIELDS.TOTAL_GARAGE_PAGES, () => {\n      this.allButtonsDisabled();\n    });\n  }\n}\n\nexport default PaginationModel;\n","import { QUERY_PARAMS, QUERY_VALUES } from '../../../shared/Api/types/enums.ts';\nimport StoreModel from '../../../shared/Store/model/StoreModel.ts';\nimport type PageInterface from '../../types/interfaces.ts';\nimport GaragePageView from '../view/GaragePageView.ts';\nimport GARAGE_PAGE_STYLES from '../view/garagePage.module.scss';\nimport ApiModel from '../../../shared/Api/model/ApiModel.ts';\nimport ACTIONS from '../../../shared/Store/actions/types/enums.ts';\nimport type { CarInterface } from '../../../shared/Api/types/interfaces.ts';\nimport RaceTrackModel from '../../../entities/RaceTrack/model/RaceTrackModel.ts';\nimport CreateCarFormModel from '../../../widgets/CreateCarForm/model/CreateCarFormModel.ts';\nimport MediatorModel from '../../../shared/Mediator/model/MediatorModel.ts';\nimport MEDIATOR_EVENTS from '../../../shared/Mediator/types/enums.ts';\nimport PreviewCarModel from '../../../features/PreviewCar/model/PreviewCarModel.ts';\nimport ChangeCarFormModel from '../../../widgets/ChangeCarForm/model/ChangeCarFormModel.ts';\nimport type ButtonModel from '../../../shared/Button/model/ButtonModel.ts';\nimport { EVENT_NAMES } from '../../../shared/types/enums.ts';\nimport createRandomDataCars from '../../../utils/createRandomDataCars.ts';\nimport PaginationModel from '../../../features/Pagination/model/PaginationModel.ts';\nimport LoaderModel from '../../../shared/Loader/model/LoaderModel.ts';\n\nclass GaragePageModel implements PageInterface {\n  private parent: HTMLDivElement;\n\n  private singletonMediator: MediatorModel<unknown>;\n\n  private garagePageView: GaragePageView;\n\n  private createCarForm: CreateCarFormModel;\n\n  private removeButtons: ButtonModel[] = [];\n\n  private changeCarForm: ChangeCarFormModel;\n\n  private previewCar: PreviewCarModel;\n\n  private pagination: PaginationModel;\n\n  private page: HTMLDivElement;\n\n  constructor(parent: HTMLDivElement) {\n    this.parent = parent;\n    this.singletonMediator = MediatorModel.getInstance();\n    this.garagePageView = new GaragePageView(this.parent);\n    this.createCarForm = new CreateCarFormModel();\n    this.changeCarForm = new ChangeCarFormModel();\n    this.previewCar = new PreviewCarModel();\n    this.pagination = new PaginationModel();\n    this.page = this.garagePageView.getHTML();\n    this.init();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.page;\n  }\n\n  public hide(): void {\n    this.page.classList.add(GARAGE_PAGE_STYLES['garage-page--hidden']);\n  }\n\n  public show(): void {\n    this.page.classList.remove(GARAGE_PAGE_STYLES['garage-page--hidden']);\n  }\n\n  private getInitialDataCars(): void {\n    const queryParams: Map<string, number> = new Map();\n    queryParams.set(QUERY_PARAMS.PAGE, QUERY_VALUES.DEFAULT_PAGE);\n    queryParams.set(QUERY_PARAMS.LIMIT, QUERY_VALUES.DEFAULT_CARS_LIMIT);\n    const loader = new LoaderModel();\n\n    this.garagePageView.getRaceTracksList().append(loader.getHTML());\n    ApiModel.getCars(queryParams)\n      .then((cars) => {\n        if (cars) {\n          this.drawRaceTracks(cars);\n          loader.getHTML().remove();\n        }\n      })\n      .catch(() => {});\n\n    this.getAllCars();\n  }\n\n  private getAllCars(): void {\n    const loader = new LoaderModel();\n    this.garagePageView.getGarageTitle().append(loader.getHTML());\n    ApiModel.getCars(new Map())\n      .then((cars) => {\n        if (cars) {\n          StoreModel.dispatch({\n            type: ACTIONS.GET_CARS,\n            payload: cars,\n          });\n\n          StoreModel.dispatch({\n            type: ACTIONS.SET_TOTAL_GARAGE_PAGES,\n            payload: Math.ceil(cars.length / QUERY_VALUES.DEFAULT_CARS_LIMIT),\n          });\n          this.singletonMediator.notify(\n            MEDIATOR_EVENTS.CHANGE_TOTAL_GARAGE_PAGES,\n            '',\n          );\n          this.drawGarageTitle();\n        }\n      })\n      .catch(() => {});\n  }\n\n  private drawGarageTitle(): void {\n    const title = this.garagePageView.getGarageTitle();\n    const countCars = StoreModel.getState().cars.length;\n    const textContent = `Garage (${countCars})`;\n    title.textContent = textContent;\n  }\n\n  private drawRaceTracks(cars: CarInterface[]): void {\n    const countCarsToList =\n      this.garagePageView.getRaceTracksList().children.length;\n\n    if (countCarsToList < QUERY_VALUES.DEFAULT_CARS_LIMIT) {\n      cars.forEach((car) => {\n        const raceTrack = new RaceTrackModel(car);\n        this.removeButtons.push(raceTrack.getView().getRemoveCarButton());\n        this.garagePageView.getRaceTracksList().append(raceTrack.getHTML());\n      });\n    }\n  }\n\n  private moreCarsHandler(): void {\n    const carsCount = 100;\n    const cars = createRandomDataCars(carsCount);\n    StoreModel.dispatch({\n      type: ACTIONS.ADD_NEW_CAR,\n      payload: cars,\n    });\n    const loader = new LoaderModel();\n    this.garagePageView.getRaceTracksList().append(loader.getHTML());\n    cars.forEach((car) => {\n      ApiModel.createCar(car)\n        .then(() => {\n          this.drawRaceTracks([car]);\n          this.singletonMediator.notify(MEDIATOR_EVENTS.CREATE_MORE_CARS, '');\n        })\n        .catch(() => {});\n    });\n    loader.getHTML().remove();\n  }\n\n  private redrawCurrentPage(): void {\n    const currentPage = StoreModel.getState().garagePage;\n    const queryParams: Map<string, number> = new Map();\n    queryParams.set(QUERY_PARAMS.LIMIT, QUERY_VALUES.DEFAULT_CARS_LIMIT);\n    if (this.garagePageView.getRaceTracksList().children.length === 0) {\n      const prevPage = currentPage - 1;\n      queryParams.set(QUERY_PARAMS.PAGE, prevPage);\n      StoreModel.dispatch({\n        type: ACTIONS.CHANGE_GARAGE_PAGE,\n        payload: prevPage,\n      });\n    } else {\n      queryParams.set(QUERY_PARAMS.PAGE, currentPage);\n    }\n\n    const loader = new LoaderModel();\n    this.garagePageView.getRaceTracksList().append(loader.getHTML());\n    ApiModel.getCars(new Map(queryParams))\n      .then((data) => {\n        if (data) {\n          this.garagePageView.clearRaceTracksList();\n          this.drawRaceTracks(data);\n        }\n        return data;\n      })\n      .catch(() => {});\n  }\n\n  private setSubscribeToMediator(): void {\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.CREATE_CAR, () => {\n      this.drawGarageTitle();\n      this.redrawCurrentPage();\n      this.getAllCars();\n    });\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.CREATE_MORE_CARS, () => {\n      this.drawGarageTitle();\n      this.redrawCurrentPage();\n      this.getAllCars();\n    });\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.DELETE_CAR, () => {\n      this.drawGarageTitle();\n      this.redrawCurrentPage();\n    });\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.UPDATE_CAR, () => {\n      this.removeButtons.forEach((button) => {\n        button.setEnabled();\n      });\n      this.redrawCurrentPage();\n    });\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.CHANGE_GARAGE_PAGE, () => {\n      this.redrawCurrentPage();\n    });\n  }\n\n  private init(): void {\n    this.hide();\n    this.getInitialDataCars();\n    this.setSubscribeToMediator();\n\n    const moreCarsButton = this.garagePageView.getMoreCarsButton().getHTML();\n    moreCarsButton.addEventListener(\n      EVENT_NAMES.CLICK,\n      this.moreCarsHandler.bind(this),\n    );\n\n    const raceTrackTopWrapper = this.garagePageView.getRaceTrackTopWrapper();\n    const raceTrackBottomWrapper =\n      this.garagePageView.getRaceTrackBottomWrapper();\n\n    raceTrackBottomWrapper.append(this.pagination.getHTML());\n    raceTrackTopWrapper.append(\n      this.createCarForm.getHTML(),\n      this.previewCar.getHTML(),\n      this.changeCarForm.getHTML(),\n    );\n  }\n}\n\nexport default GaragePageModel;\n","import { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport WINNERS_PAGE_STYLES from './winnersPage.module.scss';\n\nclass WinnersPageView {\n  private parent: HTMLDivElement;\n\n  private page: HTMLDivElement;\n\n  constructor(parent: HTMLDivElement) {\n    this.parent = parent;\n    this.page = this.createHTML();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.page;\n  }\n\n  private createHTML(): HTMLDivElement {\n    this.page = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [WINNERS_PAGE_STYLES['winners-page']],\n    });\n\n    const h1 = createBaseElement({\n      tag: TAG_NAMES.H1,\n      innerContent: 'Winners',\n    });\n    h1.style.color = 'white';\n    this.page.append(h1);\n    this.parent.append(this.page);\n\n    return this.page;\n  }\n}\nexport default WinnersPageView;\n","import type PageInterface from '../../types/interfaces.ts';\nimport WinnersPageView from '../view/WinnersPageView.ts';\nimport WINNERS_PAGE_STYLES from '../view/winnersPage.module.scss';\n\nclass WinnersPageModel implements PageInterface {\n  private parent: HTMLDivElement;\n\n  private winnersPageView: WinnersPageView;\n\n  private page: HTMLDivElement;\n\n  constructor(parent: HTMLDivElement) {\n    this.parent = parent;\n    this.winnersPageView = new WinnersPageView(this.parent);\n    this.page = this.winnersPageView.getHTML();\n    this.hide();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.page;\n  }\n\n  public hide(): void {\n    this.getHTML().classList.add(WINNERS_PAGE_STYLES['winners-page--hidden']);\n  }\n\n  public show(): void {\n    this.getHTML().classList.remove(\n      WINNERS_PAGE_STYLES['winners-page--hidden'],\n    );\n  }\n}\n\nexport default WinnersPageModel;\n","const HEADER_BUTTON_TEXT = {\n  GARAGE_BTN: 'To winners',\n  WINNERS_BTN: 'To garage',\n} as const;\n\nexport default HEADER_BUTTON_TEXT;\n","import ButtonModel from '../../../shared/Button/model/ButtonModel.ts';\nimport { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport HEADER_BUTTON_TEXT from '../types/enums.ts';\nimport HEADER_STYLES from './header.module.scss';\n\nclass HeaderView {\n  private garageButton: ButtonModel;\n\n  private winnersButton: ButtonModel;\n\n  private header: HTMLElement;\n\n  constructor() {\n    this.garageButton = this.createGarageButton();\n    this.winnersButton = this.createWinnersButton();\n    this.header = this.createHTML();\n  }\n\n  public getHTML(): HTMLElement {\n    return this.header;\n  }\n\n  public getGarageButton(): ButtonModel {\n    return this.garageButton;\n  }\n\n  public getWinnersButton(): ButtonModel {\n    return this.winnersButton;\n  }\n\n  private createGarageButton(): ButtonModel {\n    this.garageButton = new ButtonModel({\n      text: HEADER_BUTTON_TEXT.GARAGE_BTN,\n      classes: [HEADER_STYLES['header__garage-button']],\n    });\n\n    return this.garageButton;\n  }\n\n  private createWinnersButton(): ButtonModel {\n    this.winnersButton = new ButtonModel({\n      text: HEADER_BUTTON_TEXT.WINNERS_BTN,\n      classes: [HEADER_STYLES['header__winners-button']],\n    });\n\n    return this.winnersButton;\n  }\n\n  private createHTML(): HTMLElement {\n    this.header = createBaseElement({\n      tag: TAG_NAMES.HEADER,\n      cssClasses: [HEADER_STYLES.header],\n    });\n\n    this.header.append(\n      this.winnersButton.getHTML(),\n      this.garageButton.getHTML(),\n    );\n    return this.header;\n  }\n}\n\nexport default HeaderView;\n","import type RouterModel from '../../../app/Router/model/RouterModel.ts';\nimport PAGES_IDS from '../../../pages/types/enums.ts';\nimport { EVENT_NAMES } from '../../../shared/types/enums.ts';\nimport HeaderView from '../view/HeaderView.ts';\n\nclass HeaderModel {\n  private headerView: HeaderView;\n\n  private header: HTMLElement;\n\n  private router: RouterModel;\n\n  constructor(router: RouterModel) {\n    this.router = router;\n    this.headerView = new HeaderView();\n    this.header = this.headerView.getHTML();\n    this.setHandlerToButtons();\n  }\n\n  public getHTML(): HTMLElement {\n    return this.header;\n  }\n\n  private setHandlerToButtons(): void {\n    const garageButton = this.headerView.getGarageButton().getHTML();\n    const winnersButton = this.headerView.getWinnersButton().getHTML();\n\n    garageButton.addEventListener(EVENT_NAMES.CLICK, () => {\n      this.router.navigateTo(PAGES_IDS.WINNERS_PAGE);\n    });\n\n    winnersButton.addEventListener(EVENT_NAMES.CLICK, () => {\n      this.router.navigateTo(PAGES_IDS.GARAGE_PAGE);\n    });\n  }\n}\n\nexport default HeaderModel;\n","import RouterModel from '../../Router/model/RouterModel.ts';\nimport PAGES_IDS from '../../../pages/types/enums.ts';\nimport AppView from '../view/AppView.ts';\nimport GaragePageModel from '../../../pages/GaragePage/model/GaragePageModel.ts';\nimport type PageInterface from '../../../pages/types/interfaces.ts';\nimport WinnersPageModel from '../../../pages/WinnersPage/model/WinnersPageModel.ts';\nimport HeaderModel from '../../../widgets/Header/model/HeaderModel.ts';\n\nclass AppModel {\n  private appView: AppView;\n\n  private parent: HTMLDivElement;\n\n  private router: RouterModel;\n\n  constructor() {\n    this.appView = new AppView();\n    this.parent = this.appView.getHTML();\n\n    const routes = this.initPages();\n    this.router = new RouterModel(routes);\n    const header = new HeaderModel(this.router);\n    this.parent.prepend(header.getHTML());\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.parent;\n  }\n\n  private initPages(): Map<string, PageInterface> {\n    const garagePage = new GaragePageModel(this.parent);\n    const winnersPage = new WinnersPageModel(this.parent);\n    const pages: Map<string, PageInterface> = new Map(\n      Object.entries({\n        [PAGES_IDS.DEFAULT_PAGE]: garagePage,\n        [PAGES_IDS.GARAGE_PAGE]: garagePage,\n        [PAGES_IDS.WINNERS_PAGE]: winnersPage,\n      }),\n    );\n    return pages;\n  }\n}\n\nexport default AppModel;\n","import AppModel from './app/App/model/AppModel.ts';\nimport './index.scss';\n\nconst myApp = new AppModel();\ndocument.body.append(myApp.getHTML());\n"],"names":["index","loader","_a","CarModel","CarBrand","header"],"mappings":"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"}