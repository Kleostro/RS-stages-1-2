{"version":3,"file":"main-fbb47c3d.js","sources":["../../src/shared/types/enums.ts","../../src/pages/types/enums.ts","../../src/app/Router/model/RouterModel.ts","../../src/utils/createBaseElement.ts","../../src/app/App/view/AppView.ts","../../src/shared/Store/initialData.ts","../../src/shared/reducer/rootReducer.ts","../../src/shared/Store/model/StoreModel.ts","../../src/pages/GaragePage/view/GaragePageView.ts","../../src/shared/Api/types/enums.ts","../../src/shared/Api/model/ApiModel.ts","../../src/shared/actions/types/enums.ts","../../src/shared/Button/view/ButtonView.ts","../../src/shared/Button/model/ButtonModel.ts","../../src/entities/RaceTrack/types/enums.ts","../../src/utils/createCarImg.ts","../../src/entities/RaceTrack/view/RaceTrackView.ts","../../src/entities/RaceTrack/model/RaceTrackModel.ts","../../src/pages/GaragePage/model/GaragePageModel.ts","../../src/pages/WinnersPage/view/WinnersPageView.ts","../../src/pages/WinnersPage/model/WinnersPageModel.ts","../../src/widgets/Header/types/enums.ts","../../src/widgets/Header/view/HeaderView.ts","../../src/widgets/Header/model/HeaderModel.ts","../../src/app/App/model/AppModel.ts","../../src/index.ts"],"sourcesContent":["export const TAG_NAMES = {\n  MAIN: 'main',\n  HEADER: 'header',\n  FOOTER: 'footer',\n  NAV: 'nav',\n  SECTION: 'section',\n  ARTICLE: 'article',\n  ASIDE: 'aside',\n  BUTTON: 'button',\n  FORM: 'form',\n  INPUT: 'input',\n  LABEL: 'label',\n  SELECT: 'select',\n  TEXTAREA: 'textarea',\n  SPAN: 'span',\n  DIV: 'div',\n  SVG: 'svg',\n  I: 'i',\n  P: 'p',\n  UL: 'ul',\n  OL: 'ol',\n  LI: 'li',\n  H1: 'h1',\n  H2: 'h2',\n  H3: 'h3',\n  H4: 'h4',\n  H5: 'h5',\n  H6: 'h6',\n  IMG: 'img',\n  VIDEO: 'video',\n  AUDIO: 'audio',\n  SOURCE: 'source',\n  TRACK: 'track',\n  CANVAS: 'canvas',\n  MAP: 'map',\n  MARK: 'mark',\n  DETAILS: 'details',\n  SUMMARY: 'summary',\n  PRE: 'pre',\n  BLOCKQUOTE: 'blockquote',\n  ADDRESS: 'address',\n  DIVIDER: 'hr',\n} as const;\n\nexport const EVENT_NAMES = {\n  CLICK: 'click',\n  CHANGE: 'change',\n  INPUT: 'input',\n  SUBMIT: 'submit',\n  KEYUP: 'keyup',\n  KEYDOWN: 'keydown',\n  SCROLL: 'scroll',\n  RESIZE: 'resize',\n  FOCUS: 'focus',\n  BLUR: 'blur',\n  CONTEXTMENU: 'contextmenu',\n  DOM_CONTENT_LOADED: 'DOMContentLoaded',\n  LOAD: 'load',\n  ERROR: 'error',\n  ANIMATIONSTART: 'animationstart',\n  ANIMATIONEND: 'animationend',\n  ANIMATIONITERATION: 'animationiteration',\n  TRANSITIONEND: 'transitionend',\n  POPSTATE: 'popstate',\n  HASHCHANGE: 'hashchange',\n  BEFOREUNLOAD: 'beforeunload',\n} as const;\n\nexport const IS_DISABLED = {\n  DISABLED: true,\n  ENABLED: false,\n} as const;\n","const PAGES_IDS = {\n  DEFAULT_PAGE: '',\n  GARAGE_PAGE: 'garage',\n  WINNERS_PAGE: 'winners',\n} as const;\n\nexport default PAGES_IDS;\n","import { EVENT_NAMES } from '../../../shared/types/enums.ts';\nimport PAGES_IDS from '../../../pages/types/enums.ts';\nimport type PageInterface from '../../../pages/types/interfaces.ts';\n\nexport default class RouterModel {\n  private static pages: Map<string, PageInterface>;\n\n  private static currentPage: PageInterface | undefined = undefined;\n\n  private static pathSegmentsToKeep = 2;\n\n  constructor() {\n    document.addEventListener(EVENT_NAMES.DOM_CONTENT_LOADED, () => {\n      const currentPath = window.location.pathname\n        .split('/')\n        .slice(RouterModel.pathSegmentsToKeep + 1)\n        .join('/');\n      RouterModel.navigateTo(currentPath);\n    });\n\n    window.addEventListener(EVENT_NAMES.POPSTATE, () => {\n      RouterModel.handleRequest(window.location.pathname);\n    });\n  }\n\n  public static setPages(pages: Map<string, PageInterface>): void {\n    RouterModel.pages = pages;\n  }\n\n  public static navigateTo(route: string): void {\n    this.handleRequest(route);\n\n    const pathnameApp = window.location.pathname\n      .split('/')\n      .slice(1, this.pathSegmentsToKeep + 1)\n      .join('/');\n    window.history.pushState({}, '', `/${pathnameApp}/${route}`);\n\n    // window.history.pushState(route, '', route);\n  }\n\n  private static handleRequest(path: string): void {\n    // if (!RouterModel.pages.has(path)) {\n    //   window.location.pathname = PAGES_IDS.DEFAULT_PAGE;\n    // }\n\n    const pathParts = path.split('/');\n    const hasRoute = RouterModel.pages.has(pathParts[0]);\n    if (!hasRoute) {\n      window.location.pathname = PAGES_IDS.DEFAULT_PAGE;\n      return;\n    }\n\n    RouterModel.currentPage?.hide();\n    RouterModel.currentPage = RouterModel.pages.get(path);\n    RouterModel.currentPage?.show();\n  }\n}\n","interface CreateBaseElement<T> {\n  tag: T;\n  cssClasses?: string[];\n  attributes?: Record<string, string>;\n  innerContent?: string;\n}\n\nconst createBaseElement = <T extends keyof HTMLElementTagNameMap>({\n  tag,\n  cssClasses = [],\n  attributes = {},\n  innerContent = '',\n}: CreateBaseElement<T>): HTMLElementTagNameMap[T] => {\n  const elem = document.createElement(tag);\n\n  elem.classList.add(...cssClasses);\n\n  Object.entries(attributes).forEach(([attrName, attrValue]) => {\n    elem.setAttribute(attrName, attrValue);\n  });\n\n  elem.innerHTML = innerContent;\n\n  return elem;\n};\n\nexport default createBaseElement;\n","import { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport APP_STYLES from './app.module.scss';\n\nclass AppView {\n  private pagesContainer: HTMLDivElement;\n\n  constructor() {\n    this.pagesContainer = this.createHTML();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.pagesContainer;\n  }\n\n  private createHTML(): HTMLDivElement {\n    this.pagesContainer = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [APP_STYLES['site-wrapper']],\n    });\n\n    return this.pagesContainer;\n  }\n}\n\nexport default AppView;\n","import type { State } from '../reducer/types/interfaces.ts';\n\nconst INITIAL_DATA: State = {\n  currentCars: [],\n  currentWinners: [],\n} as const;\n\nexport default INITIAL_DATA;\n","import type Reducer from '../Store/types/types.ts';\nimport type { State } from './types/interfaces.ts';\nimport type { Action } from './types/types.ts';\n\nexport const rootReducer: Reducer<State, Action> = (\n  state: State,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'getCurrentCars':\n      return {\n        ...state,\n        currentCars: [...state.currentCars, ...action.payload],\n      };\n    case 'getCurrentWinners':\n      return {\n        ...state,\n        currentWinners: [...state.currentWinners, ...action.payload],\n      };\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;\n","import type Reducer from '../types/types.ts';\nimport INITIAL_DATA from '../initialData.ts';\nimport type { State } from '../../reducer/types/interfaces';\nimport type { Action } from '../../reducer/types/types.ts';\nimport { rootReducer } from '../../reducer/rootReducer.ts';\n\nclass StoreModel {\n  private static listeners: Set<VoidFunction> = new Set();\n\n  private static rootReducer: Reducer<State, Action> = rootReducer;\n\n  private static state: State = INITIAL_DATA;\n\n  public static dispatch(action: Action): Action {\n    StoreModel.state = StoreModel.rootReducer(StoreModel.state, action);\n    StoreModel.listeners.forEach((listener) => {\n      listener();\n    });\n    return action;\n  }\n\n  public static getState(): State {\n    return structuredClone(StoreModel.state);\n  }\n\n  public static subscribe(listener: VoidFunction): VoidFunction {\n    StoreModel.listeners.add(listener);\n\n    return () => {\n      StoreModel.listeners.delete(listener);\n    };\n  }\n}\n\nexport default StoreModel;\n","import { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport GARAGE_PAGE_STYLES from './garagePage.module.scss';\n\nclass GaragePageView {\n  private parent: HTMLDivElement;\n\n  private garageTitle: HTMLHeadingElement;\n\n  private raceTracksList: HTMLUListElement;\n\n  private page: HTMLDivElement;\n\n  constructor(parent: HTMLDivElement) {\n    this.parent = parent;\n    this.garageTitle = this.createGarageTitle();\n    this.raceTracksList = this.createRaceTracksList();\n    this.page = this.createHTML();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.page;\n  }\n\n  public getGarageTitle(): HTMLHeadingElement {\n    return this.garageTitle;\n  }\n\n  public getRaceTracksList(): HTMLUListElement {\n    return this.raceTracksList;\n  }\n\n  private createGarageTitle(): HTMLHeadingElement {\n    this.garageTitle = createBaseElement({\n      tag: TAG_NAMES.H2,\n      cssClasses: [GARAGE_PAGE_STYLES.title],\n    });\n    return this.garageTitle;\n  }\n\n  private createRaceTracksList(): HTMLUListElement {\n    this.raceTracksList = createBaseElement({\n      tag: TAG_NAMES.UL,\n      cssClasses: [GARAGE_PAGE_STYLES['garage-page_list']],\n    });\n\n    return this.raceTracksList;\n  }\n\n  private createHTML(): HTMLDivElement {\n    this.page = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [GARAGE_PAGE_STYLES.page],\n    });\n\n    const garageBottomWrapper = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [GARAGE_PAGE_STYLES['bottom-wrapper']],\n    });\n\n    garageBottomWrapper.append(this.garageTitle, this.raceTracksList);\n    this.page.append(garageBottomWrapper);\n    this.parent.append(this.page);\n    return this.page;\n  }\n}\nexport default GaragePageView;\n","export const API_METHODS = {\n  GET: 'GET',\n  POST: 'POST',\n  PUT: 'PUT',\n  PATCH: 'PATCH',\n  DELETE: 'DELETE',\n} as const;\n\nexport const QUERY_PARAMS = {\n  PAGE: '_page',\n  LIMIT: '_limit',\n  SORT: '_sort',\n  ORDER: '_order',\n  ID: 'id',\n  STATUS: 'status',\n} as const;\n\nexport const QUERY_VALUES = {\n  ASC: 'asc',\n  DESC: 'desc',\n  WINS: 'wins',\n  TIME: 'time',\n  ID: 'id',\n  DEFAULT_PAGE: 1,\n  DEFAULT_CARS_LIMIT: 7,\n  DEFAULT_WINNERS_LIMIT: 10,\n} as const;\n\nexport const API_URLS = {\n  CARS: 'http://127.0.0.1:3000/garage/',\n  WINNERS: 'http://127.0.0.1:3000/winners/',\n  ENGINE: 'http://127.0.0.1:3000/engine/',\n} as const;\n\nexport const STATUS_CODES = {\n  OK: 200,\n  CREATED: 201,\n  NO_CONTENT: 204,\n  BAD_REQUEST: 400,\n  UNAUTHORIZED: 401,\n  FORBIDDEN: 403,\n  NOT_FOUND: 404,\n  INTERNAL_SERVER_ERROR: 500,\n  BAD_GATEWAY: 502,\n  SERVICE_UNAVAILABLE: 503,\n} as const;\n\nexport const API_ERRORS = {\n  INCORRECT_PARAMS: 'Incorrect params',\n};\n","import {\n  API_ERRORS,\n  API_METHODS,\n  API_URLS,\n  QUERY_PARAMS,\n  QUERY_VALUES,\n} from '../types/enums.ts';\nimport type {\n  CarInterface,\n  EngineCarDataInterface,\n  EngineCarDriveInterface,\n  EngineInterface,\n  WinnerInterface,\n  WinnersQueryParamsInterface,\n} from '../types/interfaces.ts';\n\nclass ApiModel {\n  public static async getCars(\n    params: Map<string, number>,\n  ): Promise<CarInterface[] | null> {\n    const pageParam =\n      params.get(QUERY_PARAMS.PAGE) ?? QUERY_VALUES.DEFAULT_PAGE;\n    const limitParam =\n      params.get(QUERY_PARAMS.LIMIT) ?? QUERY_VALUES.DEFAULT_CARS_LIMIT;\n    const url = `${API_URLS.CARS}?${QUERY_PARAMS.PAGE}=${pageParam}&${QUERY_PARAMS.LIMIT}=${limitParam}`;\n    return this.fetchData<CarInterface[]>(url, API_METHODS.GET);\n  }\n\n  public static async getCarById(id: string): Promise<CarInterface | null> {\n    const url = `${API_URLS.CARS}${id}`;\n    return this.fetchData<CarInterface>(url, API_METHODS.GET);\n  }\n\n  public static async getWinners(\n    params: Map<string, WinnersQueryParamsInterface>,\n  ): Promise<WinnerInterface[] | null> {\n    const pageParam = Number(\n      params.get(QUERY_PARAMS.PAGE) ?? QUERY_VALUES.DEFAULT_PAGE,\n    );\n    const limitParam = Number(\n      params.get(QUERY_PARAMS.LIMIT) ?? QUERY_VALUES.DEFAULT_WINNERS_LIMIT,\n    );\n    const sortParam = String(params.get(QUERY_PARAMS.SORT) ?? QUERY_VALUES.ID);\n    const orderParam = String(\n      params.get(QUERY_PARAMS.ORDER) ?? QUERY_VALUES.ASC,\n    );\n\n    const url = `${API_URLS.WINNERS}?${QUERY_PARAMS.PAGE}=${pageParam}&${QUERY_PARAMS.LIMIT}=${limitParam}&${QUERY_PARAMS.SORT}=${sortParam}&${QUERY_PARAMS.ORDER}=${orderParam}`;\n    return this.fetchData<WinnerInterface[]>(url, API_METHODS.GET);\n  }\n\n  public static async getWinnerById(\n    id: string,\n  ): Promise<WinnerInterface | null> {\n    const url = `${API_URLS.WINNERS}${id}`;\n    return this.fetchData<WinnerInterface>(url, API_METHODS.GET);\n  }\n\n  public static async createCar(\n    car: CarInterface,\n  ): Promise<CarInterface | null> {\n    const url = API_URLS.CARS;\n    return this.fetchData<CarInterface>(url, API_METHODS.POST, car);\n  }\n\n  public static async createWinner(\n    winner: WinnerInterface,\n  ): Promise<WinnerInterface | null> {\n    const url = API_URLS.WINNERS;\n    return this.fetchData<WinnerInterface>(url, API_METHODS.POST, winner);\n  }\n\n  public static async deleteCarById(id: string): Promise<CarInterface | null> {\n    const url = `${API_URLS.CARS}${id}`;\n    return this.fetchData<CarInterface>(url, API_METHODS.DELETE);\n  }\n\n  public static async deleteWinnerById(\n    id: string,\n  ): Promise<WinnerInterface | null> {\n    const url = `${API_URLS.WINNERS}${id}`;\n    return this.fetchData<WinnerInterface>(url, API_METHODS.DELETE);\n  }\n\n  public static async updateCarById(\n    id: string,\n    car: CarInterface,\n  ): Promise<CarInterface | null> {\n    const url = `${API_URLS.CARS}${id}`;\n    return this.fetchData<CarInterface>(url, API_METHODS.PUT, car);\n  }\n\n  public static async updateWinnerById(\n    id: string,\n    winner: WinnerInterface,\n  ): Promise<WinnerInterface | null> {\n    const url = `${API_URLS.WINNERS}${id}`;\n    return this.fetchData<WinnerInterface>(url, API_METHODS.PUT, winner);\n  }\n\n  public static async startCarEngine(\n    params: Map<string, EngineInterface>,\n  ): Promise<EngineCarDataInterface | null> {\n    const idParam = Number(params.get(QUERY_PARAMS.ID));\n    const statusParam = String(params.get(QUERY_PARAMS.STATUS));\n    if (!idParam || !statusParam) {\n      throw new Error(API_ERRORS.INCORRECT_PARAMS);\n    }\n    const url = `${API_URLS.ENGINE}?${QUERY_PARAMS.ID}=${idParam}/${QUERY_PARAMS.STATUS}=${statusParam}`;\n    return this.fetchData<EngineCarDataInterface>(url, API_METHODS.PATCH);\n  }\n\n  public static async stopCarEngine(\n    params: Map<string, EngineInterface>,\n  ): Promise<EngineCarDataInterface | null> {\n    const idParam = Number(params.get(QUERY_PARAMS.ID));\n    const statusParam = String(params.get(QUERY_PARAMS.STATUS));\n    if (!idParam || !statusParam) {\n      throw new Error(API_ERRORS.INCORRECT_PARAMS);\n    }\n    const url = `${API_URLS.ENGINE}?${QUERY_PARAMS.ID}=${idParam}/${QUERY_PARAMS.STATUS}=${statusParam}`;\n    return this.fetchData<EngineCarDataInterface>(url, API_METHODS.PATCH);\n  }\n\n  public static async driveCarEngine(\n    params: Map<string, EngineInterface>,\n  ): Promise<EngineCarDriveInterface | null> {\n    const idParam = Number(params.get(QUERY_PARAMS.ID));\n    const statusParam = String(params.get(QUERY_PARAMS.STATUS));\n    if (!idParam || !statusParam) {\n      throw new Error(API_ERRORS.INCORRECT_PARAMS);\n    }\n    const url = `${API_URLS.ENGINE}?${QUERY_PARAMS.ID}=${idParam}/${QUERY_PARAMS.STATUS}=${statusParam}`;\n    return this.fetchData<EngineCarDriveInterface>(url, API_METHODS.PATCH);\n  }\n\n  private static async fetchData<T>(\n    url: string,\n    method: string,\n    body?: T | null,\n  ): Promise<T | null> {\n    const data: T | null = await fetch(url, {\n      method,\n      body: body ? JSON.stringify(body) : null,\n    })\n      .then((response) => response.json())\n      .then((json: T) => json)\n      .catch(() => null);\n    return data;\n  }\n}\n\nexport default ApiModel;\n","const ACTIONS = {\n  GET_CURRENT_CARS: 'getCurrentCars',\n  GET_CURRENT_WINNERS: 'getCurrentWinners',\n} as const;\n\nexport default ACTIONS;\n","import { TAG_NAMES } from '../../types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport type ButtonInterface from '../types/interfaces.ts';\n\nclass ButtonView {\n  private button: HTMLButtonElement;\n\n  constructor(params: ButtonInterface) {\n    this.button = this.createHTML(params);\n  }\n\n  public getHTML(): HTMLButtonElement {\n    return this.button;\n  }\n\n  private createHTML(params: ButtonInterface): HTMLButtonElement {\n    this.button = createBaseElement({\n      tag: TAG_NAMES.BUTTON,\n      cssClasses: params.classes,\n      attributes: params.attrs,\n      innerContent: params.text,\n    });\n\n    if (params.action) {\n      this.button.addEventListener(params.action.key, params.action.value);\n    }\n\n    return this.button;\n  }\n}\n\nexport default ButtonView;\n","import { IS_DISABLED } from '../../types/enums.ts';\nimport type ButtonInterface from '../types/interfaces.ts';\nimport ButtonView from '../view/ButtonView.ts';\n\nclass ButtonModel {\n  private view: ButtonView;\n\n  private button: HTMLButtonElement;\n\n  constructor(params: ButtonInterface) {\n    this.view = new ButtonView(params);\n    this.button = this.view.getHTML();\n  }\n\n  public getHTML(): HTMLButtonElement {\n    return this.button;\n  }\n\n  public setDisabled(): void {\n    this.button.disabled = IS_DISABLED.DISABLED;\n  }\n\n  public setEnabled(): void {\n    this.button.disabled = IS_DISABLED.ENABLED;\n  }\n}\n\nexport default ButtonModel;\n","const RACE_TRACK_BUTTON_TEXT = {\n  SELECT_CAR: 'Select',\n  REMOVE_CAR: 'Remove',\n  START_ENGINE: 'A',\n  STOP_ENGINE: 'B',\n} as const;\n\nexport default RACE_TRACK_BUTTON_TEXT;\n","// import sprite from '../img/sprite.svg';\n\nexport const createSVGUse = (id: string): SVGUseElement => {\n  const use = document.createElementNS('http://www.w3.org/2000/svg', 'use');\n  use.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', `#${id}`);\n  return use;\n};\n\nexport const changeSVGFill = (svg: SVGSVGElement, color: string): void => {\n  svg.setAttribute('fill', color);\n};\n","import ButtonModel from '../../../shared/Button/model/ButtonModel.ts';\nimport type { CarInterface } from '../../../shared/Api/types/interfaces.ts';\nimport { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport RACE_TRACK_STYLES from './raceTrack.module.scss';\nimport RACE_TRACK_BUTTON_TEXT from '../types/enums.ts';\nimport { changeSVGFill, createSVGUse } from '../../../utils/createCarImg.ts';\n\nclass RaceTrackView {\n  private carData: CarInterface;\n\n  private selectCarButton: ButtonModel;\n\n  private removeCarButton: ButtonModel;\n\n  private nameCarSpan: HTMLSpanElement;\n\n  private startEngineButton: ButtonModel;\n\n  private stopEngineButton: ButtonModel;\n\n  private carSVG: SVGSVGElement;\n\n  private carSVGWrapper: HTMLDivElement;\n\n  private raceTrack: HTMLLIElement;\n\n  constructor(carData: CarInterface) {\n    this.carData = carData;\n    this.selectCarButton = this.createSelectCarButton();\n    this.removeCarButton = this.createRemoveCarButton();\n    this.nameCarSpan = this.createNameCarSpan();\n    this.startEngineButton = this.createStartEngineButton();\n    this.stopEngineButton = this.createStopEngineButton();\n    this.carSVG = this.createCarSVG();\n    this.carSVGWrapper = this.createCarSVGWrapper();\n    this.raceTrack = this.createHTML();\n  }\n\n  public getHTML(): HTMLLIElement {\n    return this.raceTrack;\n  }\n\n  private createSelectCarButton(): ButtonModel {\n    this.selectCarButton = new ButtonModel({\n      text: RACE_TRACK_BUTTON_TEXT.SELECT_CAR,\n      classes: [RACE_TRACK_STYLES['race-track_button']],\n    });\n\n    return this.selectCarButton;\n  }\n\n  private createRemoveCarButton(): ButtonModel {\n    this.removeCarButton = new ButtonModel({\n      text: RACE_TRACK_BUTTON_TEXT.REMOVE_CAR,\n      classes: [RACE_TRACK_STYLES['race-track_button']],\n    });\n\n    return this.removeCarButton;\n  }\n\n  private createNameCarSpan(): HTMLSpanElement {\n    this.nameCarSpan = createBaseElement({\n      tag: TAG_NAMES.SPAN,\n      cssClasses: [RACE_TRACK_STYLES['race-track__name-car']],\n      innerContent: this.carData.name,\n    });\n\n    return this.nameCarSpan;\n  }\n\n  private createStartEngineButton(): ButtonModel {\n    this.startEngineButton = new ButtonModel({\n      text: RACE_TRACK_BUTTON_TEXT.START_ENGINE,\n      classes: [RACE_TRACK_STYLES['race-track_button']],\n    });\n\n    return this.startEngineButton;\n  }\n\n  private createStopEngineButton(): ButtonModel {\n    this.stopEngineButton = new ButtonModel({\n      text: RACE_TRACK_BUTTON_TEXT.STOP_ENGINE,\n      classes: [RACE_TRACK_STYLES['race-track_button']],\n    });\n\n    return this.stopEngineButton;\n  }\n\n  private createCarSVG(): SVGSVGElement {\n    this.carSVG = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    this.carSVG.classList.add(RACE_TRACK_STYLES['race-track__car-img']);\n    this.carSVG.appendChild(createSVGUse('car'));\n    changeSVGFill(this.carSVG, this.carData.color);\n    return this.carSVG;\n  }\n\n  private createCarSVGWrapper(): HTMLDivElement {\n    this.carSVGWrapper = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [RACE_TRACK_STYLES['race-track__car-svg-wrapper']],\n    });\n\n    this.carSVGWrapper.append(this.carSVG);\n    return this.carSVGWrapper;\n  }\n\n  private createHTML(): HTMLLIElement {\n    this.raceTrack = createBaseElement({\n      tag: TAG_NAMES.LI,\n      cssClasses: [RACE_TRACK_STYLES['race-track']],\n    });\n\n    const topRaceTrackWrapper = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [RACE_TRACK_STYLES['race-track__top-wrapper']],\n    });\n\n    topRaceTrackWrapper.append(\n      this.selectCarButton.getHTML(),\n      this.removeCarButton.getHTML(),\n      this.nameCarSpan,\n    );\n\n    const bottomRaceTrackWrapper = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [RACE_TRACK_STYLES['race-track__bottom-wrapper']],\n    });\n\n    bottomRaceTrackWrapper.append(\n      this.startEngineButton.getHTML(),\n      this.stopEngineButton.getHTML(),\n      this.carSVGWrapper,\n    );\n\n    this.raceTrack.append(topRaceTrackWrapper, bottomRaceTrackWrapper);\n\n    return this.raceTrack;\n  }\n}\n\nexport default RaceTrackView;\n","import type { CarInterface } from '../../../shared/Api/types/interfaces.ts';\nimport RaceTrackView from '../view/RaceTrackView.ts';\n\nclass RaceTrackModel {\n  private carData: CarInterface;\n\n  private raceTrackView: RaceTrackView;\n\n  private raceTrack: HTMLLIElement;\n\n  constructor(carData: CarInterface) {\n    this.carData = carData;\n    this.raceTrackView = new RaceTrackView(this.carData);\n    this.raceTrack = this.raceTrackView.getHTML();\n  }\n\n  public getHTML(): HTMLLIElement {\n    return this.raceTrack;\n  }\n}\n\nexport default RaceTrackModel;\n","import StoreModel from '../../../shared/Store/model/StoreModel.ts';\nimport type PageInterface from '../../types/interfaces.ts';\nimport GaragePageView from '../view/GaragePageView.ts';\nimport GARAGE_PAGE_STYLES from '../view/garagePage.module.scss';\nimport ApiModel from '../../../shared/Api/model/ApiModel.ts';\nimport ACTIONS from '../../../shared/actions/types/enums.ts';\nimport type { CarInterface } from '../../../shared/Api/types/interfaces.ts';\nimport RaceTrackModel from '../../../entities/RaceTrack/model/RaceTrackModel.ts';\n\nclass GaragePageModel implements PageInterface {\n  private parent: HTMLDivElement;\n\n  private garagePageView: GaragePageView;\n\n  private page: HTMLDivElement;\n\n  constructor(parent: HTMLDivElement) {\n    this.parent = parent;\n    this.garagePageView = new GaragePageView(this.parent);\n    this.page = this.garagePageView.getHTML();\n    this.init();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.page;\n  }\n\n  public hide(): void {\n    this.page.classList.add(GARAGE_PAGE_STYLES['garage-page--hidden']);\n  }\n\n  public show(): void {\n    this.page.classList.remove(GARAGE_PAGE_STYLES['garage-page--hidden']);\n  }\n\n  private getInitialDataCars(): void {\n    ApiModel.getCars(new Map())\n      .then((data) => {\n        if (data) {\n          StoreModel.dispatch({\n            type: ACTIONS.GET_CURRENT_CARS,\n            payload: data,\n          });\n          this.drawRaceTracks(data);\n          console.log(StoreModel.getState());\n        }\n        return data;\n      })\n      .catch(() => {});\n  }\n\n  private drawRaceTracks(cars: CarInterface[]): void {\n    cars.forEach((car) => {\n      const raceTrack = new RaceTrackModel(car);\n      this.garagePageView.getRaceTracksList().append(raceTrack.getHTML());\n    });\n  }\n\n  private init(): void {\n    this.hide();\n    this.getInitialDataCars();\n  }\n}\n\nexport default GaragePageModel;\n","import { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport WINNERS_PAGE_STYLES from './winnersPage.module.scss';\n\nclass WinnersPageView {\n  private parent: HTMLDivElement;\n\n  private page: HTMLDivElement;\n\n  constructor(parent: HTMLDivElement) {\n    this.parent = parent;\n    this.page = this.createHTML();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.page;\n  }\n\n  private createHTML(): HTMLDivElement {\n    this.page = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [WINNERS_PAGE_STYLES['winners-page']],\n    });\n\n    const h1 = createBaseElement({\n      tag: TAG_NAMES.H1,\n      innerContent: 'Winners',\n    });\n    h1.style.color = 'white';\n    this.page.append(h1);\n    this.parent.append(this.page);\n\n    return this.page;\n  }\n}\nexport default WinnersPageView;\n","import type PageInterface from '../../types/interfaces.ts';\nimport WinnersPageView from '../view/WinnersPageView.ts';\nimport WINNERS_PAGE_STYLES from '../view/winnersPage.module.scss';\n\nclass WinnersPageModel implements PageInterface {\n  private parent: HTMLDivElement;\n\n  private winnersPageView: WinnersPageView;\n\n  private page: HTMLDivElement;\n\n  constructor(parent: HTMLDivElement) {\n    this.parent = parent;\n    this.winnersPageView = new WinnersPageView(this.parent);\n    this.page = this.winnersPageView.getHTML();\n    this.hide();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.page;\n  }\n\n  public hide(): void {\n    this.getHTML().classList.add(WINNERS_PAGE_STYLES['winners-page--hidden']);\n  }\n\n  public show(): void {\n    this.getHTML().classList.remove(\n      WINNERS_PAGE_STYLES['winners-page--hidden'],\n    );\n  }\n}\n\nexport default WinnersPageModel;\n","const HEADER_BUTTON_TEXT = {\n  GARAGE_BTN: 'To winners',\n  WINNERS_BTN: 'To garage',\n} as const;\n\nexport default HEADER_BUTTON_TEXT;\n","import ButtonModel from '../../../shared/Button/model/ButtonModel.ts';\nimport { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport HEADER_BUTTON_TEXT from '../types/enums.ts';\nimport HEADER_STYLES from './header.module.scss';\n\nclass HeaderView {\n  private garageButton: ButtonModel;\n\n  private winnersButton: ButtonModel;\n\n  private header: HTMLElement;\n\n  constructor() {\n    this.garageButton = this.createGarageButton();\n    this.winnersButton = this.createWinnersButton();\n    this.header = this.createHTML();\n  }\n\n  public getHTML(): HTMLElement {\n    return this.header;\n  }\n\n  public getGarageButton(): ButtonModel {\n    return this.garageButton;\n  }\n\n  public getWinnersButton(): ButtonModel {\n    return this.winnersButton;\n  }\n\n  private createGarageButton(): ButtonModel {\n    this.garageButton = new ButtonModel({\n      text: HEADER_BUTTON_TEXT.GARAGE_BTN,\n      classes: [HEADER_STYLES['header__garage-button']],\n    });\n\n    return this.garageButton;\n  }\n\n  private createWinnersButton(): ButtonModel {\n    this.winnersButton = new ButtonModel({\n      text: HEADER_BUTTON_TEXT.WINNERS_BTN,\n      classes: [HEADER_STYLES['header__winners-button']],\n    });\n\n    return this.winnersButton;\n  }\n\n  private createHTML(): HTMLElement {\n    this.header = createBaseElement({\n      tag: TAG_NAMES.HEADER,\n      cssClasses: [HEADER_STYLES.header],\n    });\n\n    this.header.append(\n      this.winnersButton.getHTML(),\n      this.garageButton.getHTML(),\n    );\n    return this.header;\n  }\n}\n\nexport default HeaderView;\n","import PAGES_IDS from '../../../pages/types/enums.ts';\nimport RouterModel from '../../../app/Router/model/RouterModel.ts';\nimport { EVENT_NAMES } from '../../../shared/types/enums.ts';\nimport HeaderView from '../view/HeaderView.ts';\n\nclass HeaderModel {\n  private headerView: HeaderView;\n\n  private header: HTMLElement;\n\n  constructor() {\n    this.headerView = new HeaderView();\n    this.header = this.headerView.getHTML();\n    this.setHandlerToButtons();\n  }\n\n  public getHTML(): HTMLElement {\n    return this.header;\n  }\n\n  private setHandlerToButtons(): void {\n    const garageButton = this.headerView.getGarageButton().getHTML();\n    const winnersButton = this.headerView.getWinnersButton().getHTML();\n\n    garageButton.addEventListener(EVENT_NAMES.CLICK, () => {\n      RouterModel.navigateTo(PAGES_IDS.WINNERS_PAGE);\n    });\n\n    winnersButton.addEventListener(EVENT_NAMES.CLICK, () => {\n      RouterModel.navigateTo(PAGES_IDS.GARAGE_PAGE);\n    });\n  }\n}\n\nexport default HeaderModel;\n","import RouterModel from '../../Router/model/RouterModel.ts';\nimport PAGES_IDS from '../../../pages/types/enums.ts';\nimport AppView from '../view/AppView.ts';\nimport GaragePageModel from '../../../pages/GaragePage/model/GaragePageModel.ts';\nimport type PageInterface from '../../../pages/types/interfaces.ts';\nimport WinnersPageModel from '../../../pages/WinnersPage/model/WinnersPageModel.ts';\nimport HeaderModel from '../../../widgets/Header/model/HeaderModel.ts';\n\nclass AppModel {\n  private appView: AppView;\n\n  private parent: HTMLDivElement;\n\n  constructor() {\n    this.appView = new AppView();\n    this.parent = this.appView.getHTML();\n    RouterModel.setPages(this.initPages());\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.parent;\n  }\n\n  private initPages(): Map<string, PageInterface> {\n    const header = new HeaderModel();\n    const garagePage = new GaragePageModel(this.parent);\n    const winnersPage = new WinnersPageModel(this.parent);\n    const pages: Map<string, PageInterface> = new Map(\n      Object.entries({\n        [PAGES_IDS.DEFAULT_PAGE]: garagePage,\n        [PAGES_IDS.GARAGE_PAGE]: garagePage,\n        [PAGES_IDS.WINNERS_PAGE]: winnersPage,\n      }),\n    );\n    this.parent.prepend(header.getHTML());\n    return pages;\n  }\n}\n\nexport default AppModel;\n","import AppModel from './app/App/model/AppModel.ts';\nimport './index.scss';\n\nconst myApp = new AppModel();\ndocument.body.append(myApp.getHTML());\n"],"names":["header"],"mappings":"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"}