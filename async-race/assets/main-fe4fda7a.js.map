{"version":3,"file":"main-fe4fda7a.js","sources":["../../src/shared/types/enums.ts","../../src/pages/types/enums.ts","../../src/app/Router/types/enums.ts","../../src/shared/Mediator/model/MediatorModel.ts","../../src/shared/Mediator/types/enums.ts","../../src/app/Router/model/RouterModel.ts","../../src/utils/createBaseElement.ts","../../src/app/App/view/AppView.ts","../../src/shared/Api/types/enums.ts","../../src/shared/Store/initialData.ts","../../src/shared/Store/reducer/rootReducer.ts","../../src/shared/Store/model/StoreModel.ts","../../src/shared/Button/view/ButtonView.ts","../../src/shared/Button/model/ButtonModel.ts","../../src/pages/GaragePage/view/GaragePageView.ts","../../src/shared/Api/model/ApiModel.ts","../../src/shared/Store/actions/types/enums.ts","../../src/entities/RaceTrack/types/enums.ts","../../src/utils/createCarImg.ts","../../src/entities/RaceTrack/view/RaceTrackView.ts","../../src/shared/Loader/view/LoaderView.ts","../../src/shared/Loader/model/LoaderModel.ts","../../src/utils/isWinner.ts","../../src/entities/RaceTrack/model/RaceTrackModel.ts","../../src/shared/Input/view/InputView.ts","../../src/shared/Input/model/InputModel.ts","../../src/shared/Input/types/enums.ts","../../src/shared/Button/types/enums.ts","../../src/widgets/CreateCarForm/view/CreateCarFormView.ts","../../src/utils/formatText.ts","../../src/widgets/CreateCarForm/model/CreateCarFormModel.ts","../../src/features/PreviewCar/view/PreviewCarView.ts","../../src/features/PreviewCar/model/PreviewCarModel.ts","../../src/widgets/ChangeCarForm/view/ChangeCarFormView.ts","../../src/widgets/ChangeCarForm/model/ChangeCarFormModel.ts","../../src/utils/getRandomIndex.ts","../../src/utils/createRandomDataCars.ts","../../src/features/Pagination/view/PaginationView.ts","../../src/shared/Store/types/enums.ts","../../src/features/Pagination/model/PaginationModel.ts","../../src/pages/GaragePage/model/GaragePageModel.ts","../../src/pages/WinnersPage/view/WinnersPageView.ts","../../src/pages/WinnersPage/model/WinnersPageModel.ts","../../src/widgets/Header/types/enums.ts","../../src/widgets/Header/view/HeaderView.ts","../../src/widgets/Header/model/HeaderModel.ts","../../src/app/App/model/AppModel.ts","../../src/index.ts"],"sourcesContent":["export const TAG_NAMES = {\n  MAIN: 'main',\n  HEADER: 'header',\n  FOOTER: 'footer',\n  NAV: 'nav',\n  SECTION: 'section',\n  ARTICLE: 'article',\n  ASIDE: 'aside',\n  BUTTON: 'button',\n  FORM: 'form',\n  INPUT: 'input',\n  LABEL: 'label',\n  SELECT: 'select',\n  TEXTAREA: 'textarea',\n  SPAN: 'span',\n  DIV: 'div',\n  SVG: 'svg',\n  I: 'i',\n  P: 'p',\n  UL: 'ul',\n  OL: 'ol',\n  LI: 'li',\n  H1: 'h1',\n  H2: 'h2',\n  H3: 'h3',\n  H4: 'h4',\n  H5: 'h5',\n  H6: 'h6',\n  IMG: 'img',\n  VIDEO: 'video',\n  AUDIO: 'audio',\n  SOURCE: 'source',\n  TRACK: 'track',\n  CANVAS: 'canvas',\n  MAP: 'map',\n  MARK: 'mark',\n  DETAILS: 'details',\n  SUMMARY: 'summary',\n  PRE: 'pre',\n  BLOCKQUOTE: 'blockquote',\n  ADDRESS: 'address',\n  DIVIDER: 'hr',\n  TABLE: 'table',\n  THEAD: 'thead',\n  TBODY: 'tbody',\n  TFOOT: 'tfoot',\n  TR: 'tr',\n  TD: 'td',\n  TH: 'th',\n} as const;\n\nexport const EVENT_NAMES = {\n  CLICK: 'click',\n  CHANGE: 'change',\n  INPUT: 'input',\n  SUBMIT: 'submit',\n  KEYUP: 'keyup',\n  KEYDOWN: 'keydown',\n  SCROLL: 'scroll',\n  RESIZE: 'resize',\n  FOCUS: 'focus',\n  BLUR: 'blur',\n  CONTEXTMENU: 'contextmenu',\n  DOM_CONTENT_LOADED: 'DOMContentLoaded',\n  LOAD: 'load',\n  ERROR: 'error',\n  ANIMATIONSTART: 'animationstart',\n  ANIMATIONEND: 'animationend',\n  ANIMATIONITERATION: 'animationiteration',\n  TRANSITIONEND: 'transitionend',\n  POPSTATE: 'popstate',\n  HASHCHANGE: 'hashchange',\n  BEFOREUNLOAD: 'beforeunload',\n} as const;\n\nexport const IS_DISABLED = {\n  DISABLED: true,\n  ENABLED: false,\n} as const;\n","const PAGES_IDS = {\n  DEFAULT_PAGE: '',\n  GARAGE_PAGE: 'garage',\n  WINNERS_PAGE: 'winners',\n} as const;\n\nexport const MORE_COUNT_CARS = 100;\n\nexport const GARAGE_BUTTONS_TEXT = {\n  START_RACE: 'Start race',\n  RESET_RACE: 'Reset race',\n  CREATE_MORE_CARS: 'Create 100 cars',\n} as const;\n\nexport const WINNERS_SVG_DETAILS = {\n  SVG_URL: 'http://www.w3.org/2000/svg',\n  CAR_ID: 'car',\n} as const;\n\nexport const THEAD_TD_IDS = ['id', 'car', 'name', 'wins', 'time'];\n\nexport default PAGES_IDS;\n","const ROUTER_DETAILS = {\n  DEFAULT_SEGMENT: '/',\n  NEXT_SEGMENT: 1,\n  PATH_SEGMENTS_TO_KEEP: 2,\n  CURRENT_SEGMENT: 0,\n} as const;\n\nexport default ROUTER_DETAILS;\n","import type ListenerCallback from '../types/types.ts';\n\nclass MediatorModel<T> {\n  private static mediator = new MediatorModel();\n\n  private listeners: Map<string, Array<ListenerCallback<T>>> = new Map();\n\n  public static getInstance(): MediatorModel<unknown> {\n    return MediatorModel.mediator;\n  }\n\n  public subscribe(eventName: string, listener: ListenerCallback<T>): void {\n    if (this.listeners.has(eventName)) {\n      const listeners = this.listeners.get(eventName);\n      listeners?.push(listener);\n    } else {\n      const newListeners = [];\n      newListeners.push(listener);\n      this.listeners.set(eventName, newListeners);\n    }\n  }\n\n  public notify(eventName: string, params: T): void {\n    const eventListeners = this.listeners.get(eventName);\n    if (eventListeners) {\n      eventListeners.forEach((listener) => listener(params));\n    }\n  }\n\n  public unsubscribe(eventName: string, listener: ListenerCallback<T>): void {\n    if (this.listeners.has(eventName)) {\n      const listeners = this.listeners.get(eventName);\n      const index = listeners?.indexOf(listener);\n\n      if (index && index !== -1) {\n        listeners?.splice(index, 1);\n      }\n    }\n  }\n}\n\nexport default MediatorModel;\n","const MEDIATOR_EVENTS = {\n  CHANGE_PAGE: 'changePage',\n  GET_CURRENT_CARS: 'getCurrentCars',\n  GET_CURRENT_WINNERS: 'getCurrentWinners',\n  DELETE_CAR: 'deleteCar',\n  DELETE_WINNER: 'deleteWinner',\n  CREATE_CAR: 'createCar',\n  CREATE_WINNER: 'createWinner',\n  CREATE_MORE_CARS: 'createMoreCars',\n  SELECT_CAR: 'selectCar',\n  UPDATE_CAR: 'updateCar',\n  CHANGE_COLOR_PREVIEW_CAR: 'changeColorPreviewCar',\n  CHANGE_TOTAL_GARAGE_PAGES: 'changeTotalGaragePages',\n  CHANGE_NAME_PREVIEW_CAR: 'changeNamePreviewCar',\n  CHANGE_GARAGE_PAGE: 'changeGaragePage',\n  CHANGE_WINNERS_PAGE: 'changeWinnersPage',\n  START_RACE: 'startRace',\n  RESET_RACE: 'resetRace',\n  NEW_WINNER: 'newWinner',\n  CAR_BROKEN: 'carBroken',\n  RESET_CURRENT_CAR: 'resetCurrentCar',\n  EMPTY_RACE: 'emptyRace',\n  SINGLE_RACE_START: 'singleRaceStart',\n  SINGLE_RACE_RESET: 'singleRaceReset',\n  DRAW_NEW_WINNER: 'drawNewWinner',\n} as const;\n\nexport default MEDIATOR_EVENTS;\n","import { EVENT_NAMES } from '../../../shared/types/enums.ts';\nimport PAGES_IDS from '../../../pages/types/enums.ts';\nimport type PageInterface from '../../../pages/types/interfaces.ts';\nimport ROUTER_DETAILS from '../types/enums.ts';\nimport MediatorModel from '../../../shared/Mediator/model/MediatorModel.ts';\nimport MEDIATOR_EVENTS from '../../../shared/Mediator/types/enums.ts';\n\nexport default class RouterModel {\n  private pages: Map<string, PageInterface>;\n\n  private singletonMediator: MediatorModel<unknown> =\n    MediatorModel.getInstance();\n\n  constructor(pages: Map<string, PageInterface>) {\n    this.pages = pages;\n    document.addEventListener(EVENT_NAMES.DOM_CONTENT_LOADED, () => {\n      const currentPath = window.location.pathname\n        .split(ROUTER_DETAILS.DEFAULT_SEGMENT)\n        .slice(\n          ROUTER_DETAILS.PATH_SEGMENTS_TO_KEEP + ROUTER_DETAILS.NEXT_SEGMENT,\n        )\n        .join(ROUTER_DETAILS.DEFAULT_SEGMENT);\n      this.navigateTo(currentPath);\n    });\n\n    window.addEventListener(EVENT_NAMES.POPSTATE, () => {\n      const currentPath = window.location.pathname\n        .split(ROUTER_DETAILS.DEFAULT_SEGMENT)\n        .slice(\n          ROUTER_DETAILS.PATH_SEGMENTS_TO_KEEP + ROUTER_DETAILS.NEXT_SEGMENT,\n        )\n        .join(ROUTER_DETAILS.DEFAULT_SEGMENT);\n      this.handleRequest(currentPath);\n    });\n  }\n\n  public navigateTo(route: string): void {\n    this.handleRequest(route);\n\n    const pathnameApp = window.location.pathname\n      .split(ROUTER_DETAILS.DEFAULT_SEGMENT)\n      .slice(\n        ROUTER_DETAILS.NEXT_SEGMENT,\n        ROUTER_DETAILS.PATH_SEGMENTS_TO_KEEP + ROUTER_DETAILS.NEXT_SEGMENT,\n      )\n      .join(ROUTER_DETAILS.DEFAULT_SEGMENT);\n    const url = `/${pathnameApp}/${route}`;\n    window.history.pushState({}, '', url);\n  }\n\n  private handleRequest(path: string): void {\n    const pathParts = path.split(ROUTER_DETAILS.DEFAULT_SEGMENT);\n    const hasRoute = this.pages.has(pathParts[ROUTER_DETAILS.CURRENT_SEGMENT]);\n    if (!hasRoute) {\n      window.location.pathname = PAGES_IDS.DEFAULT_PAGE;\n      return;\n    }\n\n    this.singletonMediator.notify(MEDIATOR_EVENTS.CHANGE_PAGE, '');\n  }\n}\n","interface CreateBaseElement<T> {\n  tag: T;\n  cssClasses?: string[];\n  attributes?: Record<string, string>;\n  innerContent?: string;\n}\n\nconst createBaseElement = <T extends keyof HTMLElementTagNameMap>({\n  tag,\n  cssClasses = [],\n  attributes = {},\n  innerContent = '',\n}: CreateBaseElement<T>): HTMLElementTagNameMap[T] => {\n  const elem = document.createElement(tag);\n\n  elem.classList.add(...cssClasses);\n\n  Object.entries(attributes).forEach(([attrName, attrValue]) => {\n    elem.setAttribute(attrName, attrValue);\n  });\n\n  elem.innerHTML = innerContent;\n\n  return elem;\n};\n\nexport default createBaseElement;\n","import { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport APP_STYLES from './app.module.scss';\n\nclass AppView {\n  private pagesContainer: HTMLDivElement;\n\n  constructor() {\n    this.pagesContainer = this.createHTML();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.pagesContainer;\n  }\n\n  private createHTML(): HTMLDivElement {\n    this.pagesContainer = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [APP_STYLES['site-wrapper']],\n    });\n\n    return this.pagesContainer;\n  }\n}\n\nexport default AppView;\n","export const API_METHODS = {\n  GET: 'GET',\n  POST: 'POST',\n  PUT: 'PUT',\n  PATCH: 'PATCH',\n  DELETE: 'DELETE',\n} as const;\n\nexport const QUERY_PARAMS = {\n  PAGE: '_page',\n  LIMIT: '_limit',\n  SORT: '_sort',\n  ORDER: '_order',\n  ID: 'id',\n  STATUS: 'status',\n} as const;\n\nexport const QUERY_VALUES = {\n  ASC: 'ASC',\n  DESC: 'DESC',\n  WINS: 'wins',\n  TIME: 'time',\n  ID: 'id',\n  DEFAULT_PAGE: 1,\n  DEFAULT_CARS_LIMIT: 7,\n  DEFAULT_WINNERS_LIMIT: 10,\n  NO_CARS_LIMIT: 0,\n  NO_WINNERS_LIMIT: 0,\n  STARTED: 'started',\n  STOPPED: 'stopped',\n  DRIVE: 'drive',\n};\n\nexport const API_HEADERS = {\n  CONTENT_TYPE: 'Content-Type',\n  APPLICATION_JSON: 'application/json',\n} as const;\n\nexport const API_URLS = {\n  CARS: 'http://127.0.0.1:3000/garage/',\n  WINNERS: 'http://127.0.0.1:3000/winners/',\n  ENGINE: 'http://127.0.0.1:3000/engine/',\n} as const;\n\nexport const STATUS_CODES = {\n  OK: 200,\n  CREATED: 201,\n  NO_CONTENT: 204,\n  BAD_REQUEST: 400,\n  UNAUTHORIZED: 401,\n  FORBIDDEN: 403,\n  NOT_FOUND: 404,\n  INTERNAL_SERVER_ERROR: 500,\n  BAD_GATEWAY: 502,\n  SERVICE_UNAVAILABLE: 503,\n} as const;\n\nexport const API_ERRORS = {\n  INCORRECT_PARAMS: 'Incorrect params',\n};\n","import type { State } from './reducer/types/interfaces.ts';\n\nconst INITIAL_DATA: State = {\n  cars: [],\n  winners: [],\n  garagePage: 1,\n  totalGaragePages: 1,\n  winnersPage: 1,\n  totalWinnersPages: 1,\n} as const;\n\nexport default INITIAL_DATA;\n","/* eslint-disable max-lines-per-function */\nimport type Reducer from '../types/types.ts';\nimport type { State } from './types/interfaces.ts';\nimport type { Action } from './types/types.ts';\n\nexport const rootReducer: Reducer<State, Action> = (\n  state: State,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'getCars':\n      return {\n        ...state,\n        cars: [...action.payload],\n      };\n    case 'getWinners':\n      return {\n        ...state,\n        winners: [...state.winners, ...action.payload],\n      };\n    case 'addNewCar':\n      return {\n        ...state,\n        cars: [...state.cars, ...action.payload],\n      };\n    case 'deleteCar':\n      return {\n        ...state,\n        cars: [...action.payload],\n      };\n    case 'setTotalGaragePages':\n      return {\n        ...state,\n        totalGaragePages: action.payload,\n      };\n    case 'changeGaragePage':\n      return {\n        ...state,\n        garagePage: action.payload,\n      };\n    case 'setTotalWinnersPages':\n      return {\n        ...state,\n        totalWinnersPages: action.payload,\n      };\n    case 'changeWinnersPage':\n      return {\n        ...state,\n        winnersPage: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;\n","import type Reducer from '../types/types.ts';\nimport INITIAL_DATA from '../initialData.ts';\nimport type { State } from '../reducer/types/interfaces.ts';\nimport type { Action } from '../reducer/types/types.ts';\nimport { rootReducer } from '../reducer/rootReducer.ts';\n\nclass StoreModel {\n  private static listeners: Map<string, VoidFunction> = new Map();\n\n  private static rootReducer: Reducer<State, Action> = rootReducer;\n\n  private static state: State = INITIAL_DATA;\n\n  public static dispatch(action: Action): Action {\n    StoreModel.state = StoreModel.rootReducer(StoreModel.state, action);\n\n    StoreModel.listeners.forEach((_, key) => {\n      if (key in StoreModel.state) {\n        const currentListener = StoreModel.listeners.get(key);\n        if (currentListener) {\n          currentListener();\n        }\n      }\n    });\n\n    return action;\n  }\n\n  public static getState(): State {\n    return structuredClone(StoreModel.state);\n  }\n\n  public static subscribe(key: string, listener: VoidFunction): VoidFunction {\n    StoreModel.listeners.set(key, listener);\n\n    return () => {\n      StoreModel.listeners.delete(key);\n    };\n  }\n}\n\nexport default StoreModel;\n","import { TAG_NAMES } from '../../types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport type ButtonInterface from '../types/interfaces.ts';\n\nclass ButtonView {\n  private button: HTMLButtonElement;\n\n  constructor(params: ButtonInterface) {\n    this.button = this.createHTML(params);\n  }\n\n  public getHTML(): HTMLButtonElement {\n    return this.button;\n  }\n\n  private createHTML(params: ButtonInterface): HTMLButtonElement {\n    this.button = createBaseElement({\n      tag: TAG_NAMES.BUTTON,\n      cssClasses: params.classes,\n      attributes: params.attrs,\n      innerContent: params.text,\n    });\n\n    if (params.action) {\n      this.button.addEventListener(params.action.key, params.action.value);\n    }\n\n    return this.button;\n  }\n}\n\nexport default ButtonView;\n","import { IS_DISABLED } from '../../types/enums.ts';\nimport type ButtonInterface from '../types/interfaces.ts';\nimport ButtonView from '../view/ButtonView.ts';\n\nclass ButtonModel {\n  private view: ButtonView;\n\n  constructor(params: ButtonInterface) {\n    this.view = new ButtonView(params);\n  }\n\n  public getHTML(): HTMLButtonElement {\n    return this.view.getHTML();\n  }\n\n  public setDisabled(): void {\n    this.view.getHTML().disabled = IS_DISABLED.DISABLED;\n  }\n\n  public setEnabled(): void {\n    this.view.getHTML().disabled = IS_DISABLED.ENABLED;\n  }\n}\n\nexport default ButtonModel;\n","import { GARAGE_BUTTONS_TEXT } from '../../types/enums.ts';\nimport ButtonModel from '../../../shared/Button/model/ButtonModel.ts';\nimport { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport GARAGE_PAGE_STYLES from './garagePage.module.scss';\n\nclass GaragePageView {\n  private parent: HTMLDivElement;\n\n  private raceTrackTopWrapper: HTMLDivElement;\n\n  private raceTrackBottomWrapper: HTMLDivElement;\n\n  private garageTitle: HTMLHeadingElement;\n\n  private moreCarsButton: ButtonModel;\n\n  private raceTracksList: HTMLUListElement;\n\n  private startRaceButton: ButtonModel;\n\n  private resetRaceButton: ButtonModel;\n\n  private raceResult: HTMLDivElement;\n\n  private page: HTMLDivElement;\n\n  constructor(parent: HTMLDivElement) {\n    this.parent = parent;\n    this.moreCarsButton = this.createMoreCarsButton();\n    this.startRaceButton = this.createStartRaceButton();\n    this.resetRaceButton = this.createResetRaceButton();\n    this.raceTrackTopWrapper = this.createRaceTrackTopWrapper();\n    this.garageTitle = this.createGarageTitle();\n    this.raceResult = this.createRaceResult();\n    this.raceTracksList = this.createRaceTracksList();\n    this.raceTrackBottomWrapper = this.createRaceTrackBottomWrapper();\n    this.page = this.createHTML();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.page;\n  }\n\n  public getRaceTrackTopWrapper(): HTMLDivElement {\n    return this.raceTrackTopWrapper;\n  }\n\n  public getRaceTrackBottomWrapper(): HTMLDivElement {\n    return this.raceTrackBottomWrapper;\n  }\n\n  public clearRaceTracksList(): void {\n    this.raceTracksList.innerHTML = '';\n  }\n\n  public getGarageTitle(): HTMLHeadingElement {\n    return this.garageTitle;\n  }\n\n  public getRaceTracksList(): HTMLUListElement {\n    return this.raceTracksList;\n  }\n\n  public getMoreCarsButton(): ButtonModel {\n    return this.moreCarsButton;\n  }\n\n  public getStartRaceButton(): ButtonModel {\n    return this.startRaceButton;\n  }\n\n  public getResetRaceButton(): ButtonModel {\n    return this.resetRaceButton;\n  }\n\n  public getRaceResult(): HTMLDivElement {\n    return this.raceResult;\n  }\n\n  private createGarageTitle(): HTMLHeadingElement {\n    this.garageTitle = createBaseElement({\n      tag: TAG_NAMES.H2,\n      cssClasses: [GARAGE_PAGE_STYLES['garage-page_title']],\n    });\n    return this.garageTitle;\n  }\n\n  private createRaceTracksList(): HTMLUListElement {\n    this.raceTracksList = createBaseElement({\n      tag: TAG_NAMES.UL,\n      cssClasses: [GARAGE_PAGE_STYLES['garage-page_list']],\n    });\n\n    return this.raceTracksList;\n  }\n\n  private createMoreCarsButton(): ButtonModel {\n    this.moreCarsButton = new ButtonModel({\n      text: GARAGE_BUTTONS_TEXT.CREATE_MORE_CARS,\n      classes: [GARAGE_PAGE_STYLES['garage-page_more-button']],\n    });\n\n    return this.moreCarsButton;\n  }\n\n  private createRaceTrackTopWrapper(): HTMLDivElement {\n    this.raceTrackTopWrapper = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [GARAGE_PAGE_STYLES['garage-page_top-wrapper']],\n    });\n\n    this.raceTrackTopWrapper.append(\n      this.moreCarsButton.getHTML(),\n      this.startRaceButton.getHTML(),\n      this.resetRaceButton.getHTML(),\n    );\n    return this.raceTrackTopWrapper;\n  }\n\n  private createRaceTrackBottomWrapper(): HTMLDivElement {\n    this.raceTrackBottomWrapper = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [GARAGE_PAGE_STYLES['garage-page_bottom-wrapper']],\n    });\n    return this.raceTrackBottomWrapper;\n  }\n\n  private createStartRaceButton(): ButtonModel {\n    this.startRaceButton = new ButtonModel({\n      text: GARAGE_BUTTONS_TEXT.START_RACE,\n      classes: [\n        GARAGE_PAGE_STYLES['garage-page_race-button'],\n        GARAGE_PAGE_STYLES['garage-page_race-button_start'],\n      ],\n    });\n\n    return this.startRaceButton;\n  }\n\n  private createResetRaceButton(): ButtonModel {\n    this.resetRaceButton = new ButtonModel({\n      text: GARAGE_BUTTONS_TEXT.RESET_RACE,\n      classes: [\n        GARAGE_PAGE_STYLES['garage-page_race-button'],\n        GARAGE_PAGE_STYLES['garage-page_race-button_reset'],\n      ],\n    });\n\n    return this.resetRaceButton;\n  }\n\n  private createRaceResult(): HTMLDivElement {\n    this.raceResult = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [GARAGE_PAGE_STYLES['garage-page_race-result']],\n    });\n\n    return this.raceResult;\n  }\n\n  private createHTML(): HTMLDivElement {\n    this.page = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [GARAGE_PAGE_STYLES['garage-page']],\n    });\n\n    this.raceTrackBottomWrapper = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [GARAGE_PAGE_STYLES['garage-page_bottom-wrapper']],\n    });\n\n    this.raceTrackBottomWrapper.append(\n      this.garageTitle,\n      this.raceTracksList,\n      this.raceResult,\n    );\n    this.page.append(this.raceTrackTopWrapper, this.raceTrackBottomWrapper);\n    this.parent.append(this.page);\n    return this.page;\n  }\n}\nexport default GaragePageView;\n","import {\n  API_ERRORS,\n  API_METHODS,\n  API_HEADERS,\n  API_URLS,\n  QUERY_PARAMS,\n  QUERY_VALUES,\n  STATUS_CODES,\n} from '../types/enums.ts';\nimport type {\n  CarInterface,\n  EngineCarDataInterface,\n  EngineCarDriveInterface,\n  WinnerInterface,\n} from '../types/interfaces.ts';\n\nclass ApiModel {\n  public static async getCars(\n    params: Map<string, number>,\n  ): Promise<CarInterface[] | undefined> {\n    const pageParam = params.get(QUERY_PARAMS.PAGE);\n    const limitParam = params.get(QUERY_PARAMS.LIMIT);\n\n    let url = `${API_URLS.CARS}`;\n    if (pageParam && limitParam) {\n      url = `${API_URLS.CARS}?${QUERY_PARAMS.PAGE}=${pageParam}&${QUERY_PARAMS.LIMIT}=${limitParam}`;\n    }\n    return this.fetchData<CarInterface[]>(url, API_METHODS.GET);\n  }\n\n  public static async getCarById(\n    id: number,\n  ): Promise<CarInterface | undefined> {\n    const url = `${API_URLS.CARS}${id}`;\n    return this.fetchData<CarInterface>(url, API_METHODS.GET);\n  }\n\n  public static async getWinners(\n    params: Map<string, number | string>,\n  ): Promise<WinnerInterface[] | undefined> {\n    const pageParam = params.get(QUERY_PARAMS.PAGE);\n    const limitParam = params.get(QUERY_PARAMS.LIMIT);\n    const sortParam = params.get(QUERY_PARAMS.SORT) ?? QUERY_VALUES.ID;\n    const orderParam = params.get(QUERY_PARAMS.ORDER) ?? QUERY_VALUES.ASC;\n\n    let url = `${API_URLS.WINNERS}`;\n\n    if (pageParam && limitParam) {\n      url = `${API_URLS.WINNERS}?${QUERY_PARAMS.PAGE}=${pageParam}&${QUERY_PARAMS.LIMIT}=${limitParam}&${QUERY_PARAMS.SORT}=${sortParam}&${QUERY_PARAMS.ORDER}=${orderParam}`;\n    }\n\n    return this.fetchData<WinnerInterface[]>(url, API_METHODS.GET);\n  }\n\n  public static async getWinnerById(\n    id: number,\n  ): Promise<WinnerInterface | undefined> {\n    const url = `${API_URLS.WINNERS}${id}`;\n    return this.fetchData<WinnerInterface>(url, API_METHODS.GET);\n  }\n\n  public static async createCar(\n    car: CarInterface,\n  ): Promise<CarInterface | undefined> {\n    const url = API_URLS.CARS;\n    return this.fetchData<CarInterface>(url, API_METHODS.POST, car);\n  }\n\n  public static async createWinner(\n    winner: WinnerInterface,\n  ): Promise<WinnerInterface | undefined> {\n    const url = API_URLS.WINNERS;\n    return this.fetchData<WinnerInterface>(url, API_METHODS.POST, winner);\n  }\n\n  public static async deleteCarById(\n    id: number,\n  ): Promise<CarInterface | undefined> {\n    const url = `${API_URLS.CARS}${id}`;\n    return this.fetchData<CarInterface>(url, API_METHODS.DELETE);\n  }\n\n  public static async deleteWinnerById(\n    id: number,\n  ): Promise<WinnerInterface | undefined> {\n    const url = `${API_URLS.WINNERS}${id}`;\n    return this.fetchData<WinnerInterface>(url, API_METHODS.DELETE);\n  }\n\n  public static async updateCarById(\n    id: number,\n    car: CarInterface,\n  ): Promise<CarInterface | undefined> {\n    const url = `${API_URLS.CARS}${id}`;\n    return this.fetchData<CarInterface>(url, API_METHODS.PUT, car);\n  }\n\n  public static async updateWinnerById(\n    id: number,\n    winner: WinnerInterface,\n  ): Promise<WinnerInterface | undefined> {\n    const url = `${API_URLS.WINNERS}${id}`;\n    return this.fetchData<WinnerInterface>(url, API_METHODS.PUT, winner);\n  }\n\n  public static async startCarEngine(\n    params: Map<string, string | number>,\n  ): Promise<EngineCarDataInterface | undefined> {\n    const idParam = Number(params.get(QUERY_PARAMS.ID));\n    const statusParam = String(params.get(QUERY_PARAMS.STATUS));\n    if (!idParam || !statusParam) {\n      throw new Error(API_ERRORS.INCORRECT_PARAMS);\n    }\n    const url = `${API_URLS.ENGINE}?${QUERY_PARAMS.ID}=${idParam}&${QUERY_PARAMS.STATUS}=${statusParam}`;\n    return this.fetchData<EngineCarDataInterface>(url, API_METHODS.PATCH);\n  }\n\n  public static async stopCarEngine(\n    params: Map<string, string | number>,\n  ): Promise<EngineCarDataInterface | undefined> {\n    const idParam = Number(params.get(QUERY_PARAMS.ID));\n    const statusParam = String(params.get(QUERY_PARAMS.STATUS));\n    if (!idParam || !statusParam) {\n      throw new Error(API_ERRORS.INCORRECT_PARAMS);\n    }\n    const url = `${API_URLS.ENGINE}?${QUERY_PARAMS.ID}=${idParam}&${QUERY_PARAMS.STATUS}=${statusParam}`;\n    return this.fetchData<EngineCarDataInterface>(url, API_METHODS.PATCH);\n  }\n\n  public static async driveCarEngine(\n    params: Map<string, string | number>,\n  ): Promise<EngineCarDriveInterface | undefined> {\n    const idParam = Number(params.get(QUERY_PARAMS.ID));\n    const statusParam = String(params.get(QUERY_PARAMS.STATUS));\n    if (!idParam || !statusParam) {\n      throw new Error(API_ERRORS.INCORRECT_PARAMS);\n    }\n    const url = `${API_URLS.ENGINE}?${QUERY_PARAMS.ID}=${idParam}&${QUERY_PARAMS.STATUS}=${statusParam}`;\n    return this.fetchData<EngineCarDriveInterface>(url, API_METHODS.PATCH);\n  }\n\n  private static async fetchData<T>(\n    url: string,\n    method: string,\n    body?: T | null,\n  ): Promise<T | undefined> {\n    return fetch(url, {\n      method,\n      headers: {\n        [API_HEADERS.CONTENT_TYPE]: API_HEADERS.APPLICATION_JSON,\n      },\n      body: body ? JSON.stringify(body) : null,\n    })\n      .then((response) => response.json())\n      .then((json: T) => json)\n      .catch(() => {\n        throw new Error(`${STATUS_CODES.INTERNAL_SERVER_ERROR}`);\n      });\n  }\n}\n\nexport default ApiModel;\n","const ACTIONS = {\n  GET_CARS: 'getCars',\n  GET_WINNERS: 'getWinners',\n  ADD_NEW_CAR: 'addNewCar',\n  DELETE_CAR: 'deleteCar',\n  CHANGE_GARAGE_PAGE: 'changeGaragePage',\n  SET_TOTAL_GARAGE_PAGES: 'setTotalGaragePages',\n  CHANGE_WINNERS_PAGE: 'changeWinnersPage',\n  SET_TOTAL_WINNERS_PAGES: 'setTotalWinnersPages',\n} as const;\n\nexport default ACTIONS;\n","const RACE_TRACK_BUTTON_TEXT = {\n  SELECT_CAR: 'Select',\n  REMOVE_CAR: 'Remove',\n  START_ENGINE: 'A',\n  STOP_ENGINE: 'B',\n} as const;\n\nexport const SINGLE_RACE = 'single';\n\nexport const RACE_TRACK_SVG_DETAILS = {\n  SVG_URL: 'http://www.w3.org/2000/svg',\n  CAR_ID: 'car',\n  FLAG_ID: 'race-flag',\n  FIRE_ID: 'fire',\n} as const;\n\nexport const TRANSITION_STATE = {\n  START: 'translateX(0)',\n} as const;\n\nexport const FILL = 'forwards';\n\nexport default RACE_TRACK_BUTTON_TEXT;\n","export const createSVGUse = (id: string): SVGUseElement => {\n  const use = document.createElementNS('http://www.w3.org/2000/svg', 'use');\n  use.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', `#${id}`);\n  return use;\n};\n\nexport const changeSVGFill = (svg: SVGSVGElement, color: string): void => {\n  svg.setAttribute('fill', color);\n};\n","import ButtonModel from '../../../shared/Button/model/ButtonModel.ts';\nimport type { CarInterface } from '../../../shared/Api/types/interfaces.ts';\nimport { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport RACE_TRACK_STYLES from './raceTrack.module.scss';\nimport RACE_TRACK_BUTTON_TEXT, {\n  RACE_TRACK_SVG_DETAILS,\n} from '../types/enums.ts';\nimport { changeSVGFill, createSVGUse } from '../../../utils/createCarImg.ts';\n\nclass RaceTrackView {\n  private carData: CarInterface;\n\n  private selectCarButton: ButtonModel;\n\n  private removeCarButton: ButtonModel;\n\n  private nameCarSpan: HTMLSpanElement;\n\n  private startEngineButton: ButtonModel;\n\n  private stopEngineButton: ButtonModel;\n\n  private carSVG: SVGSVGElement;\n\n  private fireSVG: SVGSVGElement;\n\n  private carSVGWrapper: HTMLDivElement;\n\n  private raceTrack: HTMLLIElement;\n\n  constructor(carData: CarInterface) {\n    this.carData = carData;\n    this.selectCarButton = this.createSelectCarButton();\n    this.removeCarButton = this.createRemoveCarButton();\n    this.nameCarSpan = this.createNameCarSpan();\n    this.startEngineButton = this.createStartEngineButton();\n    this.stopEngineButton = this.createStopEngineButton();\n    this.carSVG = this.createCarSVG();\n    this.fireSVG = this.createFireSVG();\n    this.carSVGWrapper = this.createCarSVGWrapper();\n    this.raceTrack = this.createHTML();\n  }\n\n  public getHTML(): HTMLLIElement {\n    return this.raceTrack;\n  }\n\n  public getSelectCarButton(): ButtonModel {\n    return this.selectCarButton;\n  }\n\n  public getRemoveCarButton(): ButtonModel {\n    return this.removeCarButton;\n  }\n\n  public getStartEngineButton(): ButtonModel {\n    return this.startEngineButton;\n  }\n\n  public getStopEngineButton(): ButtonModel {\n    return this.stopEngineButton;\n  }\n\n  public getNameCarSpan(): HTMLSpanElement {\n    return this.nameCarSpan;\n  }\n\n  public getCarSvgWrapper(): HTMLDivElement {\n    return this.carSVGWrapper;\n  }\n\n  public getCarSvg(): SVGSVGElement {\n    return this.carSVG;\n  }\n\n  public getFireSvg(): SVGSVGElement {\n    return this.fireSVG;\n  }\n\n  private createSelectCarButton(): ButtonModel {\n    this.selectCarButton = new ButtonModel({\n      text: RACE_TRACK_BUTTON_TEXT.SELECT_CAR,\n      classes: [RACE_TRACK_STYLES['race-track_car-button']],\n    });\n\n    return this.selectCarButton;\n  }\n\n  private createRemoveCarButton(): ButtonModel {\n    this.removeCarButton = new ButtonModel({\n      text: RACE_TRACK_BUTTON_TEXT.REMOVE_CAR,\n      classes: [RACE_TRACK_STYLES['race-track_car-button']],\n    });\n\n    return this.removeCarButton;\n  }\n\n  private createNameCarSpan(): HTMLSpanElement {\n    this.nameCarSpan = createBaseElement({\n      tag: TAG_NAMES.SPAN,\n      cssClasses: [RACE_TRACK_STYLES['race-track__name-car']],\n      innerContent: this.carData.name,\n    });\n\n    return this.nameCarSpan;\n  }\n\n  private createStartEngineButton(): ButtonModel {\n    this.startEngineButton = new ButtonModel({\n      text: RACE_TRACK_BUTTON_TEXT.START_ENGINE,\n      classes: [RACE_TRACK_STYLES['race-track_engine-button']],\n    });\n\n    return this.startEngineButton;\n  }\n\n  private createStopEngineButton(): ButtonModel {\n    this.stopEngineButton = new ButtonModel({\n      text: RACE_TRACK_BUTTON_TEXT.STOP_ENGINE,\n      classes: [RACE_TRACK_STYLES['race-track_engine-button']],\n    });\n    this.stopEngineButton.setDisabled();\n\n    return this.stopEngineButton;\n  }\n\n  private createFireSVG(): SVGSVGElement {\n    this.fireSVG = document.createElementNS(\n      RACE_TRACK_SVG_DETAILS.SVG_URL,\n      TAG_NAMES.SVG,\n    );\n    this.fireSVG.classList.add(RACE_TRACK_STYLES['race-track__fire-img']);\n    this.fireSVG.appendChild(createSVGUse(RACE_TRACK_SVG_DETAILS.FIRE_ID));\n    return this.fireSVG;\n  }\n\n  private createCarSVG(): SVGSVGElement {\n    this.carSVG = document.createElementNS(\n      RACE_TRACK_SVG_DETAILS.SVG_URL,\n      TAG_NAMES.SVG,\n    );\n    this.carSVG.classList.add(RACE_TRACK_STYLES['race-track__car-img']);\n    this.carSVG.appendChild(createSVGUse(RACE_TRACK_SVG_DETAILS.CAR_ID));\n    changeSVGFill(this.carSVG, this.carData.color);\n    return this.carSVG;\n  }\n\n  private createCarSVGWrapper(): HTMLDivElement {\n    this.carSVGWrapper = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [RACE_TRACK_STYLES['race-track__car-svg-wrapper']],\n    });\n\n    this.carSVGWrapper.append(this.carSVG, this.fireSVG);\n    return this.carSVGWrapper;\n  }\n\n  private createHTML(): HTMLLIElement {\n    this.raceTrack = createBaseElement({\n      tag: TAG_NAMES.LI,\n      cssClasses: [RACE_TRACK_STYLES['race-track']],\n    });\n\n    const topRaceTrackWrapper = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [RACE_TRACK_STYLES['race-track__top-wrapper']],\n    });\n\n    topRaceTrackWrapper.append(\n      this.selectCarButton.getHTML(),\n      this.removeCarButton.getHTML(),\n      this.nameCarSpan,\n    );\n\n    const bottomRaceTrackWrapper = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [RACE_TRACK_STYLES['race-track__bottom-wrapper']],\n    });\n\n    const raceFlag = document.createElementNS(\n      RACE_TRACK_SVG_DETAILS.SVG_URL,\n      TAG_NAMES.SVG,\n    );\n    raceFlag.classList.add(RACE_TRACK_STYLES['race-track__flag-img']);\n    raceFlag.appendChild(createSVGUse(RACE_TRACK_SVG_DETAILS.FLAG_ID));\n\n    bottomRaceTrackWrapper.append(\n      this.startEngineButton.getHTML(),\n      this.stopEngineButton.getHTML(),\n      this.carSVGWrapper,\n      raceFlag,\n    );\n\n    this.raceTrack.append(topRaceTrackWrapper, bottomRaceTrackWrapper);\n\n    return this.raceTrack;\n  }\n}\n\nexport default RaceTrackView;\n","import { TAG_NAMES } from '../../types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport LOADER_STYLES from './loaderView.module.scss';\n\nclass LoaderView {\n  private loader: HTMLDivElement;\n\n  constructor() {\n    this.loader = this.createHTML();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.loader;\n  }\n\n  private createHTML(): HTMLDivElement {\n    this.loader = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [LOADER_STYLES.loader],\n    });\n\n    return this.loader;\n  }\n}\n\nexport default LoaderView;\n","import LoaderView from '../view/LoaderView.ts';\n\nclass LoaderModel {\n  private loaderView: LoaderView;\n\n  constructor() {\n    this.loaderView = new LoaderView();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.loaderView.getHTML();\n  }\n}\n\nexport default LoaderModel;\n","import type NewWinner from '../entities/RaceTrack/types/interfaces.ts';\n// Миша, надеюсь ты заметишь данный участок кода и скажешь мнение хороший ли это способ проверить данные или нет :)\nclass Winner implements NewWinner {\n  public id?: number;\n\n  public wins: number;\n\n  public time: number;\n\n  public name: string;\n\n  constructor(name: string, wins: number, time: number, id?: number) {\n    this.name = name;\n    this.wins = wins;\n    this.time = time;\n    this.id = id;\n  }\n\n  public static isWinner = (winner: unknown): winner is Winner =>\n    winner instanceof Winner;\n}\n\nexport default Winner;\n","import { EVENT_NAMES } from '../../../shared/types/enums.ts';\nimport type { CarInterface } from '../../../shared/Api/types/interfaces.ts';\nimport RaceTrackView from '../view/RaceTrackView.ts';\nimport ApiModel from '../../../shared/Api/model/ApiModel.ts';\nimport StoreModel from '../../../shared/Store/model/StoreModel.ts';\nimport ACTIONS from '../../../shared/Store/actions/types/enums.ts';\nimport MediatorModel from '../../../shared/Mediator/model/MediatorModel.ts';\nimport MEDIATOR_EVENTS from '../../../shared/Mediator/types/enums.ts';\nimport { changeSVGFill } from '../../../utils/createCarImg.ts';\nimport RACE_TRACK_STYLES from '../view/raceTrack.module.scss';\nimport {\n  QUERY_PARAMS,\n  QUERY_VALUES,\n  STATUS_CODES,\n} from '../../../shared/Api/types/enums.ts';\nimport LoaderModel from '../../../shared/Loader/model/LoaderModel.ts';\nimport { FILL, SINGLE_RACE, TRANSITION_STATE } from '../types/enums.ts';\nimport type NewWinner from '../types/interfaces.ts';\nimport Winner from '../../../utils/isWinner.ts';\n\nclass RaceTrackModel {\n  private carData: CarInterface;\n\n  private carAnimation: Animation | null = null;\n\n  private singletonMediator: MediatorModel<unknown> =\n    MediatorModel.getInstance();\n\n  private raceTrackView: RaceTrackView;\n\n  private raceTrack: HTMLLIElement;\n\n  constructor(carData: CarInterface) {\n    this.carData = carData;\n    this.raceTrackView = new RaceTrackView(this.carData);\n    this.raceTrack = this.raceTrackView.getHTML();\n    this.setHandlerToButtons();\n  }\n\n  public getHTML(): HTMLLIElement {\n    return this.raceTrack;\n  }\n\n  public getView(): RaceTrackView {\n    return this.raceTrackView;\n  }\n\n  public async startEngineHandler(mod?: string): Promise<void> {\n    if (!this.carData.id) {\n      return;\n    }\n\n    const queryParams: Map<string, string | number> = new Map();\n    queryParams.set(QUERY_PARAMS.ID, this.carData.id);\n    queryParams.set(QUERY_PARAMS.STATUS, QUERY_VALUES.STARTED);\n    const loader = new LoaderModel();\n    this.raceTrackView\n      .getStartEngineButton()\n      .getHTML()\n      .append(loader.getHTML());\n\n    await ApiModel.stopCarEngine(queryParams).catch(() => {});\n\n    await ApiModel.startCarEngine(queryParams)\n      .then((data) => {\n        if (data) {\n          loader.getHTML().remove();\n          const duration = data.distance / data.velocity;\n          this.carAnimation = this.createCarAnimation(duration);\n          this.driveCarEngine(duration, mod);\n        }\n      })\n      .catch(() => {});\n  }\n\n  private createCarAnimation(duration: number): Animation {\n    const raceTrackWidth = this.raceTrack.clientWidth;\n    const carWidth = this.raceTrackView.getCarSvg().clientWidth;\n    const startEngineButtonWidth = this.raceTrackView\n      .getStartEngineButton()\n      .getHTML().clientWidth;\n    const stopEngineButtonWidth = this.raceTrackView\n      .getStopEngineButton()\n      .getHTML().clientWidth;\n    const carXPosition =\n      raceTrackWidth -\n      carWidth -\n      startEngineButtonWidth -\n      stopEngineButtonWidth;\n    const endTransition = `translateX(${carXPosition}px)`;\n    return this.raceTrackView\n      .getCarSvgWrapper()\n      .animate(\n        [{ transform: TRANSITION_STATE.START }, { transform: endTransition }],\n        {\n          duration,\n          fill: FILL,\n        },\n      );\n  }\n\n  private switchEngineButtons(mod?: string): void {\n    this.raceTrackView.getStartEngineButton().setDisabled();\n    this.raceTrackView.getStopEngineButton().setEnabled();\n    if (!mod) {\n      this.raceTrackView.getStopEngineButton().setDisabled();\n    }\n  }\n\n  private getWinnerData(duration: number): NewWinner {\n    const hundred = 100;\n    const ten = 10;\n    const time = Math.ceil(duration / hundred) / ten;\n    return new Winner(this.carData.name, 1, time, this.carData.id);\n  }\n\n  private visuallyBrokenCar(): void {\n    this.raceTrackView\n      .getFireSvg()\n      .classList.add(RACE_TRACK_STYLES['race-track__fire-img--active']);\n    this.carAnimation?.pause();\n  }\n\n  private driveCarEngine(duration: number, mod?: string): void {\n    if (!this.carData.id) {\n      return;\n    }\n\n    const driveQueryParams: Map<string, string | number> = new Map();\n    driveQueryParams.set(QUERY_PARAMS.ID, this.carData.id);\n    driveQueryParams.set(QUERY_PARAMS.STATUS, QUERY_VALUES.DRIVE);\n    this.switchEngineButtons(mod);\n    if (!mod) {\n      ApiModel.driveCarEngine(driveQueryParams)\n        .then(() => {\n          this.singletonMediator.notify(\n            MEDIATOR_EVENTS.NEW_WINNER,\n            this.getWinnerData(duration),\n          );\n        })\n        .catch((error: Error) => {\n          if (\n            Number(error.message) === STATUS_CODES.INTERNAL_SERVER_ERROR &&\n            this.carData.id\n          ) {\n            this.visuallyBrokenCar();\n            ApiModel.stopCarEngine(\n              new Map(\n                Object.entries({\n                  [QUERY_PARAMS.ID]: this.carData.id,\n                  [QUERY_PARAMS.STATUS]: QUERY_VALUES.STOPPED,\n                }),\n              ),\n            ).catch(() => {});\n            this.singletonMediator.notify(\n              MEDIATOR_EVENTS.CAR_BROKEN,\n              this.carData,\n            );\n          }\n        });\n    }\n  }\n\n  public stopEngineHandler(mod?: string): void {\n    this.carAnimation?.pause();\n    if (!this.carData.id) {\n      return;\n    }\n    const queryParams: Map<string, string | number> = new Map();\n    queryParams.set(QUERY_PARAMS.ID, this.carData.id);\n    queryParams.set(QUERY_PARAMS.STATUS, QUERY_VALUES.STOPPED);\n    const loader = new LoaderModel();\n    this.raceTrackView.getStopEngineButton().getHTML().append(loader.getHTML());\n    this.raceTrackView\n      .getFireSvg()\n      .classList.remove(RACE_TRACK_STYLES['race-track__fire-img--active']);\n\n    ApiModel.stopCarEngine(queryParams)\n      .then(() => {\n        loader.getHTML().remove();\n        this.carAnimation?.cancel();\n        if (!mod) {\n          this.singletonMediator.notify(MEDIATOR_EVENTS.RESET_CURRENT_CAR, '');\n        } else {\n          this.singletonMediator.notify(MEDIATOR_EVENTS.SINGLE_RACE_RESET, '');\n          this.raceTrackView.getStartEngineButton().setEnabled();\n          this.raceTrackView.getStopEngineButton().setDisabled();\n        }\n      })\n      .catch(() => {});\n  }\n\n  private deleteCarHandler(): void {\n    if (this.carData.id) {\n      const loader = new LoaderModel();\n      this.raceTrackView\n        .getRemoveCarButton()\n        .getHTML()\n        .append(loader.getHTML());\n      ApiModel.deleteCarById(this.carData.id)\n        .then(() => {\n          loader.getHTML().remove();\n          const { cars } = StoreModel.getState();\n          const carsWithoutDeleted = cars.filter(\n            (car) => car.id !== this.carData.id,\n          );\n\n          StoreModel.dispatch({\n            type: ACTIONS.DELETE_CAR,\n            payload: carsWithoutDeleted,\n          });\n\n          this.raceTrack.remove();\n          this.singletonMediator.notify(MEDIATOR_EVENTS.DELETE_CAR, '');\n        })\n        .catch(() => {});\n      ApiModel.getWinnerById(this.carData.id)\n        .then((winner) => {\n          if (winner && winner.id) {\n            ApiModel.deleteWinnerById(winner.id)\n              .then(() => {\n                this.singletonMediator.notify(\n                  MEDIATOR_EVENTS.DELETE_WINNER,\n                  '',\n                );\n              })\n              .catch(() => {});\n          }\n        })\n        .catch(() => {});\n    }\n  }\n\n  private updateCarView(): void {\n    if (!this.carData.id) {\n      return;\n    }\n    const carNameSpan = this.raceTrackView.getNameCarSpan();\n    const carSVG = this.raceTrackView.getCarSvg();\n    const carState = StoreModel.getState().cars.find(\n      (car) => car.id === this.carData.id,\n    );\n    carNameSpan.textContent = carState?.name || this.carData.name;\n    changeSVGFill(carSVG, carState?.color || this.carData.color);\n  }\n\n  private resetRace(): void {\n    const removeCarButton = this.raceTrackView.getRemoveCarButton();\n    const selectCarButton = this.raceTrackView.getSelectCarButton();\n    const stopEngineButton = this.raceTrackView.getStopEngineButton();\n    const startEngineButton = this.raceTrackView.getStartEngineButton();\n\n    removeCarButton.setEnabled();\n    selectCarButton.setEnabled();\n    stopEngineButton.setDisabled();\n    startEngineButton.setEnabled();\n  }\n\n  private subscribeToMediator(): void {\n    const removeCarButton = this.raceTrackView.getRemoveCarButton();\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.UPDATE_CAR, (params) => {\n      if (this.carData.id === params) {\n        this.updateCarView();\n        removeCarButton.setEnabled();\n      }\n    });\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.EMPTY_RACE, () => {\n      this.resetRace();\n    });\n  }\n\n  private setHandlerToButtons(): void {\n    const removeCarButton = this.raceTrackView.getRemoveCarButton();\n    const selectCarButton = this.raceTrackView.getSelectCarButton();\n    const startEngineButton = this.raceTrackView\n      .getStartEngineButton()\n      .getHTML();\n    const stopEngineButton = this.raceTrackView.getStopEngineButton();\n\n    removeCarButton\n      .getHTML()\n      .addEventListener(EVENT_NAMES.CLICK, this.deleteCarHandler.bind(this));\n\n    selectCarButton.getHTML().addEventListener(EVENT_NAMES.CLICK, () => {\n      removeCarButton.setDisabled();\n      this.singletonMediator.notify(\n        MEDIATOR_EVENTS.SELECT_CAR,\n        this.carData.id,\n      );\n    });\n\n    startEngineButton.addEventListener(EVENT_NAMES.CLICK, () => {\n      this.startEngineHandler(SINGLE_RACE).catch(() => {});\n      this.singletonMediator.notify(MEDIATOR_EVENTS.SINGLE_RACE_START, '');\n    });\n\n    stopEngineButton.getHTML().addEventListener(EVENT_NAMES.CLICK, () => {\n      this.stopEngineHandler(SINGLE_RACE);\n    });\n\n    this.subscribeToMediator();\n  }\n}\n\nexport default RaceTrackModel;\n","import { TAG_NAMES } from '../../types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\n\nclass InputView {\n  private input: HTMLInputElement;\n\n  constructor(attrs: Record<string, string>) {\n    this.input = this.createHTML(attrs);\n  }\n\n  public getHTML(): HTMLInputElement {\n    return this.input;\n  }\n\n  private createHTML(attrs: Record<string, string>): HTMLInputElement {\n    this.input = createBaseElement({\n      tag: TAG_NAMES.INPUT,\n      attributes: attrs,\n    });\n\n    return this.input;\n  }\n}\n\nexport default InputView;\n","import { IS_DISABLED } from '../../types/enums.ts';\nimport InputView from '../view/InputView.ts';\n\nclass InputModel {\n  private view: InputView;\n\n  constructor(attrs: Record<string, string>) {\n    this.view = new InputView(attrs);\n  }\n\n  public getHTML(): HTMLInputElement {\n    return this.view.getHTML();\n  }\n\n  public setDisabled(): void {\n    this.view.getHTML().disabled = IS_DISABLED.DISABLED;\n  }\n\n  public setEnabled(): void {\n    this.view.getHTML().disabled = IS_DISABLED.ENABLED;\n  }\n\n  public clear(): void {\n    this.view.getHTML().value = '';\n  }\n}\n\nexport default InputModel;\n","const INPUT_TYPES = {\n  TEXT: 'text',\n  NUMBER: 'number',\n  EMAIL: 'email',\n  PASSWORD: 'password',\n  RANGE: 'range',\n  DATE: 'date',\n  COLOR: 'color',\n} as const;\n\nexport default INPUT_TYPES;\n","const BUTTON_TYPES = {\n  SUBMIT: 'submit',\n  RESET: 'reset',\n  BUTTON: 'button',\n} as const;\n\nexport default BUTTON_TYPES;\n","import InputModel from '../../../shared/Input/model/InputModel.ts';\nimport { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport CREATE_CAR_FORM_STYLES from './createCarForm.module.scss';\nimport INPUT_TYPES from '../../../shared/Input/types/enums.ts';\nimport ButtonModel from '../../../shared/Button/model/ButtonModel.ts';\nimport BUTTON_TYPES from '../../../shared/Button/types/enums.ts';\n\nclass CreateCarFormView {\n  private carNameInput: InputModel;\n\n  private carColorInput: InputModel;\n\n  private submitButton: ButtonModel;\n\n  private form: HTMLFormElement;\n\n  constructor() {\n    this.carNameInput = this.createCarNameInput();\n    this.carColorInput = this.createCarColorInput();\n    this.submitButton = this.createSubmitButton();\n    this.form = this.createHTML();\n  }\n\n  public getHTML(): HTMLFormElement {\n    return this.form;\n  }\n\n  public getCarNameInput(): InputModel {\n    return this.carNameInput;\n  }\n\n  public getCarColorInput(): InputModel {\n    return this.carColorInput;\n  }\n\n  public getSubmitButton(): ButtonModel {\n    return this.submitButton;\n  }\n\n  private createCarNameInput(): InputModel {\n    const placeholder = 'Car name';\n    this.carNameInput = new InputModel({\n      type: INPUT_TYPES.TEXT,\n      placeholder,\n    });\n\n    return this.carNameInput;\n  }\n\n  private createCarColorInput(): InputModel {\n    this.carColorInput = new InputModel({\n      type: INPUT_TYPES.COLOR,\n    });\n\n    return this.carColorInput;\n  }\n\n  private createSubmitButton(): ButtonModel {\n    const buttonText = 'Create';\n    this.submitButton = new ButtonModel({\n      text: buttonText,\n      classes: [CREATE_CAR_FORM_STYLES['form_submit-button']],\n      attrs: {\n        type: BUTTON_TYPES.SUBMIT,\n      },\n    });\n\n    this.submitButton.setDisabled();\n\n    return this.submitButton;\n  }\n\n  private createHTML(): HTMLFormElement {\n    this.form = createBaseElement({\n      tag: TAG_NAMES.FORM,\n      cssClasses: [CREATE_CAR_FORM_STYLES.form],\n    });\n\n    this.form.append(\n      this.carNameInput.getHTML(),\n      this.carColorInput.getHTML(),\n      this.submitButton.getHTML(),\n    );\n\n    return this.form;\n  }\n}\n\nexport default CreateCarFormView;\n","const formatText = (text: string): string =>\n  text\n    .trim()\n    .split(' ')\n    .map((word) => word[0].toUpperCase() + word.slice(1).toLowerCase())\n    .join(' ');\n\nexport default formatText;\n","import type { CarInterface } from '../../../shared/Api/types/interfaces.ts';\nimport ApiModel from '../../../shared/Api/model/ApiModel.ts';\nimport { EVENT_NAMES } from '../../../shared/types/enums.ts';\nimport CreateCarFormView from '../view/CreateCarFormView.ts';\nimport StoreModel from '../../../shared/Store/model/StoreModel.ts';\nimport ACTIONS from '../../../shared/Store/actions/types/enums.ts';\nimport formatText from '../../../utils/formatText.ts';\nimport MediatorModel from '../../../shared/Mediator/model/MediatorModel.ts';\nimport MEDIATOR_EVENTS from '../../../shared/Mediator/types/enums.ts';\nimport LoaderModel from '../../../shared/Loader/model/LoaderModel.ts';\n\nclass CreateCarFormModel {\n  private singletonMediator: MediatorModel<unknown> =\n    MediatorModel.getInstance();\n\n  private createCarFormView: CreateCarFormView = new CreateCarFormView();\n\n  constructor() {\n    this.init();\n  }\n\n  public getHTML(): HTMLFormElement {\n    return this.createCarFormView.getHTML();\n  }\n\n  private checkForm(): void {\n    const carNameInput = this.createCarFormView.getCarNameInput().getHTML();\n    const carColorInput = this.createCarFormView.getCarColorInput().getHTML();\n    const submitButton = this.createCarFormView.getSubmitButton();\n\n    if (!carNameInput.value.length || !carColorInput.value.length) {\n      submitButton.setDisabled();\n    } else {\n      submitButton.setEnabled();\n    }\n  }\n\n  private async submitHandler(): Promise<void> {\n    const carNameInput = this.createCarFormView.getCarNameInput();\n    const carColorInput = this.createCarFormView.getCarColorInput();\n    const submitButton = this.createCarFormView.getSubmitButton();\n\n    const newCarData: CarInterface = {\n      name: formatText(carNameInput.getHTML().value),\n      color: formatText(carColorInput.getHTML().value),\n    };\n\n    const loader = new LoaderModel();\n\n    submitButton.getHTML().append(loader.getHTML());\n\n    await ApiModel.createCar(newCarData);\n\n    const carsWithoutCreated = await ApiModel.getCars(new Map());\n\n    loader.getHTML().remove();\n\n    if (!carsWithoutCreated) {\n      return;\n    }\n\n    StoreModel.dispatch({\n      type: ACTIONS.GET_CARS,\n      payload: carsWithoutCreated,\n    });\n\n    carNameInput.clear();\n    const initColor = '#000000';\n    carColorInput.getHTML().value = initColor;\n    submitButton.setDisabled();\n    this.singletonMediator.notify(MEDIATOR_EVENTS.CREATE_CAR, '');\n  }\n\n  private allDisabled(): void {\n    const carNameInput = this.createCarFormView.getCarNameInput();\n    const carColorInput = this.createCarFormView.getCarColorInput();\n    const submitButton = this.createCarFormView.getSubmitButton();\n    carNameInput.setDisabled();\n    carColorInput.setDisabled();\n    submitButton.setDisabled();\n  }\n\n  private init(): void {\n    const carNameInput = this.createCarFormView.getCarNameInput();\n    const carColorInput = this.createCarFormView.getCarColorInput();\n\n    carNameInput.getHTML().addEventListener(EVENT_NAMES.INPUT, () => {\n      this.checkForm();\n      this.singletonMediator.notify(\n        MEDIATOR_EVENTS.CHANGE_NAME_PREVIEW_CAR,\n        carNameInput.getHTML().value,\n      );\n    });\n\n    carColorInput.getHTML().addEventListener(EVENT_NAMES.INPUT, () => {\n      this.checkForm();\n      this.singletonMediator.notify(\n        MEDIATOR_EVENTS.CHANGE_COLOR_PREVIEW_CAR,\n        carColorInput.getHTML().value,\n      );\n    });\n\n    this.getHTML().addEventListener(\n      EVENT_NAMES.SUBMIT,\n      (event: SubmitEvent) => {\n        event.preventDefault();\n        this.submitHandler().catch(() => {});\n      },\n    );\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.START_RACE, () => {\n      this.allDisabled();\n    });\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.SINGLE_RACE_START, () => {\n      this.allDisabled();\n    });\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.SINGLE_RACE_RESET, () => {\n      carColorInput.setEnabled();\n      carNameInput.setEnabled();\n    });\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.EMPTY_RACE, () => {\n      carColorInput.setEnabled();\n      carNameInput.setEnabled();\n    });\n  }\n}\n\nexport default CreateCarFormModel;\n","import createBaseElement from '../../../utils/createBaseElement.ts';\nimport PREVIEW_CAR_STYLES from './previewCarView.module.scss';\nimport { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport { createSVGUse } from '../../../utils/createCarImg.ts';\n\nclass PreviewCarView {\n  private carName: HTMLSpanElement;\n\n  private carSVG: SVGSVGElement;\n\n  private previewCar: HTMLDivElement;\n\n  constructor() {\n    this.carName = this.createCarName();\n    this.carSVG = this.createCarSVG();\n    this.previewCar = this.createHTML();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.previewCar;\n  }\n\n  public getCarSVG(): SVGSVGElement {\n    return this.carSVG;\n  }\n\n  public getCarName(): HTMLSpanElement {\n    return this.carName;\n  }\n\n  private createCarName(): HTMLSpanElement {\n    this.carName = createBaseElement({\n      tag: TAG_NAMES.SPAN,\n      cssClasses: [PREVIEW_CAR_STYLES['preview-car_name']],\n    });\n\n    return this.carName;\n  }\n\n  private createCarSVG(): SVGSVGElement {\n    const svgURL = 'http://www.w3.org/2000/svg';\n    const carID = 'car';\n    this.carSVG = document.createElementNS(svgURL, TAG_NAMES.SVG);\n    this.carSVG.classList.add(PREVIEW_CAR_STYLES['preview-car_img']);\n    this.carSVG.appendChild(createSVGUse(carID));\n    return this.carSVG;\n  }\n\n  private createHTML(): HTMLDivElement {\n    this.previewCar = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [PREVIEW_CAR_STYLES['preview-car']],\n    });\n\n    this.previewCar.append(this.carSVG, this.carName);\n\n    return this.previewCar;\n  }\n}\n\nexport default PreviewCarView;\n","import MEDIATOR_EVENTS from '../../../shared/Mediator/types/enums.ts';\nimport MediatorModel from '../../../shared/Mediator/model/MediatorModel.ts';\nimport { changeSVGFill } from '../../../utils/createCarImg.ts';\nimport PreviewCarView from '../view/PreviewCarView.ts';\n\nclass PreviewCarModel {\n  private previewCarView: PreviewCarView = new PreviewCarView();\n\n  private singletonMediator: MediatorModel<unknown> =\n    MediatorModel.getInstance();\n\n  constructor() {\n    this.init();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.previewCarView.getHTML();\n  }\n\n  private setColorCar(color: string): void {\n    const carSvg = this.previewCarView.getCarSVG();\n    changeSVGFill(carSvg, color);\n  }\n\n  private setNameCar(name: string): void {\n    this.previewCarView.getCarName().textContent = name;\n  }\n\n  private setInitialStateFields(): void {\n    this.previewCarView.getCarName().textContent = '';\n    const attr = 'fill';\n    this.previewCarView.getCarSVG().removeAttribute(attr);\n  }\n\n  private init(): void {\n    this.singletonMediator.subscribe(\n      MEDIATOR_EVENTS.CHANGE_COLOR_PREVIEW_CAR,\n      (params) => {\n        if (typeof params === 'string') {\n          this.setColorCar(params);\n        }\n      },\n    );\n\n    this.singletonMediator.subscribe(\n      MEDIATOR_EVENTS.CHANGE_NAME_PREVIEW_CAR,\n      (params) => {\n        if (typeof params === 'string') {\n          this.setNameCar(params);\n        }\n      },\n    );\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.CREATE_CAR, () => {\n      this.setInitialStateFields();\n    });\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.UPDATE_CAR, () => {\n      this.setInitialStateFields();\n    });\n  }\n}\n\nexport default PreviewCarModel;\n","import InputModel from '../../../shared/Input/model/InputModel.ts';\nimport { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport CHANGE_CAR_FORM_STYLES from './changeCarForm.module.scss';\nimport INPUT_TYPES from '../../../shared/Input/types/enums.ts';\nimport ButtonModel from '../../../shared/Button/model/ButtonModel.ts';\nimport BUTTON_TYPES from '../../../shared/Button/types/enums.ts';\n\nclass ChangeCarFormView {\n  private carNameInput: InputModel;\n\n  private carColorInput: InputModel;\n\n  private submitButton: ButtonModel;\n\n  private form: HTMLFormElement;\n\n  constructor() {\n    this.carNameInput = this.createCarNameInput();\n    this.carColorInput = this.createCarColorInput();\n    this.submitButton = this.createSubmitButton();\n    this.form = this.createHTML();\n  }\n\n  public getHTML(): HTMLFormElement {\n    return this.form;\n  }\n\n  public getCarNameInput(): InputModel {\n    return this.carNameInput;\n  }\n\n  public getCarColorInput(): InputModel {\n    return this.carColorInput;\n  }\n\n  public getSubmitButton(): ButtonModel {\n    return this.submitButton;\n  }\n\n  private createCarNameInput(): InputModel {\n    const placeholder = 'Car name';\n    this.carNameInput = new InputModel({\n      type: INPUT_TYPES.TEXT,\n      placeholder,\n    });\n\n    this.carNameInput.setDisabled();\n\n    return this.carNameInput;\n  }\n\n  private createCarColorInput(): InputModel {\n    this.carColorInput = new InputModel({\n      type: INPUT_TYPES.COLOR,\n    });\n\n    this.carColorInput.setDisabled();\n\n    return this.carColorInput;\n  }\n\n  private createSubmitButton(): ButtonModel {\n    const buttonText = 'Update';\n    this.submitButton = new ButtonModel({\n      text: buttonText,\n      classes: [CHANGE_CAR_FORM_STYLES['form_submit-button']],\n      attrs: {\n        type: BUTTON_TYPES.SUBMIT,\n      },\n    });\n\n    this.submitButton.setDisabled();\n\n    return this.submitButton;\n  }\n\n  private createHTML(): HTMLFormElement {\n    this.form = createBaseElement({\n      tag: TAG_NAMES.FORM,\n      cssClasses: [CHANGE_CAR_FORM_STYLES.form],\n    });\n\n    this.form.append(\n      this.carNameInput.getHTML(),\n      this.carColorInput.getHTML(),\n      this.submitButton.getHTML(),\n    );\n\n    return this.form;\n  }\n}\n\nexport default ChangeCarFormView;\n","import type { CarInterface } from '../../../shared/Api/types/interfaces.ts';\nimport ApiModel from '../../../shared/Api/model/ApiModel.ts';\nimport { EVENT_NAMES } from '../../../shared/types/enums.ts';\nimport ChangeCarFormView from '../view/ChangeCarFormView.ts';\nimport StoreModel from '../../../shared/Store/model/StoreModel.ts';\nimport ACTIONS from '../../../shared/Store/actions/types/enums.ts';\nimport formatText from '../../../utils/formatText.ts';\nimport MediatorModel from '../../../shared/Mediator/model/MediatorModel.ts';\nimport MEDIATOR_EVENTS from '../../../shared/Mediator/types/enums.ts';\nimport LoaderModel from '../../../shared/Loader/model/LoaderModel.ts';\n\nclass ChangeCarFormModel {\n  private singletonMediator: MediatorModel<unknown> =\n    MediatorModel.getInstance();\n\n  private selectCar: CarInterface | null = null;\n\n  private changeCarFormView: ChangeCarFormView = new ChangeCarFormView();\n\n  constructor() {\n    this.init();\n  }\n\n  public getHTML(): HTMLFormElement {\n    return this.changeCarFormView.getHTML();\n  }\n\n  private getSelectCar(id: number): void {\n    const loader = new LoaderModel();\n    this.changeCarFormView.getSubmitButton().getHTML().append(loader.getHTML());\n    ApiModel.getCarById(id)\n      .then((car) => {\n        if (car) {\n          loader.getHTML().remove();\n          this.selectCar = car;\n          this.unDisableForm();\n          this.singletonMediator.notify(\n            MEDIATOR_EVENTS.CHANGE_NAME_PREVIEW_CAR,\n            car.name,\n          );\n          this.singletonMediator.notify(\n            MEDIATOR_EVENTS.CHANGE_COLOR_PREVIEW_CAR,\n            car.color,\n          );\n        }\n      })\n      .catch(() => {});\n  }\n\n  private unDisableForm(): void {\n    const carNameInput = this.changeCarFormView.getCarNameInput();\n    const carColorInput = this.changeCarFormView.getCarColorInput();\n    const submitButton = this.changeCarFormView.getSubmitButton();\n    carNameInput.setEnabled();\n    carColorInput.setEnabled();\n    submitButton.setEnabled();\n\n    carNameInput.getHTML().value = this.selectCar?.name || '';\n    carColorInput.getHTML().value = this.selectCar?.color || '';\n  }\n\n  private checkForm(): void {\n    const carNameInput = this.changeCarFormView.getCarNameInput().getHTML();\n    const carColorInput = this.changeCarFormView.getCarColorInput().getHTML();\n    const submitButton = this.changeCarFormView.getSubmitButton();\n\n    if (!carNameInput.value.length || !carColorInput.value.length) {\n      submitButton.setDisabled();\n    } else {\n      submitButton.setEnabled();\n    }\n  }\n\n  private async submitHandler(): Promise<void> {\n    const carNameInput = this.changeCarFormView.getCarNameInput();\n    const carColorInput = this.changeCarFormView.getCarColorInput();\n    const submitButton = this.changeCarFormView.getSubmitButton();\n\n    const newCarData: CarInterface = {\n      name: formatText(carNameInput.getHTML().value),\n      color: formatText(carColorInput.getHTML().value),\n    };\n\n    if (!this.selectCar || !this.selectCar.id) {\n      return;\n    }\n    const loader = new LoaderModel();\n    this.changeCarFormView.getSubmitButton().getHTML().append(loader.getHTML());\n\n    await ApiModel.updateCarById(this.selectCar.id, newCarData);\n\n    const carWithoutChange = await ApiModel.getCarById(this.selectCar.id);\n\n    loader.getHTML().remove();\n\n    if (!carWithoutChange || !carWithoutChange.id) {\n      return;\n    }\n\n    const { cars } = StoreModel.getState();\n\n    const updateCar = cars.find((car) => car.id === carWithoutChange.id);\n    if (updateCar) {\n      updateCar.name = newCarData.name;\n      updateCar.color = newCarData.color;\n    }\n\n    StoreModel.dispatch({\n      type: ACTIONS.ADD_NEW_CAR,\n      payload: cars,\n    });\n\n    carNameInput.clear();\n    const initColor = '#000000';\n    carColorInput.getHTML().value = initColor;\n    carNameInput.setDisabled();\n    carColorInput.setDisabled();\n    submitButton.setDisabled();\n    this.singletonMediator.notify(MEDIATOR_EVENTS.UPDATE_CAR, updateCar?.id);\n  }\n\n  private init(): void {\n    const carNameInput = this.changeCarFormView.getCarNameInput().getHTML();\n    const carColorInput = this.changeCarFormView.getCarColorInput().getHTML();\n\n    carNameInput.addEventListener(EVENT_NAMES.INPUT, () => {\n      this.checkForm();\n      this.singletonMediator.notify(\n        MEDIATOR_EVENTS.CHANGE_NAME_PREVIEW_CAR,\n        carNameInput.value,\n      );\n    });\n\n    carColorInput.addEventListener(EVENT_NAMES.INPUT, () => {\n      this.checkForm();\n      this.singletonMediator.notify(\n        MEDIATOR_EVENTS.CHANGE_COLOR_PREVIEW_CAR,\n        carColorInput.value,\n      );\n    });\n\n    this.getHTML().addEventListener(\n      EVENT_NAMES.SUBMIT,\n      (event: SubmitEvent) => {\n        event.preventDefault();\n        this.submitHandler().catch(() => {});\n      },\n    );\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.SELECT_CAR, (params) => {\n      if (typeof params === 'number') {\n        this.getSelectCar(params);\n      }\n    });\n  }\n}\n\nexport default ChangeCarFormModel;\n","const getRandomIndex = (max: number): number => Math.floor(Math.random() * max);\n\nexport default getRandomIndex;\n","import type { CarInterface } from '../shared/Api/types/interfaces.ts';\nimport getRandomIndex from './getRandomIndex.ts';\n\nenum CarModel {\n  'Model 3' = 'Model 3',\n  'Model S' = 'Model S',\n  'Model X' = 'Model X',\n  'Model Y' = 'Model Y',\n  'Roadster' = 'Roadster',\n  'Cybertruck' = 'Cybertruck',\n  'Bolt EV' = 'Bolt EV',\n  'I-Pace' = 'I-Pace',\n  'Kona Electric' = 'Kona Electric',\n  'Taycan Turbo' = 'Taycan Turbo',\n  'Taycan Turbo S' = 'Taycan Turbo S',\n  'e-Golf' = 'e-Golf',\n  'Soul Electric' = 'Soul Electric',\n  'e6' = 'e6',\n  'Leaf' = 'Leaf',\n  'Zoe' = 'Zoe',\n  'i3' = 'i3',\n  'dolphin' = 'dolphin',\n  'eQ' = 'eQ',\n}\n\nenum CarBrand {\n  'Tesla' = 'Tesla',\n  'Chevrolet' = 'Chevrolet',\n  'Hyundai' = 'Hyundai',\n  'Kia' = 'Kia',\n  'Jaguar' = 'Jaguar',\n  'Porche' = 'Porche',\n  'BYD' = 'BYD',\n  'Volkswagen' = 'Volkswagen',\n  'Nissan' = 'Nissan',\n  'Renault' = 'Renault',\n  'Chery' = 'Chery',\n  'BMW' = 'BMW',\n}\n\nconst createRandomDataCars = (countCars: number): CarInterface[] => {\n  const cars: CarInterface[] = [];\n  const getRandomBrand = (): string =>\n    Object.keys(CarBrand)[getRandomIndex(Object.keys(CarBrand).length)];\n  const getRandomModel = (): string =>\n    Object.keys(CarModel)[getRandomIndex(Object.keys(CarModel).length)];\n  const getRandomColor = (): string =>\n    `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n  for (let i = 0; i < countCars; i += 1) {\n    cars.push({\n      name: `${getRandomBrand()} ${getRandomModel()}`,\n      color: getRandomColor(),\n    });\n  }\n  return cars;\n};\n\nexport default createRandomDataCars;\n","import ButtonModel from '../../../shared/Button/model/ButtonModel.ts';\nimport { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport PAGINATION_STYLES from './pagination.module.scss';\n\nclass PaginationView {\n  private paginationWrapper: HTMLDivElement;\n\n  private currentPageSpan: HTMLSpanElement;\n\n  private prevButton: ButtonModel;\n\n  private nextButton: ButtonModel;\n\n  constructor() {\n    this.currentPageSpan = this.createCurrentPageSpan();\n    this.prevButton = this.createPrevButton();\n    this.nextButton = this.createNextButton();\n    this.paginationWrapper = this.createHTML();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.paginationWrapper;\n  }\n\n  public getCurrentPageSpan(): HTMLSpanElement {\n    return this.currentPageSpan;\n  }\n\n  public getPrevButton(): ButtonModel {\n    return this.prevButton;\n  }\n\n  public getNextButton(): ButtonModel {\n    return this.nextButton;\n  }\n\n  private createCurrentPageSpan(): HTMLSpanElement {\n    this.currentPageSpan = createBaseElement({\n      tag: TAG_NAMES.SPAN,\n      cssClasses: [PAGINATION_STYLES.pagination_current_page],\n    });\n    return this.currentPageSpan;\n  }\n\n  private createPrevButton(): ButtonModel {\n    const text = 'prev';\n    this.prevButton = new ButtonModel({\n      text,\n      classes: [PAGINATION_STYLES.pagination_button],\n    });\n\n    this.prevButton.setDisabled();\n    return this.prevButton;\n  }\n\n  private createNextButton(): ButtonModel {\n    const text = 'next';\n    this.nextButton = new ButtonModel({\n      text,\n      classes: [PAGINATION_STYLES.pagination_button],\n    });\n\n    return this.nextButton;\n  }\n\n  private createHTML(): HTMLDivElement {\n    this.paginationWrapper = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [PAGINATION_STYLES.pagination_wrapper],\n    });\n\n    this.paginationWrapper.append(\n      this.currentPageSpan,\n      this.prevButton.getHTML(),\n      this.nextButton.getHTML(),\n    );\n    return this.paginationWrapper;\n  }\n}\n\nexport default PaginationView;\n","const STORE_FIELDS = {\n  CARS: 'cars',\n  WINNERS: 'winners',\n  GARAGE_PAGE: 'garagePage',\n  WINNERS_PAGE: 'winnersPage',\n  TOTAL_GARAGE_PAGES: 'totalGaragePages',\n  TOTAL_WINNERS_PAGES: 'totalWinnersPages',\n} as const;\n\nexport default STORE_FIELDS;\n","import { EVENT_NAMES } from '../../../shared/types/enums.ts';\nimport PaginationView from '../view/PaginationView.ts';\nimport StoreModel from '../../../shared/Store/model/StoreModel.ts';\nimport ACTIONS from '../../../shared/Store/actions/types/enums.ts';\nimport MediatorModel from '../../../shared/Mediator/model/MediatorModel.ts';\nimport MEDIATOR_EVENTS from '../../../shared/Mediator/types/enums.ts';\nimport ApiModel from '../../../shared/Api/model/ApiModel.ts';\nimport { QUERY_VALUES } from '../../../shared/Api/types/enums.ts';\nimport STORE_FIELDS from '../../../shared/Store/types/enums.ts';\nimport PAGES_IDS from '../../../pages/types/enums.ts';\n\nclass PaginationModel {\n  private singletonMediator: MediatorModel<unknown> =\n    MediatorModel.getInstance();\n\n  private pageID;\n\n  private paginationView: PaginationView = new PaginationView();\n\n  private pagination: HTMLDivElement;\n\n  constructor(pageID: string) {\n    this.pageID = pageID;\n    this.pagination = this.paginationView.getHTML();\n    this.init();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.pagination;\n  }\n\n  private loadDataAndSetPageInfo(data: unknown[], limit: number): void {\n    let type: (typeof ACTIONS)[keyof typeof ACTIONS];\n\n    if (this.pageID === PAGES_IDS.WINNERS_PAGE) {\n      type = ACTIONS.SET_TOTAL_WINNERS_PAGES;\n    } else {\n      type = ACTIONS.SET_TOTAL_GARAGE_PAGES;\n    }\n\n    if (data) {\n      const pageSpan = this.paginationView.getCurrentPageSpan();\n      const maxPage = Math.ceil(data.length / limit);\n      StoreModel.dispatch({\n        type,\n        payload: maxPage,\n      });\n      const currentPage =\n        type === ACTIONS.SET_TOTAL_GARAGE_PAGES\n          ? StoreModel.getState().garagePage\n          : StoreModel.getState().winnersPage;\n      const textContent = `Page: ${currentPage} / ${maxPage} `;\n      pageSpan.textContent = textContent;\n    }\n  }\n\n  private initPageInfo(): void {\n    if (this.pageID === PAGES_IDS.GARAGE_PAGE) {\n      ApiModel.getCars(new Map())\n        .then((cars) => {\n          if (cars) {\n            this.loadDataAndSetPageInfo(cars, QUERY_VALUES.DEFAULT_CARS_LIMIT);\n          }\n        })\n        .catch(() => {});\n    } else {\n      ApiModel.getWinners(new Map())\n        .then((winners) => {\n          if (winners) {\n            this.loadDataAndSetPageInfo(\n              winners,\n              QUERY_VALUES.DEFAULT_WINNERS_LIMIT,\n            );\n          }\n        })\n        .catch(() => {});\n    }\n  }\n\n  private redrawPageInfo(currentPage: number): void {\n    const pageSpan = this.paginationView.getCurrentPageSpan();\n    let maxPage = 0;\n    if (this.pageID === PAGES_IDS.GARAGE_PAGE) {\n      maxPage = StoreModel.getState().totalGaragePages;\n    } else {\n      maxPage = StoreModel.getState().totalWinnersPages;\n    }\n    const textContent = `Page: ${currentPage} / ${maxPage} `;\n    pageSpan.textContent = textContent;\n  }\n\n  private prevButtonHandler(): void {\n    const nextButton = this.paginationView.getNextButton();\n    nextButton.setEnabled();\n    if (this.pageID === PAGES_IDS.GARAGE_PAGE) {\n      const garagePageCountDec = StoreModel.getState().garagePage - 1;\n      StoreModel.dispatch({\n        type: ACTIONS.CHANGE_GARAGE_PAGE,\n        payload: garagePageCountDec,\n      });\n      this.checkButtons();\n      this.redrawPageInfo(garagePageCountDec);\n    } else {\n      const winnersPageCountDec = StoreModel.getState().winnersPage - 1;\n      StoreModel.dispatch({\n        type: ACTIONS.CHANGE_WINNERS_PAGE,\n        payload: winnersPageCountDec,\n      });\n      this.checkButtons();\n      this.redrawPageInfo(winnersPageCountDec);\n    }\n  }\n\n  private nextButtonHandler(): void {\n    const prevButton = this.paginationView.getPrevButton();\n    prevButton.setEnabled();\n    if (this.pageID === PAGES_IDS.GARAGE_PAGE) {\n      const garagePageCountInc = StoreModel.getState().garagePage + 1;\n      StoreModel.dispatch({\n        type: ACTIONS.CHANGE_GARAGE_PAGE,\n        payload: garagePageCountInc,\n      });\n      this.checkButtons();\n      this.redrawPageInfo(garagePageCountInc);\n    } else {\n      const winnersPageCountInc = StoreModel.getState().winnersPage + 1;\n      StoreModel.dispatch({\n        type: ACTIONS.CHANGE_WINNERS_PAGE,\n        payload: winnersPageCountInc,\n      });\n      this.checkButtons();\n      this.redrawPageInfo(winnersPageCountInc);\n    }\n  }\n\n  private checkButtons(): void {\n    const prevButton = this.paginationView.getPrevButton();\n    const nextButton = this.paginationView.getNextButton();\n    if (this.pageID === PAGES_IDS.GARAGE_PAGE) {\n      const { garagePage } = StoreModel.getState();\n      const { totalGaragePages } = StoreModel.getState();\n      if (garagePage === totalGaragePages || totalGaragePages === 0) {\n        nextButton.setDisabled();\n      } else {\n        nextButton.setEnabled();\n      }\n      if (StoreModel.getState().garagePage === 1) {\n        prevButton.setDisabled();\n      } else {\n        prevButton.setEnabled();\n      }\n    } else {\n      const { winnersPage } = StoreModel.getState();\n      const { totalWinnersPages } = StoreModel.getState();\n      if (winnersPage === totalWinnersPages || totalWinnersPages === 0) {\n        nextButton.setDisabled();\n      } else {\n        nextButton.setEnabled();\n      }\n      if (StoreModel.getState().winnersPage === 1) {\n        prevButton.setDisabled();\n      } else {\n        prevButton.setEnabled();\n      }\n    }\n  }\n\n  private allDisabledButton(): void {\n    const prevButton = this.paginationView.getPrevButton();\n    const nextButton = this.paginationView.getNextButton();\n    prevButton.setDisabled();\n    nextButton.setDisabled();\n  }\n\n  private setSubscribeToMediatorGarage(): void {\n    const prevButton = this.paginationView.getPrevButton();\n    const nextButton = this.paginationView.getNextButton();\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.CREATE_MORE_CARS, () => {\n      this.initPageInfo();\n      this.checkButtons();\n    });\n\n    this.singletonMediator.subscribe(\n      MEDIATOR_EVENTS.CHANGE_TOTAL_GARAGE_PAGES,\n      () => {\n        this.initPageInfo();\n        this.checkButtons();\n      },\n    );\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.DELETE_CAR, () => {\n      this.initPageInfo();\n      this.checkButtons();\n    });\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.CREATE_CAR, () => {\n      this.checkButtons();\n    });\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.START_RACE, () => {\n      this.allDisabledButton();\n    });\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.EMPTY_RACE, () => {\n      this.checkButtons();\n    });\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.SINGLE_RACE_START, () => {\n      prevButton.setDisabled();\n      nextButton.setDisabled();\n    });\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.SINGLE_RACE_RESET, () => {\n      this.checkButtons();\n    });\n  }\n\n  private setSubscribeToMediatorWinners(): void {\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.DELETE_WINNER, () => {\n      this.initPageInfo();\n      this.checkButtons();\n    });\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.DRAW_NEW_WINNER, () => {\n      this.initPageInfo();\n      this.checkButtons();\n    });\n  }\n\n  private init(): void {\n    this.initPageInfo();\n    this.checkButtons();\n    const prevButton = this.paginationView.getPrevButton();\n    const nextButton = this.paginationView.getNextButton();\n\n    prevButton.getHTML().addEventListener(EVENT_NAMES.CLICK, () => {\n      this.prevButtonHandler();\n      if (this.pageID === PAGES_IDS.GARAGE_PAGE) {\n        this.singletonMediator.notify(MEDIATOR_EVENTS.CHANGE_GARAGE_PAGE, '');\n      } else {\n        this.singletonMediator.notify(MEDIATOR_EVENTS.CHANGE_WINNERS_PAGE, '');\n      }\n    });\n\n    nextButton.getHTML().addEventListener(EVENT_NAMES.CLICK, () => {\n      this.nextButtonHandler();\n      if (this.pageID === PAGES_IDS.GARAGE_PAGE) {\n        this.singletonMediator.notify(MEDIATOR_EVENTS.CHANGE_GARAGE_PAGE, '');\n      } else {\n        this.singletonMediator.notify(MEDIATOR_EVENTS.CHANGE_WINNERS_PAGE, '');\n      }\n    });\n\n    if (this.pageID === PAGES_IDS.GARAGE_PAGE) {\n      this.setSubscribeToMediatorGarage();\n    } else {\n      this.setSubscribeToMediatorWinners();\n    }\n\n    StoreModel.subscribe(STORE_FIELDS.WINNERS_PAGE, () => {\n      this.initPageInfo();\n      this.checkButtons();\n    });\n  }\n}\n\nexport default PaginationModel;\n","import { QUERY_PARAMS, QUERY_VALUES } from '../../../shared/Api/types/enums.ts';\nimport StoreModel from '../../../shared/Store/model/StoreModel.ts';\nimport type PageInterface from '../../types/interfaces.ts';\nimport GaragePageView from '../view/GaragePageView.ts';\nimport GARAGE_PAGE_STYLES from '../view/garagePage.module.scss';\nimport ApiModel from '../../../shared/Api/model/ApiModel.ts';\nimport ACTIONS from '../../../shared/Store/actions/types/enums.ts';\nimport type {\n  CarInterface,\n  WinnerInterface,\n} from '../../../shared/Api/types/interfaces.ts';\nimport RaceTrackModel from '../../../entities/RaceTrack/model/RaceTrackModel.ts';\nimport CreateCarFormModel from '../../../widgets/CreateCarForm/model/CreateCarFormModel.ts';\nimport MediatorModel from '../../../shared/Mediator/model/MediatorModel.ts';\nimport MEDIATOR_EVENTS from '../../../shared/Mediator/types/enums.ts';\nimport PreviewCarModel from '../../../features/PreviewCar/model/PreviewCarModel.ts';\nimport ChangeCarFormModel from '../../../widgets/ChangeCarForm/model/ChangeCarFormModel.ts';\nimport type ButtonModel from '../../../shared/Button/model/ButtonModel.ts';\nimport { EVENT_NAMES } from '../../../shared/types/enums.ts';\nimport createRandomDataCars from '../../../utils/createRandomDataCars.ts';\nimport PaginationModel from '../../../features/Pagination/model/PaginationModel.ts';\nimport LoaderModel from '../../../shared/Loader/model/LoaderModel.ts';\nimport PAGES_IDS, { MORE_COUNT_CARS } from '../../types/enums.ts';\nimport type NewWinner from '../../../entities/RaceTrack/types/interfaces.ts';\nimport Winner from '../../../utils/isWinner.ts';\n\nclass GaragePageModel implements PageInterface {\n  private singletonMediator: MediatorModel<unknown> =\n    MediatorModel.getInstance();\n\n  private garagePageView: GaragePageView;\n\n  private raceTracks: RaceTrackModel[] = [];\n\n  private createCarForm: CreateCarFormModel = new CreateCarFormModel();\n\n  private removeButtons: ButtonModel[] = [];\n\n  private countCarsInRace = 0;\n\n  private changeCarForm: ChangeCarFormModel = new ChangeCarFormModel();\n\n  private isWinner = false;\n\n  private winner: NewWinner = {\n    id: 0,\n    wins: 0,\n    time: 0,\n    name: '',\n  };\n\n  private previewCar: PreviewCarModel = new PreviewCarModel();\n\n  private pagination: PaginationModel = new PaginationModel(\n    PAGES_IDS.GARAGE_PAGE,\n  );\n\n  constructor(parent: HTMLDivElement) {\n    this.garagePageView = new GaragePageView(parent);\n    this.init();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.garagePageView.getHTML();\n  }\n\n  private switchVisible(): void {\n    this.garagePageView\n      .getHTML()\n      .classList.toggle(GARAGE_PAGE_STYLES['garage-page--hidden']);\n  }\n\n  private getInitialDataCars(): void {\n    const queryParams: Map<string, number> = new Map();\n    queryParams.set(QUERY_PARAMS.PAGE, QUERY_VALUES.DEFAULT_PAGE);\n    queryParams.set(QUERY_PARAMS.LIMIT, QUERY_VALUES.DEFAULT_CARS_LIMIT);\n    const loader = new LoaderModel();\n\n    this.garagePageView.getRaceTracksList().append(loader.getHTML());\n    ApiModel.getCars(queryParams)\n      .then((cars) => {\n        if (cars) {\n          this.drawRaceTracks(cars);\n          loader.getHTML().remove();\n        }\n      })\n      .catch(() => {});\n\n    this.getAllCars();\n  }\n\n  private getAllCars(): void {\n    const loader = new LoaderModel();\n    this.garagePageView.getGarageTitle().append(loader.getHTML());\n    ApiModel.getCars(new Map())\n      .then((cars) => {\n        if (cars) {\n          StoreModel.dispatch({\n            type: ACTIONS.GET_CARS,\n            payload: cars,\n          });\n          StoreModel.dispatch({\n            type: ACTIONS.SET_TOTAL_GARAGE_PAGES,\n            payload: Math.ceil(cars.length / QUERY_VALUES.DEFAULT_CARS_LIMIT),\n          });\n          this.singletonMediator.notify(\n            MEDIATOR_EVENTS.CHANGE_TOTAL_GARAGE_PAGES,\n            '',\n          );\n          this.drawGarageTitle();\n        }\n      })\n      .catch(() => {});\n  }\n\n  private drawGarageTitle(): void {\n    const title = this.garagePageView.getGarageTitle();\n    const countCars = StoreModel.getState().cars.length;\n    const textContent = `Garage (${countCars})`;\n    title.textContent = textContent;\n  }\n\n  private drawRaceTracks(cars: CarInterface[]): void {\n    this.raceTracks = [];\n    const countCarsToList =\n      this.garagePageView.getRaceTracksList().children.length;\n\n    if (countCarsToList < QUERY_VALUES.DEFAULT_CARS_LIMIT) {\n      cars.forEach((car) => {\n        const raceTrack = new RaceTrackModel(car);\n        this.raceTracks.push(raceTrack);\n        this.removeButtons.push(raceTrack.getView().getRemoveCarButton());\n        this.garagePageView.getRaceTracksList().append(raceTrack.getHTML());\n      });\n    }\n  }\n\n  private moreCarsHandler(): void {\n    const cars = createRandomDataCars(MORE_COUNT_CARS);\n    StoreModel.dispatch({\n      type: ACTIONS.ADD_NEW_CAR,\n      payload: cars,\n    });\n    const loader = new LoaderModel();\n    this.garagePageView.getRaceTracksList().append(loader.getHTML());\n    cars.forEach((car) => {\n      this.garagePageView.getStartRaceButton().setDisabled();\n      ApiModel.createCar(car)\n        .then(() => {\n          this.drawRaceTracks([car]);\n          this.singletonMediator.notify(MEDIATOR_EVENTS.CREATE_MORE_CARS, '');\n          this.garagePageView.getStartRaceButton().setEnabled();\n        })\n        .catch(() => {});\n    });\n    loader.getHTML().remove();\n  }\n\n  private redrawCurrentPage(): void {\n    const currentPage = StoreModel.getState().garagePage;\n    const queryParams: Map<string, number> = new Map();\n    queryParams.set(QUERY_PARAMS.LIMIT, QUERY_VALUES.DEFAULT_CARS_LIMIT);\n    if (this.garagePageView.getRaceTracksList().children.length === 0) {\n      const prevPage = currentPage - 1;\n      queryParams.set(QUERY_PARAMS.PAGE, prevPage);\n      StoreModel.dispatch({\n        type: ACTIONS.CHANGE_GARAGE_PAGE,\n        payload: prevPage,\n      });\n    } else {\n      queryParams.set(QUERY_PARAMS.PAGE, currentPage);\n    }\n\n    const loader = new LoaderModel();\n    this.garagePageView.getRaceTracksList().append(loader.getHTML());\n    ApiModel.getCars(queryParams)\n      .then((data) => {\n        if (data) {\n          this.garagePageView.clearRaceTracksList();\n          this.drawRaceTracks(data);\n        }\n      })\n      .catch(() => {});\n  }\n\n  private startRaceHandler(): void {\n    this.countCarsInRace = this.raceTracks.length;\n    this.allDisabled();\n    this.raceTracks.forEach((raceTrack) => {\n      raceTrack.startEngineHandler().catch(() => {});\n    });\n    this.singletonMediator.notify(MEDIATOR_EVENTS.START_RACE, '');\n  }\n\n  private resetRaceHandler(): void {\n    this.garagePageView\n      .getRaceResult()\n      .classList.remove(GARAGE_PAGE_STYLES['garage-page_race-result_show']);\n    this.garagePageView.getRaceResult().innerHTML = '';\n    this.isWinner = false;\n    this.raceTracks.forEach((raceTrack) => {\n      raceTrack.stopEngineHandler();\n    });\n    this.singletonMediator.notify(MEDIATOR_EVENTS.RESET_RACE, '');\n  }\n\n  private drawWinner(): void {\n    this.garagePageView\n      .getRaceResult()\n      .classList.add(GARAGE_PAGE_STYLES['garage-page_race-result_show']);\n    this.garagePageView.getRaceResult().innerHTML = '';\n    const text = `Winner: ${this.winner.name} - ${this.winner.time}s`;\n    this.garagePageView.getRaceResult().textContent = text;\n  }\n\n  private hasWinner(winner: WinnerInterface): void {\n    if (winner.wins) {\n      const currentWinner = {\n        id: winner.id,\n        wins: winner.wins + 1,\n        time: this.winner.time < winner.time ? this.winner.time : winner.time,\n      };\n\n      if (!currentWinner.id) {\n        return;\n      }\n\n      ApiModel.updateWinnerById(currentWinner.id, currentWinner)\n        .then(() => {\n          this.singletonMediator.notify(MEDIATOR_EVENTS.DRAW_NEW_WINNER, '');\n        })\n        .catch(() => {});\n    } else {\n      if (!this.winner.id) {\n        return;\n      }\n      const newWinnerData: WinnerInterface = {\n        id: this.winner.id,\n        wins: this.winner.wins,\n        time: this.winner.time,\n      };\n      ApiModel.createWinner(newWinnerData)\n        .then(() => {\n          this.singletonMediator.notify(MEDIATOR_EVENTS.DRAW_NEW_WINNER, '');\n        })\n        .catch(() => {});\n    }\n  }\n\n  private addNewWinner(): void {\n    if (!this.winner.id) {\n      return;\n    }\n\n    ApiModel.getWinnerById(this.winner.id)\n      .then((winner) => {\n        if (winner) {\n          this.hasWinner(winner);\n        }\n      })\n      .catch(() => {});\n  }\n\n  private allDisabled(): void {\n    this.garagePageView.getMoreCarsButton().setDisabled();\n    this.garagePageView.getStartRaceButton().setDisabled();\n    this.garagePageView.getResetRaceButton().setDisabled();\n    this.raceTracks.forEach((raceTrack) => {\n      raceTrack.getView().getSelectCarButton().setDisabled();\n      raceTrack.getView().getRemoveCarButton().setDisabled();\n    });\n  }\n\n  private allEnabled(): void {\n    this.garagePageView.getMoreCarsButton().setEnabled();\n    this.garagePageView.getStartRaceButton().setEnabled();\n    this.garagePageView.getResetRaceButton().setEnabled();\n    this.raceTracks.forEach((raceTrack) => {\n      raceTrack.getView().getSelectCarButton().setEnabled();\n      raceTrack.getView().getRemoveCarButton().setEnabled();\n    });\n  }\n\n  private setSubscribeToMediator(): void {\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.CREATE_CAR, () => {\n      this.drawGarageTitle();\n      this.redrawCurrentPage();\n      this.getAllCars();\n    });\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.CREATE_MORE_CARS, () => {\n      this.drawGarageTitle();\n      this.redrawCurrentPage();\n      this.getAllCars();\n    });\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.DELETE_CAR, () => {\n      this.drawGarageTitle();\n      this.redrawCurrentPage();\n    });\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.UPDATE_CAR, () => {\n      this.removeButtons.forEach((button) => {\n        button.setEnabled();\n      });\n      this.redrawCurrentPage();\n    });\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.CHANGE_GARAGE_PAGE, () => {\n      this.redrawCurrentPage();\n    });\n\n    this.singletonMediator.subscribe(\n      MEDIATOR_EVENTS.SINGLE_RACE_START,\n      this.allDisabled.bind(this),\n    );\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.NEW_WINNER, (params) => {\n      this.decCarInRace();\n      if (!this.isWinner && Winner.isWinner(params)) {\n        this.winner = params;\n        this.isWinner = true;\n        this.drawWinner();\n        this.addNewWinner();\n      }\n    });\n  }\n\n  private decCarInRace(): void {\n    this.countCarsInRace -= 1;\n    if (this.countCarsInRace === 0) {\n      this.garagePageView.getResetRaceButton().setEnabled();\n    }\n  }\n\n  private incCarInRace(): void {\n    this.countCarsInRace += 1;\n    if (this.countCarsInRace === this.raceTracks.length) {\n      this.garagePageView.getResetRaceButton().setDisabled();\n      this.garagePageView.getStartRaceButton().setEnabled();\n      this.garagePageView.getMoreCarsButton().setEnabled();\n      this.singletonMediator.notify(MEDIATOR_EVENTS.EMPTY_RACE, '');\n    }\n  }\n\n  private setSubscribeToMediator2(): void {\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.CHANGE_PAGE, () => {\n      this.switchVisible();\n    });\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.CAR_BROKEN, () => {\n      this.decCarInRace();\n    });\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.RESET_CURRENT_CAR, () => {\n      this.incCarInRace();\n    });\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.SINGLE_RACE_RESET, () => {\n      this.allEnabled();\n    });\n  }\n\n  private init(): void {\n    this.getInitialDataCars();\n    this.setSubscribeToMediator();\n    this.setSubscribeToMediator2();\n    this.switchVisible();\n\n    const moreCarsButton = this.garagePageView.getMoreCarsButton().getHTML();\n    moreCarsButton.addEventListener(\n      EVENT_NAMES.CLICK,\n      this.moreCarsHandler.bind(this),\n    );\n\n    const raceTrackTopWrapper = this.garagePageView.getRaceTrackTopWrapper();\n    const raceTrackBottomWrapper =\n      this.garagePageView.getRaceTrackBottomWrapper();\n\n    const startRaceButton = this.garagePageView.getStartRaceButton().getHTML();\n    startRaceButton.addEventListener(\n      EVENT_NAMES.CLICK,\n      this.startRaceHandler.bind(this),\n    );\n\n    const resetRaceButton = this.garagePageView.getResetRaceButton().getHTML();\n    resetRaceButton.addEventListener(\n      EVENT_NAMES.CLICK,\n      this.resetRaceHandler.bind(this),\n    );\n\n    raceTrackBottomWrapper.append(this.pagination.getHTML());\n    raceTrackTopWrapper.append(\n      this.createCarForm.getHTML(),\n      this.previewCar.getHTML(),\n      this.changeCarForm.getHTML(),\n    );\n  }\n}\n\nexport default GaragePageModel;\n","import { THEAD_TD_IDS, WINNERS_SVG_DETAILS } from '../../types/enums.ts';\nimport { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport WINNERS_PAGE_STYLES from './winnersPage.module.scss';\nimport type { WinnerInfo } from '../../types/interfaces.ts';\nimport { changeSVGFill, createSVGUse } from '../../../utils/createCarImg.ts';\n\nclass WinnersPageView {\n  private winnersTitle: HTMLHeadingElement;\n\n  private winnersTableTbody: HTMLTableSectionElement;\n\n  private winnersTableTheadTdArr: HTMLTableCellElement[] = [];\n\n  private winnerSvgArr: SVGSVGElement[] = [];\n\n  private winnersTableTheadTr: HTMLTableRowElement;\n\n  private winnersTableThead: HTMLTableSectionElement;\n\n  private winnersTable: HTMLTableElement;\n\n  private pageWrapper: HTMLDivElement;\n\n  private page: HTMLDivElement;\n\n  constructor(parent: HTMLDivElement) {\n    this.winnersTitle = this.createWinnersTitle();\n    this.winnersTableTbody = this.createWinnersTableTbody();\n    this.winnersTableTheadTr = this.createWinnersTableTheadTr();\n    this.winnersTableThead = this.createWinnersTableThead();\n    this.winnersTable = this.createWinnersTable();\n    this.pageWrapper = this.createPageWrapper();\n    this.page = this.createHTML(parent);\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.page;\n  }\n\n  public getWinnersTitle(): HTMLHeadingElement {\n    return this.winnersTitle;\n  }\n\n  public getWinnersTable(): HTMLTableElement {\n    return this.winnersTable;\n  }\n\n  public getWinnersTableTbody(): HTMLTableSectionElement {\n    return this.winnersTableTbody;\n  }\n\n  public getWinnersTableTheadTr(): HTMLTableRowElement {\n    return this.winnersTableTheadTr;\n  }\n\n  public clearWinnersTableTbody(): void {\n    this.winnersTableTbody.innerHTML = '';\n  }\n\n  public getPageWrapper(): HTMLDivElement {\n    return this.pageWrapper;\n  }\n\n  public createWinnersTableBodyTr(winner: WinnerInfo): HTMLTableRowElement {\n    const winnersTableBodyTr = createBaseElement({\n      tag: TAG_NAMES.TR,\n      cssClasses: [WINNERS_PAGE_STYLES['winners-page_table_body-tr']],\n    });\n\n    const idTd = this.createWinnersTableTbodyTd();\n    idTd.classList.add(WINNERS_PAGE_STYLES['winners-page_table_body-td']);\n    idTd.textContent = winner.id.toString();\n\n    const carTd = this.createWinnersTableTbodyTd();\n    carTd.classList.add(WINNERS_PAGE_STYLES['winners-page_table_body-td']);\n    carTd.append(this.createWinnerSvg(winner));\n\n    const nameTd = this.createWinnersTableTbodyTd();\n    nameTd.classList.add(WINNERS_PAGE_STYLES['winners-page_table_body-td']);\n    nameTd.textContent = winner.car.name;\n\n    const winsTd = this.createWinnersTableTbodyTd();\n    winsTd.classList.add(WINNERS_PAGE_STYLES['winners-page_table_body-td']);\n    winsTd.textContent = winner.wins.toString();\n\n    const timeTd = this.createWinnersTableTbodyTd();\n    timeTd.classList.add(WINNERS_PAGE_STYLES['winners-page_table_body-td']);\n    timeTd.textContent = winner.time.toString();\n\n    winnersTableBodyTr.append(idTd, carTd, nameTd, winsTd, timeTd);\n    this.winnersTableTbody.append(winnersTableBodyTr);\n    return winnersTableBodyTr;\n  }\n\n  private createWinnerSvg(winner: WinnerInfo): SVGSVGElement {\n    const carSVG = document.createElementNS(\n      WINNERS_SVG_DETAILS.SVG_URL,\n      TAG_NAMES.SVG,\n    );\n    carSVG.classList.add(\n      WINNERS_PAGE_STYLES['winners-page_table_body-td_car-svg'],\n    );\n    carSVG.appendChild(createSVGUse(WINNERS_SVG_DETAILS.CAR_ID));\n    changeSVGFill(carSVG, winner.car.color);\n    this.winnerSvgArr.push(carSVG);\n    return carSVG;\n  }\n\n  private createWinnersTableTbodyTd(): HTMLTableCellElement {\n    const winnersTableTbodyTd = createBaseElement({\n      tag: TAG_NAMES.TD,\n      cssClasses: [WINNERS_PAGE_STYLES['winners-page_table_body-td']],\n    });\n\n    this.winnersTableTbody.append(winnersTableTbodyTd);\n    return winnersTableTbodyTd;\n  }\n\n  private createWinnersTitle(): HTMLHeadingElement {\n    this.winnersTitle = createBaseElement({\n      tag: TAG_NAMES.H2,\n      cssClasses: [WINNERS_PAGE_STYLES['winners-page_title']],\n    });\n    return this.winnersTitle;\n  }\n\n  private createWinnersTable(): HTMLTableElement {\n    this.winnersTable = createBaseElement({\n      tag: TAG_NAMES.TABLE,\n      cssClasses: [WINNERS_PAGE_STYLES['winners-page_table']],\n    });\n    return this.winnersTable;\n  }\n\n  private createWinnersTableThead(): HTMLTableSectionElement {\n    this.winnersTableThead = createBaseElement({\n      tag: TAG_NAMES.THEAD,\n      cssClasses: [WINNERS_PAGE_STYLES['winners-page_table_head']],\n    });\n    return this.winnersTableThead;\n  }\n\n  private createWinnersTableTheadTr(): HTMLTableRowElement {\n    this.winnersTableTheadTr = createBaseElement({\n      tag: TAG_NAMES.TR,\n      cssClasses: [WINNERS_PAGE_STYLES['winners-page_table_head-tr']],\n    });\n    return this.winnersTableTheadTr;\n  }\n\n  private createWinnersTableTheadTd(id: string): void {\n    const winnersTableTheadTd = createBaseElement({\n      tag: TAG_NAMES.TD,\n      cssClasses: [\n        WINNERS_PAGE_STYLES['winners-page_table_head-td'],\n        WINNERS_PAGE_STYLES.top,\n      ],\n      attributes: {\n        id,\n      },\n      innerContent: id,\n    });\n    this.winnersTableTheadTdArr.push(winnersTableTheadTd);\n  }\n\n  private createWinnersTableTbody(): HTMLTableSectionElement {\n    this.winnersTableTbody = createBaseElement({\n      tag: TAG_NAMES.TBODY,\n      cssClasses: [WINNERS_PAGE_STYLES['winners-page_table_body']],\n    });\n    return this.winnersTableTbody;\n  }\n\n  private createPageWrapper(): HTMLDivElement {\n    this.pageWrapper = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [WINNERS_PAGE_STYLES['winners-page_wrapper']],\n    });\n\n    return this.pageWrapper;\n  }\n\n  private createHTML(parent: HTMLDivElement): HTMLDivElement {\n    this.page = createBaseElement({\n      tag: TAG_NAMES.DIV,\n      cssClasses: [WINNERS_PAGE_STYLES['winners-page']],\n    });\n\n    THEAD_TD_IDS.forEach((id) => {\n      this.createWinnersTableTheadTd(id);\n    });\n    this.winnersTableTheadTr.append(...this.winnersTableTheadTdArr);\n    this.winnersTableThead.append(this.winnersTableTheadTr);\n    this.winnersTable.append(this.winnersTableThead, this.winnersTableTbody);\n    this.pageWrapper.append(this.winnersTitle, this.winnersTable);\n    this.page.append(this.pageWrapper);\n    parent.append(this.page);\n\n    return this.page;\n  }\n}\nexport default WinnersPageView;\n","import MEDIATOR_EVENTS from '../../../shared/Mediator/types/enums.ts';\nimport MediatorModel from '../../../shared/Mediator/model/MediatorModel.ts';\nimport type PageInterface from '../../types/interfaces.ts';\nimport WinnersPageView from '../view/WinnersPageView.ts';\nimport WINNERS_PAGE_STYLES from '../view/winnersPage.module.scss';\nimport { QUERY_PARAMS, QUERY_VALUES } from '../../../shared/Api/types/enums.ts';\nimport ApiModel from '../../../shared/Api/model/ApiModel.ts';\nimport type { WinnerInterface } from '../../../shared/Api/types/interfaces.ts';\nimport type { WinnerInfo } from '../../types/interfaces.ts';\nimport StoreModel from '../../../shared/Store/model/StoreModel.ts';\nimport ACTIONS from '../../../shared/Store/actions/types/enums.ts';\nimport PaginationModel from '../../../features/Pagination/model/PaginationModel.ts';\nimport PAGES_IDS from '../../types/enums.ts';\nimport { EVENT_NAMES } from '../../../shared/types/enums.ts';\n\nclass WinnersPageModel implements PageInterface {\n  private winnersPageView: WinnersPageView;\n\n  private pagination: PaginationModel = new PaginationModel(\n    PAGES_IDS.WINNERS_PAGE,\n  );\n\n  private winnerInfo: WinnerInfo = {\n    id: 0,\n    time: 0,\n    wins: 0,\n    car: {\n      id: 0,\n      name: '',\n      color: '',\n    },\n  };\n\n  private bySort = QUERY_VALUES.ID;\n\n  private byOrder = QUERY_VALUES.ASC;\n\n  private allWinnersData: WinnerInfo[] = [];\n\n  private singletonMediator: MediatorModel<unknown> =\n    MediatorModel.getInstance();\n\n  constructor(parent: HTMLDivElement) {\n    this.winnersPageView = new WinnersPageView(parent);\n    this.init().catch(() => {});\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.winnersPageView.getHTML();\n  }\n\n  private switchVisible(): void {\n    this.winnersPageView\n      .getHTML()\n      .classList.toggle(WINNERS_PAGE_STYLES['winners-page--hidden']);\n  }\n\n  private async getWinnerInfo(\n    winner: WinnerInterface,\n  ): Promise<WinnerInfo | undefined> {\n    if (winner.id) {\n      const car = await ApiModel.getCarById(winner.id);\n      if (car && winner.id) {\n        this.winnerInfo = {\n          id: winner.id,\n          time: winner.time,\n          wins: winner.wins,\n          car,\n        };\n      }\n    }\n\n    return this.winnerInfo;\n  }\n\n  private async getWinnersData(\n    winners: WinnerInterface[],\n  ): Promise<WinnerInfo[]> {\n    const winnerPromises: Promise<WinnerInfo | undefined>[] = winners.map(\n      (winner) => this.getWinnerInfo(winner),\n    );\n    const winnersData: (WinnerInfo | undefined)[] =\n      await Promise.all(winnerPromises);\n    return winnersData.filter(\n      (winnerInfo): winnerInfo is WinnerInfo => winnerInfo !== undefined,\n    );\n  }\n\n  private async fetchAndDrawWinnersData(\n    queryParams: Map<string, number | string>,\n  ): Promise<void> {\n    const winners = await ApiModel.getWinners(queryParams);\n    if (!winners) {\n      return;\n    }\n\n    this.winnersPageView.clearWinnersTableTbody();\n    this.allWinnersData = [];\n\n    const winnersData = await this.getWinnersData(winners);\n    this.allWinnersData.push(...winnersData);\n    this.drawWinnerLines(winnersData);\n  }\n\n  private drawWinnerLines(winners: WinnerInfo[]): void {\n    const countWinnerLines =\n      this.winnersPageView.getWinnersTableTbody().children.length;\n\n    if (countWinnerLines < QUERY_VALUES.DEFAULT_WINNERS_LIMIT) {\n      winners.forEach((winner) => {\n        const winnerTr = this.winnersPageView.createWinnersTableBodyTr(winner);\n        this.winnersPageView.getWinnersTableTbody().append(winnerTr);\n      });\n    }\n  }\n\n  private async redrawCurrentPage(): Promise<void> {\n    const currentPage = StoreModel.getState().winnersPage;\n    const queryParams: Map<string, number | string> = new Map();\n    queryParams.set(QUERY_PARAMS.LIMIT, QUERY_VALUES.DEFAULT_WINNERS_LIMIT);\n    queryParams.set(QUERY_PARAMS.PAGE, currentPage);\n    queryParams.set(QUERY_PARAMS.SORT, this.bySort);\n    queryParams.set(QUERY_PARAMS.ORDER, this.byOrder);\n    await ApiModel.getWinners(queryParams)\n      .then((winners) => {\n        if (!winners?.length) {\n          const prevPage = currentPage - 1;\n          queryParams.delete(QUERY_PARAMS.PAGE);\n          queryParams.set(QUERY_PARAMS.PAGE, prevPage);\n          StoreModel.dispatch({\n            type: ACTIONS.CHANGE_WINNERS_PAGE,\n            payload: prevPage,\n          });\n        } else {\n          queryParams.set(QUERY_PARAMS.PAGE, currentPage);\n        }\n      })\n      .catch(() => {});\n\n    await this.fetchAndDrawWinnersData(queryParams);\n  }\n\n  private drawWinnersTitle(): void {\n    const winnersTitle = this.winnersPageView.getWinnersTitle();\n    ApiModel.getWinners(new Map())\n      .then((winners) => {\n        const textContent = `Winners (${winners?.length})`;\n        winnersTitle.textContent = textContent;\n      })\n      .catch(() => {});\n  }\n\n  private subscribeToMediator(): void {\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.CHANGE_PAGE, () => {\n      this.switchVisible();\n    });\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.DRAW_NEW_WINNER, () => {\n      this.redrawCurrentPage().catch(() => {});\n      this.drawWinnersTitle();\n    });\n\n    this.singletonMediator.subscribe(\n      MEDIATOR_EVENTS.CHANGE_WINNERS_PAGE,\n      () => {\n        this.redrawCurrentPage().catch(() => {});\n      },\n    );\n\n    this.singletonMediator.subscribe(MEDIATOR_EVENTS.DELETE_WINNER, () => {\n      this.redrawCurrentPage().catch(() => {});\n      this.drawWinnersTitle();\n    });\n  }\n\n  private setTableHeadHandler(): void {\n    const winnersTableTheadTr = this.winnersPageView.getWinnersTableTheadTr();\n    winnersTableTheadTr.addEventListener(\n      EVENT_NAMES.CLICK,\n      (event: MouseEvent) => {\n        const { target } = event;\n        if (target instanceof HTMLElement) {\n          if (target.id === QUERY_VALUES.WINS) {\n            this.sortByWinsOrTime(target, target.id).catch(() => {});\n          } else if (target.id === QUERY_VALUES.TIME) {\n            this.sortByWinsOrTime(target, target.id).catch(() => {});\n          }\n        }\n      },\n    );\n  }\n\n  private async sortByWinsOrTime(\n    target: HTMLElement,\n    sortBy: string,\n  ): Promise<void> {\n    const currentPage = StoreModel.getState().winnersPage;\n    this.bySort = sortBy;\n    const queryParams: Map<string, number | string> = new Map();\n    queryParams.set(QUERY_PARAMS.LIMIT, QUERY_VALUES.DEFAULT_WINNERS_LIMIT);\n    queryParams.set(QUERY_PARAMS.PAGE, currentPage);\n    queryParams.set(QUERY_PARAMS.SORT, this.bySort);\n\n    if (target.classList.contains(WINNERS_PAGE_STYLES.bottom)) {\n      this.byOrder = QUERY_VALUES.DESC;\n      target.classList.replace(\n        WINNERS_PAGE_STYLES.bottom,\n        WINNERS_PAGE_STYLES.top,\n      );\n    } else {\n      this.byOrder = QUERY_VALUES.ASC;\n      target.classList.replace(\n        WINNERS_PAGE_STYLES.top,\n        WINNERS_PAGE_STYLES.bottom,\n      );\n    }\n\n    queryParams.set(QUERY_PARAMS.ORDER, this.byOrder);\n\n    const fetch = await this.fetchAndDrawWinnersData(queryParams);\n    return fetch;\n  }\n\n  private async init(): Promise<void> {\n    this.subscribeToMediator();\n    this.drawWinnersTitle();\n    this.winnersPageView.getPageWrapper().append(this.pagination.getHTML());\n    await this.fetchAndDrawWinnersData(\n      new Map([\n        [QUERY_PARAMS.PAGE, StoreModel.getState().winnersPage],\n        [QUERY_PARAMS.LIMIT, QUERY_VALUES.DEFAULT_WINNERS_LIMIT],\n      ]),\n    );\n    this.setTableHeadHandler();\n  }\n}\n\nexport default WinnersPageModel;\n","const HEADER_BUTTON_TEXT = {\n  GARAGE_BTN: 'To winners',\n  WINNERS_BTN: 'To garage',\n} as const;\n\nexport default HEADER_BUTTON_TEXT;\n","import ButtonModel from '../../../shared/Button/model/ButtonModel.ts';\nimport { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport HEADER_BUTTON_TEXT from '../types/enums.ts';\nimport HEADER_STYLES from './header.module.scss';\n\nclass HeaderView {\n  private garageButton: ButtonModel;\n\n  private winnersButton: ButtonModel;\n\n  private header: HTMLElement;\n\n  constructor() {\n    this.garageButton = this.createGarageButton();\n    this.winnersButton = this.createWinnersButton();\n    this.header = this.createHTML();\n  }\n\n  public getHTML(): HTMLElement {\n    return this.header;\n  }\n\n  public getGarageButton(): ButtonModel {\n    return this.garageButton;\n  }\n\n  public getWinnersButton(): ButtonModel {\n    return this.winnersButton;\n  }\n\n  private createGarageButton(): ButtonModel {\n    this.garageButton = new ButtonModel({\n      text: HEADER_BUTTON_TEXT.GARAGE_BTN,\n      classes: [HEADER_STYLES['header__garage-button']],\n    });\n\n    return this.garageButton;\n  }\n\n  private createWinnersButton(): ButtonModel {\n    this.winnersButton = new ButtonModel({\n      text: HEADER_BUTTON_TEXT.WINNERS_BTN,\n      classes: [HEADER_STYLES['header__winners-button']],\n    });\n\n    return this.winnersButton;\n  }\n\n  private createHTML(): HTMLElement {\n    this.header = createBaseElement({\n      tag: TAG_NAMES.HEADER,\n      cssClasses: [HEADER_STYLES.header],\n    });\n\n    this.header.append(\n      this.winnersButton.getHTML(),\n      this.garageButton.getHTML(),\n    );\n    return this.header;\n  }\n}\n\nexport default HeaderView;\n","import MEDIATOR_EVENTS from '../../../shared/Mediator/types/enums.ts';\nimport type RouterModel from '../../../app/Router/model/RouterModel.ts';\nimport PAGES_IDS from '../../../pages/types/enums.ts';\nimport { EVENT_NAMES } from '../../../shared/types/enums.ts';\nimport HeaderView from '../view/HeaderView.ts';\nimport MediatorModel from '../../../shared/Mediator/model/MediatorModel.ts';\n\nclass HeaderModel {\n  private singletonMediator: MediatorModel<unknown> =\n    MediatorModel.getInstance();\n\n  private headerView: HeaderView = new HeaderView();\n\n  private router: RouterModel;\n\n  constructor(router: RouterModel) {\n    this.router = router;\n    this.init();\n  }\n\n  public getHTML(): HTMLElement {\n    return this.headerView.getHTML();\n  }\n\n  private setHandlerToButtons(): void {\n    const garageButton = this.headerView.getGarageButton().getHTML();\n    const winnersButton = this.headerView.getWinnersButton().getHTML();\n\n    garageButton.addEventListener(EVENT_NAMES.CLICK, () => {\n      this.router.navigateTo(PAGES_IDS.WINNERS_PAGE);\n    });\n\n    winnersButton.addEventListener(EVENT_NAMES.CLICK, () => {\n      this.router.navigateTo(PAGES_IDS.GARAGE_PAGE);\n    });\n  }\n\n  private allDisabledButton(): void {\n    const garageButton = this.headerView.getGarageButton();\n    const winnersButton = this.headerView.getWinnersButton();\n\n    garageButton.setDisabled();\n    winnersButton.setDisabled();\n  }\n\n  private allEnabled(): void {\n    const garageButton = this.headerView.getGarageButton();\n    const winnersButton = this.headerView.getWinnersButton();\n\n    garageButton.setEnabled();\n    winnersButton.setEnabled();\n  }\n\n  private subscribeToMediator(): void {\n    this.singletonMediator.subscribe(\n      MEDIATOR_EVENTS.START_RACE,\n      this.allDisabledButton.bind(this),\n    );\n\n    this.singletonMediator.subscribe(\n      MEDIATOR_EVENTS.SINGLE_RACE_START,\n      this.allDisabledButton.bind(this),\n    );\n\n    this.singletonMediator.subscribe(\n      MEDIATOR_EVENTS.EMPTY_RACE,\n      this.allEnabled.bind(this),\n    );\n\n    this.singletonMediator.subscribe(\n      MEDIATOR_EVENTS.SINGLE_RACE_RESET,\n      this.allEnabled.bind(this),\n    );\n  }\n\n  private init(): void {\n    this.subscribeToMediator();\n    this.setHandlerToButtons();\n  }\n}\n\nexport default HeaderModel;\n","import RouterModel from '../../Router/model/RouterModel.ts';\nimport PAGES_IDS from '../../../pages/types/enums.ts';\nimport AppView from '../view/AppView.ts';\nimport GaragePageModel from '../../../pages/GaragePage/model/GaragePageModel.ts';\nimport type PageInterface from '../../../pages/types/interfaces.ts';\nimport WinnersPageModel from '../../../pages/WinnersPage/model/WinnersPageModel.ts';\nimport HeaderModel from '../../../widgets/Header/model/HeaderModel.ts';\n\nclass AppModel {\n  private appView: AppView = new AppView();\n\n  private router: RouterModel;\n\n  constructor() {\n    this.router = new RouterModel(this.initPages());\n    this.appView.getHTML().prepend(new HeaderModel(this.router).getHTML());\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.appView.getHTML();\n  }\n\n  private initPages(): Map<string, PageInterface> {\n    const garagePage = new GaragePageModel(this.appView.getHTML());\n    const winnersPage = new WinnersPageModel(this.appView.getHTML());\n    const pages: Map<string, PageInterface> = new Map(\n      Object.entries({\n        [PAGES_IDS.DEFAULT_PAGE]: garagePage,\n        [PAGES_IDS.GARAGE_PAGE]: garagePage,\n        [PAGES_IDS.WINNERS_PAGE]: winnersPage,\n      }),\n    );\n    return pages;\n  }\n}\n\nexport default AppModel;\n","import AppModel from './app/App/model/AppModel.ts';\nimport './index.scss';\n\nconst myApp = new AppModel();\ndocument.body.append(myApp.getHTML());\n"],"names":["index","loader","_a","CarModel","CarBrand","fetch"],"mappings":"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"}