{"version":3,"file":"main-607d1afd.js","sources":["../../src/features/formValidation/types/enum.ts","../../src/features/formValidation/types/const.ts","../../src/shared/input/types/enums.ts","../../src/features/formValidation/model/FormValidationModel.ts","../../src/shared/types/enums.ts","../../src/utils/createBaseElement.ts","../../src/shared/input/view/InputView.ts","../../src/entities/inputField/model/InputFieldModal.ts","../../src/shared/button/types/enums.ts","../../src/shared/button/ui/ButtonView.ts","../../src/shared/button/model/ButtonModel.ts","../../src/entities/submitBtn/model/SubmitBtnModel.ts","../../src/widgets/loginForm/types/enum.ts","../../src/utils/formattedText.ts","../../src/widgets/loginForm/ui/LoginFormView.ts","../../src/widgets/loginForm/model/LoginFormModel.ts","../../src/pages/types/enums.ts","../../src/pages/core/mediator/model/MediatorModel.ts","../../src/app/Storage/types/enums.ts","../../src/pages/core/mediator/types/enums.ts","../../src/pages/logInPage/ui/LoginPageView.ts","../../src/pages/logInPage/model/LoginPageModel.ts","../../src/app/Storage/model/StorageModel.ts","../../src/pages/startPage/types/enums.ts","../../src/pages/startPage/ui/StartPageView.ts","../../src/pages/startPage/model/StartPageModel.ts","../../src/app/Router/model/RouterModel.ts","../../src/widgets/playground/types/constants.ts","../../src/widgets/playground/ui/imgSrc/imgSrc.ts","../../src/widgets/playground/ui/PlaygroundView.ts","../../src/entities/puzzle/Puzzle.ts","../../src/utils/isNewData.ts","../../src/pages/choiceGamePage/types/constants.ts","../../src/utils/shuffleArr.ts","../../src/widgets/playground/model/PlaygroundModel.ts","../../src/pages/mainPage/ui/MainPageView.ts","../../src/features/gameSettings/ui/img/imgSrc/imgSrc.ts","../../src/features/gameSettings/ui/GameSettingsView.ts","../../src/features/gameSettings/types/enums.ts","../../src/features/gameSettings/model/GameSettingsModel.ts","../../src/pages/mainPage/model/MainPageModel.ts","../../src/app/App/ui/AppView.ts","../../src/pages/choiceGamePage/types/enums.ts","../../src/pages/choiceGamePage/ui/ChoiceGamePageView.ts","../../src/utils/getData.ts","../../src/pages/choiceGamePage/api/ChoiceGameApi.ts","../../src/utils/getComplexityColor.ts","../../src/pages/choiceGamePage/model/ChoiceGamePageModel.ts","../../src/utils/addListenersAudioBnt.ts","../../src/pages/statisticsPage/ui/StatisticsPageView.ts","../../src/utils/isMapOfLineInfoArr.ts","../../src/utils/createListTitle.ts","../../src/pages/statisticsPage/types/enums.ts","../../src/pages/statisticsPage/model/StatisticsPageModel.ts","../../src/app/App/model/AppModel.ts","../../src/index.ts"],"sourcesContent":["enum ERRORS_NAME {\n  FIRST_CHAR = 'firstChar',\n  EMPTY_FIELD = 'emptyField',\n  MANY_CHARS = 'manyChars',\n  OTHER_CHARS = 'otherChars',\n}\n\nexport default ERRORS_NAME;\n","const FIELD_INFO = {\n  name: {\n    name: 'name',\n    minChars: 3,\n  },\n  surname: {\n    name: 'surname',\n    minChars: 4,\n  },\n};\n\nexport default FIELD_INFO;\n","const INPUT_STATE = {\n  DISABLED: true,\n  ENABLED: false,\n} as const;\n\nexport default INPUT_STATE;\n","import styles from '../../../widgets/loginForm/ui/style.module.scss';\nimport ERRORS_NAME from '../types/enum.ts';\nimport FIELD_INFO from '../types/const.ts';\nimport type InputFieldModal from '@/entities/inputField/model/InputFieldModal.ts';\nimport INPUT_STATE from '../../../shared/input/types/enums.ts';\n\nclass FormValidationModel {\n  private fields: InputFieldModal[] = [];\n\n  private errorMessages: Record<string, string> = {};\n\n  private fieldErrors: HTMLSpanElement[] = [];\n\n  private button: HTMLButtonElement;\n\n  constructor(\n    fields: InputFieldModal[],\n    fieldErrors: HTMLSpanElement[],\n    button: HTMLButtonElement,\n  ) {\n    this.fields = fields;\n    this.fieldErrors = fieldErrors;\n    this.button = button;\n  }\n\n  public initValidation(): void {\n    this.fields.forEach((field) => {\n      const fieldHTML = field.getHTML();\n\n      const options: Record<string, number> = {};\n      options.minChars =\n        fieldHTML.name === FIELD_INFO.name.name\n          ? FIELD_INFO.name.minChars\n          : FIELD_INFO.surname.minChars;\n\n      fieldHTML.addEventListener('input', () =>\n        this.fieldCheck(field, fieldHTML, options),\n      );\n    });\n  }\n\n  private updateBtnState(): void {\n    const isValidFields = Object.values(this.fields).every(\n      (field) => !field.getIsValid(),\n    );\n    this.button.disabled = !isValidFields;\n  }\n\n  private getErrorMessage(\n    error: string,\n    options?: Record<string, number>,\n    name?: string,\n  ): string {\n    this.errorMessages = {\n      firstChar: 'The first letter must be in uppercase',\n      otherChars: 'Only letters of the Latin alphabet and \"-\" are allowed',\n      emptyField: 'The field can`t be empty',\n      manyChars: `The ${name} field must contain more than ${options?.minChars} characters`,\n    };\n\n    return this.errorMessages[error];\n  }\n\n  private setError(\n    field: InputFieldModal,\n    span: HTMLSpanElement,\n    error: string,\n    options?: Record<string, number>,\n    name?: string,\n  ): void {\n    const currentField = field;\n    currentField.setIsValid(INPUT_STATE.DISABLED);\n\n    const fieldHTML = currentField.getHTML();\n    fieldHTML.classList.remove(styles.form__input__success);\n    fieldHTML.classList.add(styles.form__input__error);\n\n    const currentSpan = span;\n    currentSpan.classList.remove(styles.form__span__hidden);\n    currentSpan.classList.add(styles.form__span__visually);\n    currentSpan.textContent = this.getErrorMessage(error, options, name);\n\n    this.updateBtnState();\n  }\n\n  private fieldCheck(\n    field: InputFieldModal,\n    fieldHTML: HTMLInputElement,\n    options: Record<string, number>,\n  ): void {\n    const currentField = field;\n    const { value } = fieldHTML;\n    const { name } = fieldHTML;\n\n    const currentErrorSpan = this.fieldErrors.filter(\n      (item) => item.id === currentField.getHTML().id,\n    );\n\n    const currentSpan = currentErrorSpan[0];\n\n    if (value !== '' && value[0] !== value[0].toUpperCase()) {\n      const errorCode = ERRORS_NAME.FIRST_CHAR;\n      this.setError(currentField, currentSpan, errorCode);\n      return;\n    }\n\n    if (!/^[A-Za-z-]*$/.test(value)) {\n      const errorCode = ERRORS_NAME.OTHER_CHARS;\n      this.setError(currentField, currentSpan, errorCode);\n      return;\n    }\n\n    if (value === '') {\n      const errorCode = ERRORS_NAME.EMPTY_FIELD;\n      this.setError(currentField, currentSpan, errorCode);\n      return;\n    }\n\n    if (value.length < options.minChars) {\n      const errorCode = ERRORS_NAME.MANY_CHARS;\n      this.setError(currentField, currentSpan, errorCode, options, name);\n    } else {\n      currentField.setIsValid(INPUT_STATE.ENABLED);\n      fieldHTML.classList.add(styles.form__input__success);\n      fieldHTML.classList.remove(styles.form__input__error);\n\n      currentSpan.textContent = '';\n      currentSpan.classList.add(styles.form__span__hidden);\n      currentSpan.classList.remove(styles.form__span__visually);\n\n      this.updateBtnState();\n    }\n  }\n}\n\nexport default FormValidationModel;\n","export const TAG_NAMES = {\n  div: 'div',\n  button: 'button',\n  form: 'form',\n  input: 'input',\n  textarea: 'textarea',\n  label: 'label',\n  span: 'span',\n  p: 'p',\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  ul: 'ul',\n  li: 'li',\n  a: 'a',\n  img: 'img',\n  svg: 'svg',\n} as const;\n\nexport const EVENT_NAMES = {\n  hashchange: 'hashchange',\n  click: 'click',\n  submit: 'submit',\n  dragOver: 'dragover',\n  dragDrop: 'drop',\n  dragStart: 'dragstart',\n  dragEnd: 'dragend',\n  dragLeave: 'dragleave',\n  dragEnter: 'dragenter',\n  input: 'input',\n  ended: 'ended',\n} as const;\n","interface CreateBaseElement<T> {\n  tag: T;\n  cssClasses?: string[];\n  attributes?: Record<string, string>;\n  innerContent?: string;\n}\n\nconst createBaseElement = <T extends keyof HTMLElementTagNameMap>({\n  tag,\n  cssClasses = [],\n  attributes = {},\n  innerContent = '',\n}: CreateBaseElement<T>): HTMLElementTagNameMap[T] => {\n  const elem = document.createElement(tag);\n\n  elem.classList.add(...cssClasses);\n\n  Object.entries(attributes).forEach(([attrName, attrValue]) => {\n    elem.setAttribute(attrName, attrValue);\n  });\n\n  elem.innerHTML = innerContent;\n\n  return elem;\n};\n\nexport default createBaseElement;\n","import { TAG_NAMES } from '../../types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\n\nclass InputView {\n  public input: HTMLInputElement;\n\n  constructor(attrs: Record<string, string>) {\n    this.input = this.createHTML(attrs);\n  }\n\n  public getHTML(): HTMLInputElement {\n    return this.input;\n  }\n\n  private createHTML(attrs: Record<string, string>): HTMLInputElement {\n    this.input = createBaseElement({\n      tag: TAG_NAMES.input,\n      attributes: attrs,\n    });\n\n    return this.input;\n  }\n}\n\nexport default InputView;\n","import InputView from '../../../shared/input/view/InputView.ts';\n\nclass InputFieldModal extends InputView {\n  private form: HTMLFormElement;\n\n  private isValid: boolean;\n\n  private name: string;\n\n  constructor(attrs: Record<string, string>, form: HTMLFormElement) {\n    super(attrs);\n    this.form = form;\n    this.isValid = true;\n    this.name = attrs.name;\n  }\n\n  public getInputName(): string {\n    return this.name;\n  }\n\n  public getIsValid(): boolean {\n    return this.isValid;\n  }\n\n  public setIsValid(isValid: boolean): void {\n    this.isValid = isValid;\n  }\n\n  public getInputForm(): HTMLFormElement {\n    return this.form;\n  }\n\n  public getData(): string {\n    return this.input.value;\n  }\n}\n\nexport default InputFieldModal;\n","const BUTTON_STATE = {\n  DISABLED: true,\n  ENABLED: false,\n} as const;\n\nexport default BUTTON_STATE;\n","import { TAG_NAMES } from '../../types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport type ButtonAction from '../types/types';\n\nclass ButtonView {\n  private button: HTMLButtonElement;\n\n  constructor(\n    text?: string,\n    classes?: string[],\n    attrs?: Record<string, string>,\n    action?: ButtonAction,\n  ) {\n    this.button = this.createHTML(action, classes, attrs, text);\n  }\n\n  public getHTML(): HTMLButtonElement {\n    return this.button;\n  }\n\n  private createHTML(\n    action?: ButtonAction,\n    classes?: string[],\n    attrs?: Record<string, string>,\n    text?: string,\n  ): HTMLButtonElement {\n    this.button = createBaseElement({\n      tag: TAG_NAMES.button,\n      cssClasses: classes,\n      attributes: attrs,\n      innerContent: text,\n    });\n\n    if (action) {\n      this.button.addEventListener(action.key, action.value);\n    }\n\n    return this.button;\n  }\n}\n\nexport default ButtonView;\n","import BUTTON_STATE from '../types/enums.ts';\nimport type ButtonAction from '../types/types.ts';\nimport ButtonView from '../ui/ButtonView.ts';\n\nclass ButtonModel {\n  private view: ButtonView;\n\n  private button: HTMLButtonElement;\n\n  constructor(\n    text?: string,\n    classes?: string[],\n    attrs?: Record<string, string>,\n    action?: ButtonAction,\n  ) {\n    this.view = new ButtonView(text, classes, attrs, action);\n    this.button = this.view.getHTML();\n  }\n\n  public getHTML(): HTMLButtonElement {\n    return this.button;\n  }\n\n  public setDisabled(): void {\n    this.button.disabled = BUTTON_STATE.DISABLED;\n  }\n\n  public setEnabled(): void {\n    this.button.disabled = BUTTON_STATE.ENABLED;\n  }\n\n  public switchDisabled(): void {\n    this.button.disabled = !this.button.disabled;\n  }\n}\n\nexport default ButtonModel;\n","import type ButtonAction from '../../../shared/button/types/types.ts';\nimport ButtonModel from '../../../shared/button/model/ButtonModel.ts';\n\nclass SubmitButtonModel extends ButtonModel {\n  public form: HTMLFormElement;\n\n  constructor(\n    form: HTMLFormElement,\n    text?: string,\n    classes?: string[],\n    attrs?: Record<string, string>,\n    action?: ButtonAction,\n  ) {\n    super(text, classes, attrs, action);\n\n    this.form = form;\n  }\n}\n\nexport default SubmitButtonModel;\n","enum FIELD_NAMES {\n  NAME = 'name',\n  SURNAME = 'surname',\n}\n\nexport default FIELD_NAMES;\n","const formattedText = (text: string): string =>\n  text\n    .split(' ')\n    .map((word) => word[0].toUpperCase() + word.slice(1).toLowerCase())\n    .join(' ');\n\nexport default formattedText;\n","import { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport InputFieldModal from '../../../entities/inputField/model/InputFieldModal.ts';\nimport SubmitButtonModel from '../../../entities/submitBtn/model/SubmitBtnModel.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport styles from './style.module.scss';\nimport FIELD_NAMES from '../types/enum.ts';\nimport formattedText from '../../../utils/formattedText.ts';\n\nclass LoginFormView {\n  private form: HTMLFormElement;\n\n  private inputFields: InputFieldModal[] = [];\n\n  private inputFieldsHTML: HTMLInputElement[] = [];\n\n  private fieldErrors: HTMLSpanElement[] = [];\n\n  private submitBtn: SubmitButtonModel;\n\n  constructor() {\n    this.submitBtn = this.createSubmitBtn();\n    this.form = this.createHTML();\n  }\n\n  public getHTML(): HTMLFormElement {\n    return this.form;\n  }\n\n  public getSubmitBtn(): SubmitButtonModel {\n    return this.submitBtn;\n  }\n\n  public getInputFields(): InputFieldModal[] {\n    return this.inputFields;\n  }\n\n  public getFieldErrors(): HTMLSpanElement[] {\n    return this.fieldErrors;\n  }\n\n  private createFieldBox(input: HTMLInputElement): HTMLLabelElement {\n    const labelText = formattedText(input.name);\n\n    const fieldLabel = createBaseElement({\n      tag: TAG_NAMES.label,\n      cssClasses: [styles.form__label],\n      attributes: {\n        for: input.id,\n      },\n      innerContent: labelText,\n    });\n\n    const fieldErrorSpan = createBaseElement({\n      tag: TAG_NAMES.span,\n      cssClasses: [styles.form__span],\n      attributes: {\n        id: input.id,\n      },\n    });\n\n    this.fieldErrors.push(fieldErrorSpan);\n    fieldLabel.append(input, fieldErrorSpan);\n    return fieldLabel;\n  }\n\n  private createInputsField(): InputFieldModal[] {\n    const inputName = new InputFieldModal(\n      {\n        type: 'text',\n        name: FIELD_NAMES.NAME,\n        id: FIELD_NAMES.NAME,\n        placeholder: 'Ivan',\n        class: styles.form__input,\n        autocomplete: 'off',\n      },\n      this.form,\n    );\n\n    const inputSurname = new InputFieldModal(\n      {\n        type: 'text',\n        name: FIELD_NAMES.SURNAME,\n        id: FIELD_NAMES.SURNAME,\n        placeholder: 'Ivanov',\n        class: styles.form__input,\n        autocomplete: 'off',\n      },\n      this.form,\n    );\n\n    this.inputFieldsHTML.push(inputName.getHTML(), inputSurname.getHTML());\n    return [inputName, inputSurname];\n  }\n\n  private createSubmitBtn(): SubmitButtonModel {\n    const textContentBtn = 'Login';\n    const submitBtn = new SubmitButtonModel(\n      this.form,\n      textContentBtn,\n      [styles.form__btn, 'btn-reset'],\n      {\n        type: 'submit',\n      },\n    );\n\n    submitBtn.setDisabled();\n\n    return submitBtn;\n  }\n\n  private createHTML(): HTMLFormElement {\n    this.form = createBaseElement({\n      tag: TAG_NAMES.form,\n      cssClasses: [styles.form],\n      attributes: {\n        action: '#',\n        method: 'post',\n      },\n    });\n\n    this.inputFields = this.createInputsField();\n\n    this.inputFieldsHTML.forEach((input) => {\n      const fieldBox = this.createFieldBox(input);\n      this.form.append(fieldBox);\n    });\n\n    this.form.append(this.submitBtn.getHTML());\n    return this.form;\n  }\n}\n\nexport default LoginFormView;\n","import FormValidationModel from '../../../features/formValidation/model/FormValidationModel.ts';\nimport type PageInterface from '../../../pages/types/interfaces.ts';\nimport { type UserDataInterface } from '../../../app/Storage/types/interfaces.ts';\nimport { EVENT_NAMES } from '../../../shared/types/enums.ts';\nimport LoginFormView from '../ui/LoginFormView.ts';\n\nclass LoginFormModel {\n  private form: HTMLFormElement;\n\n  private formView: LoginFormView;\n\n  private formValidation: FormValidationModel;\n\n  private page: PageInterface;\n\n  constructor(page: PageInterface) {\n    this.page = page;\n    this.formView = new LoginFormView();\n    this.form = this.formView.getHTML();\n    this.form.addEventListener(EVENT_NAMES.submit, this.submit.bind(this));\n    this.formValidation = new FormValidationModel(\n      this.formView.getInputFields(),\n      this.formView.getFieldErrors(),\n      this.formView.getSubmitBtn().getHTML(),\n    );\n    this.formValidation.initValidation();\n  }\n\n  public getHTML(): HTMLFormElement {\n    return this.form;\n  }\n\n  private getData(): UserDataInterface {\n    const userData: UserDataInterface = {};\n\n    this.formView.getInputFields().forEach((input) => {\n      const key = input.getInputName();\n      const value = input.getData();\n      userData[key] = value;\n    });\n\n    return userData;\n  }\n\n  private submit(event: Event): void {\n    event.preventDefault();\n\n    if (this.page.saveAuthUser) {\n      this.page.saveAuthUser(this.getData());\n    }\n\n    this.form.remove();\n  }\n}\n\nexport default LoginFormModel;\n","export const PAGES_IDS = {\n  START: 'start',\n  LOG_IN: 'logIn',\n  BLANK: '',\n  CHOICE_GAME: 'choiceGame',\n  MAIN: 'main',\n  STATISTICS: 'statistics',\n} as const;\n\nexport const PAGES_STATE = {\n  VISIBLE: 'flex',\n  HIDDEN: 'none',\n} as const;\n","import type ListenerCallback from '../types/types.ts';\n\nclass MediatorModel<T> {\n  private static mediator = new MediatorModel();\n\n  private listeners: Map<string, Array<ListenerCallback<T>>>;\n\n  constructor() {\n    this.listeners = new Map();\n  }\n\n  public static getInstance(): MediatorModel<unknown> {\n    return MediatorModel.mediator;\n  }\n\n  public subscribe(eventName: string, listener: ListenerCallback<T>): void {\n    if (this.listeners.has(eventName)) {\n      const listeners = this.listeners.get(eventName);\n      listeners?.push(listener);\n    } else {\n      const newListeners = [];\n      newListeners.push(listener);\n      this.listeners.set(eventName, newListeners);\n    }\n  }\n\n  public notify(eventName: string, params: T): void {\n    const eventListeners = this.listeners.get(eventName);\n    if (eventListeners) {\n      eventListeners.forEach((listener) => listener(params));\n    }\n  }\n\n  public unsubscribe(eventName: string, listener: ListenerCallback<T>): void {\n    if (this.listeners.has(eventName)) {\n      const listeners = this.listeners.get(eventName);\n      const index = listeners?.indexOf(listener);\n\n      if (index && index !== -1) {\n        listeners?.splice(index, 1);\n      }\n    }\n  }\n}\n\nexport default MediatorModel;\n","enum STORE_KEYS {\n  LS_NAME = 'kleostro',\n  USER = 'user',\n  COMPLETED_ROUND = 'completedRounds',\n  LAST_ROUND = 'lastRound',\n  LISTEN_VISIBLE = 'switchListenVisible',\n  BACKGROUND_HINT = 'switchBackgroundHintVisible',\n  TRANSLATE_VISIBLE = 'switchTranslateVisible',\n}\n\nexport default STORE_KEYS;\n","const AppEvents = {\n  newUser: 'newUser',\n  logOut: 'logOut',\n  changeHash: 'changeHash',\n  switchTranslateVisible: 'switchTranslateVisible',\n  switchListenVisible: 'switchListenVisible',\n  switchBackgroundHintVisible: 'switchBackgroundHintVisible',\n  newGame: 'newGame',\n  newCompletedRound: 'newCompletedRound',\n  nextRound: 'nextRound',\n  switchDisableNextRoundBtn: 'switchDisableNextRoundBtn',\n  endRound: 'endRound',\n} as const;\n\nexport default AppEvents;\n","import { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport styles from './style.module.scss';\nimport { PAGES_STATE } from '../../types/enums.ts';\nimport type PageInterface from '../../types/interfaces.ts';\n\nclass LoginPageView implements PageInterface {\n  private id: string;\n\n  private parent: HTMLDivElement;\n\n  private page: HTMLDivElement;\n\n  constructor(id: string, parent: HTMLDivElement) {\n    this.id = id;\n    this.parent = parent;\n    this.page = this.createHTML(this.id);\n    this.hidden();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.page;\n  }\n\n  public getID(): string {\n    return this.id;\n  }\n\n  private hidden = (): void => {\n    this.page.style.display = PAGES_STATE.HIDDEN;\n  };\n\n  private createHTML(id: string): HTMLDivElement {\n    this.page = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.page],\n      attributes: { id },\n    });\n\n    this.page.style.display = PAGES_STATE.HIDDEN;\n\n    this.parent.append(this.page);\n    return this.page;\n  }\n}\n\nexport default LoginPageView;\n","import LoginFormModel from '../../../widgets/loginForm/model/LoginFormModel.ts';\nimport type StorageModel from '../../../app/Storage/model/StorageModel.ts';\nimport { PAGES_IDS, PAGES_STATE } from '../../types/enums.ts';\nimport MediatorModel from '../../core/mediator/model/MediatorModel.ts';\nimport STORE_KEYS from '../../../app/Storage/types/enums.ts';\nimport type PageInterface from '../../types/interfaces.ts';\nimport AppEvents from '../../core/mediator/types/enums.ts';\nimport { type UserDataInterface } from '../../../app/Storage/types/interfaces.ts';\nimport LoginPageView from '../ui/LoginPageView.ts';\n\nclass LogInPageModel implements PageInterface {\n  private storage: StorageModel;\n\n  private id: string;\n\n  private singletonMediator: MediatorModel<unknown>;\n\n  private pageView: LoginPageView;\n\n  private page: HTMLDivElement;\n\n  constructor(id: string, parent: HTMLDivElement, storage: StorageModel) {\n    this.id = id;\n    this.storage = storage;\n    this.singletonMediator = MediatorModel.getInstance();\n    this.pageView = new LoginPageView(id, parent);\n    this.page = this.pageView.getHTML();\n    this.drawForm();\n    this.hidden();\n  }\n\n  private hidden = (): void => {\n    this.page.style.display = PAGES_STATE.HIDDEN;\n  };\n\n  public getHTML(): HTMLDivElement {\n    return this.page;\n  }\n\n  public getID(): string {\n    return this.id;\n  }\n\n  public checkAuthUser(): boolean {\n    const userData = this.storage.get<UserDataInterface>(STORE_KEYS.USER);\n    if (userData) {\n      this.singletonMediator.notify(AppEvents.newUser, userData);\n    } else {\n      return false;\n    }\n    return true;\n  }\n\n  public saveAuthUser(userData: UserDataInterface): void {\n    this.storage.add(STORE_KEYS.USER, JSON.stringify(userData));\n    this.singletonMediator.notify(AppEvents.changeHash, PAGES_IDS.START);\n    this.drawForm();\n  }\n\n  private drawForm(): void {\n    const loginForm = new LoginFormModel(this);\n    this.page.append(loginForm.getHTML());\n  }\n}\n\nexport default LogInPageModel;\n","/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport STORE_KEYS from '../types/enums.ts';\nimport type { Data, StorageModelInterface } from '../types/interfaces';\n\nclass StorageModel implements StorageModelInterface {\n  private storage: Data;\n\n  constructor() {\n    this.storage = this.init();\n  }\n\n  public get<T>(key: string): T | undefined {\n    if (key in this.storage) {\n      const result: T = JSON.parse(this.storage[key]);\n      return result;\n    }\n    return undefined;\n  }\n\n  public add(key: string, value: string): void {\n    this.storage[key] = value;\n    this.save(this.storage);\n  }\n\n  public remove(key: string): void {\n    delete this.storage[key];\n    this.save(this.storage);\n  }\n\n  public clear(): void {\n    localStorage.clear();\n    this.init();\n  }\n\n  private save(data: Data): void {\n    localStorage.setItem(STORE_KEYS.LS_NAME, JSON.stringify(data));\n    this.storage = this.init();\n  }\n\n  private init(): Data {\n    const storedData = localStorage.getItem(STORE_KEYS.LS_NAME);\n\n    const safeJsonParse = <T>(str: string): T => {\n      try {\n        const jsonValue: T = JSON.parse(str);\n        return jsonValue;\n      } catch {\n        throw new Error('I need help >_<');\n      }\n    };\n\n    if (storedData) {\n      this.storage = safeJsonParse(storedData);\n    } else {\n      localStorage.setItem(STORE_KEYS.LS_NAME, '{}');\n      this.storage = this.init();\n    }\n\n    return this.storage;\n  }\n}\n\nexport default StorageModel;\n","const BUTTONS_TEXT_CONTENT = {\n  loginBtn: 'Log in',\n  logOutBtn: 'Log out',\n  startBtn: 'Start',\n  choiceGameBtn: 'Choose game',\n} as const;\n\nexport default BUTTONS_TEXT_CONTENT;\n","import createBaseElement from '../../../utils/createBaseElement.ts';\nimport ButtonModel from '../../../shared/button/model/ButtonModel.ts';\nimport styles from './style.module.scss';\nimport { PAGES_STATE } from '../../types/enums.ts';\nimport { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport BUTTONS_TEXT_CONTENT from '../types/enums.ts';\n\nclass StartPageView {\n  private parent: HTMLDivElement;\n\n  private page: HTMLDivElement;\n\n  private title: HTMLHeadingElement;\n\n  private subtitle: HTMLHeadingElement;\n\n  private descr: HTMLDivElement;\n\n  private startBtn: ButtonModel;\n\n  private choiceGameBtn: ButtonModel;\n\n  private logOutBtn: ButtonModel;\n\n  constructor(id: string, parent: HTMLDivElement) {\n    this.title = this.createTitle();\n    this.subtitle = this.createSubtitle();\n    this.descr = this.createDescr();\n    this.startBtn = this.createStartBtn();\n    this.choiceGameBtn = this.createChoiceGameBtn();\n    this.logOutBtn = this.createLogOutBtn();\n    this.parent = parent;\n    this.page = this.createHTML(id);\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.page;\n  }\n\n  public getSubTitle(): HTMLHeadingElement {\n    return this.subtitle;\n  }\n\n  public getLogOutBtn(): ButtonModel {\n    return this.logOutBtn;\n  }\n\n  public getStartBtn(): ButtonModel {\n    return this.startBtn;\n  }\n\n  public getChoiceGameBtn(): ButtonModel {\n    return this.choiceGameBtn;\n  }\n\n  private createTitle(): HTMLHeadingElement {\n    const titleTextContent = 'RSS Puzzle';\n    this.title = createBaseElement({\n      tag: TAG_NAMES.h1,\n      cssClasses: [styles.page__title],\n      innerContent: titleTextContent,\n    });\n    return this.title;\n  }\n\n  private createSubtitle(): HTMLHeadingElement {\n    this.subtitle = createBaseElement({\n      tag: TAG_NAMES.h2,\n      cssClasses: [styles.page__subtitle],\n    });\n    return this.subtitle;\n  }\n\n  private createDescr(): HTMLParagraphElement {\n    const descrTextContent =\n      'Embark on a wonderful journey of learning English by assembling jigsaw puzzles of paintings by great artists';\n    this.descr = createBaseElement({\n      tag: TAG_NAMES.p,\n      cssClasses: [styles.page__descr],\n      innerContent: descrTextContent,\n    });\n    return this.descr;\n  }\n\n  private createStartBtn(): ButtonModel {\n    this.startBtn = new ButtonModel(BUTTONS_TEXT_CONTENT.startBtn, [\n      styles.page__btn,\n      'btn-reset',\n    ]);\n    return this.startBtn;\n  }\n\n  private createChoiceGameBtn(): ButtonModel {\n    this.choiceGameBtn = new ButtonModel(BUTTONS_TEXT_CONTENT.choiceGameBtn, [\n      styles.page__btn,\n      'btn-reset',\n    ]);\n    return this.choiceGameBtn;\n  }\n\n  private createLogOutBtn(): ButtonModel {\n    this.logOutBtn = new ButtonModel(BUTTONS_TEXT_CONTENT.logOutBtn, [\n      styles.page__btn,\n      'btn-reset',\n    ]);\n\n    return this.logOutBtn;\n  }\n\n  private createHTML(id: string): HTMLDivElement {\n    this.page = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.page],\n      attributes: { id },\n    });\n\n    this.page.style.display = PAGES_STATE.HIDDEN;\n\n    const btnsWrapper = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.page__btns],\n    });\n    btnsWrapper.append(\n      this.startBtn.getHTML(),\n      this.choiceGameBtn.getHTML(),\n      this.logOutBtn.getHTML(),\n    );\n\n    this.page.append(this.title, this.subtitle, this.descr, btnsWrapper);\n\n    this.parent.append(this.page);\n    return this.page;\n  }\n}\n\nexport default StartPageView;\n","import type StorageModel from '../../../app/Storage/model/StorageModel.ts';\nimport type PageInterface from '../../types/interfaces.ts';\nimport type ButtonModel from '../../../shared/button/model/ButtonModel.ts';\nimport STORE_KEYS from '../../../app/Storage/types/enums.ts';\nimport { type UserDataInterface } from '../../../app/Storage/types/interfaces.ts';\nimport { PAGES_IDS } from '../../types/enums.ts';\nimport MediatorModel from '../../core/mediator/model/MediatorModel.ts';\nimport AppEvents from '../../core/mediator/types/enums.ts';\nimport { EVENT_NAMES } from '../../../shared/types/enums.ts';\nimport StartPageView from '../ui/StartPageView.ts';\n\nclass StartPageModel implements PageInterface {\n  private storage: StorageModel;\n\n  private id: string;\n\n  private pageView: StartPageView;\n\n  private page: HTMLDivElement;\n\n  private subtitle: HTMLHeadingElement;\n\n  private startBtn: ButtonModel;\n\n  private choiceGameBtn: ButtonModel;\n\n  private logOutBtn: ButtonModel;\n\n  private singletonMediator: MediatorModel<unknown>;\n\n  constructor(id: string, parent: HTMLDivElement, storage: StorageModel) {\n    this.id = id;\n    this.pageView = new StartPageView(id, parent);\n    this.page = this.pageView.getHTML();\n    this.subtitle = this.pageView.getSubTitle();\n    this.startBtn = this.pageView.getStartBtn();\n    this.choiceGameBtn = this.pageView.getChoiceGameBtn();\n    this.logOutBtn = this.pageView.getLogOutBtn();\n    this.storage = storage;\n\n    this.singletonMediator = MediatorModel.getInstance();\n    this.singletonMediator.subscribe(\n      AppEvents.newUser,\n      this.greeting.bind(this),\n    );\n\n    this.setHandlers();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.page;\n  }\n\n  public getID(): string {\n    return this.id;\n  }\n\n  public greeting(): string {\n    const userData = this.storage.get<UserDataInterface>(STORE_KEYS.USER);\n    const greeting = `Hello, ${userData?.name} ${userData?.surname}!`;\n    this.subtitle.textContent = greeting;\n    return greeting;\n  }\n\n  private logOut(): void {\n    this.storage.remove(STORE_KEYS.USER);\n    this.storage.remove(STORE_KEYS.COMPLETED_ROUND);\n    this.storage.remove(STORE_KEYS.LAST_ROUND);\n    this.singletonMediator.notify(AppEvents.changeHash, PAGES_IDS.LOG_IN);\n    this.singletonMediator.notify(AppEvents.logOut, '');\n  }\n\n  private setHandlers(): void {\n    this.logOutBtn\n      .getHTML()\n      .addEventListener(EVENT_NAMES.click, this.logOut.bind(this));\n\n    this.startBtn.getHTML().addEventListener(EVENT_NAMES.click, () => {\n      this.singletonMediator.notify(AppEvents.changeHash, PAGES_IDS.MAIN);\n    });\n\n    this.choiceGameBtn.getHTML().addEventListener(EVENT_NAMES.click, () => {\n      this.singletonMediator.notify(\n        AppEvents.changeHash,\n        PAGES_IDS.CHOICE_GAME,\n      );\n    });\n  }\n}\n\nexport default StartPageModel;\n","import AppEvents from '../../../pages/core/mediator/types/enums.ts';\nimport MediatorModel from '../../../pages/core/mediator/model/MediatorModel.ts';\nimport { PAGES_IDS, PAGES_STATE } from '../../../pages/types/enums.ts';\nimport type PageInterface from '../../../pages/types/interfaces.ts';\nimport type RenderNewPageCallback from '../types/types.ts';\nimport { EVENT_NAMES } from '../../../shared/types/enums.ts';\n\nconst PAGE_DELAY = 500;\nconst MAX_OPACITY = 1;\n\nclass RouterModel {\n  private pages: Record<string, PageInterface>;\n\n  private currentPage: PageInterface;\n\n  private duration: number;\n\n  private singletonMediator: MediatorModel<unknown>;\n\n  constructor(pages: Record<string, PageInterface>) {\n    this.pages = pages;\n    this.currentPage = this.setCurrentPage();\n    this.duration = PAGE_DELAY;\n    this.singletonMediator = MediatorModel.getInstance();\n    this.singletonMediator.subscribe(\n      AppEvents.changeHash,\n      this.renderNewPageCallback,\n    );\n    window.addEventListener(\n      EVENT_NAMES.hashchange,\n      this.hashChangeHandler.bind(this),\n    );\n  }\n\n  public init(): void {\n    const loginPage = this.pages[PAGES_IDS.LOG_IN];\n\n    if (loginPage.checkAuthUser) {\n      if (loginPage.checkAuthUser()) {\n        this.renderNewPageCallback(PAGES_IDS.MAIN);\n      } else {\n        this.renderNewPageCallback(PAGES_IDS.LOG_IN);\n      }\n    }\n  }\n\n  private setCurrentPage(): PageInterface {\n    const currentHash = window.location.hash.slice(1);\n\n    if (currentHash in this.pages) {\n      this.currentPage = this.pages[currentHash];\n    } else if (currentHash === PAGES_IDS.BLANK) {\n      this.currentPage = this.pages[PAGES_IDS.LOG_IN];\n    }\n\n    return this.currentPage;\n  }\n\n  private renderNewPageCallback: RenderNewPageCallback = (hash: unknown) => {\n    if (typeof hash === 'string') {\n      window.location.hash = hash;\n      this.renderNewPage(hash);\n    }\n  };\n\n  private renderNewPage(pageID: string): void {\n    const formattedTitle = pageID[0].toUpperCase() + pageID.slice(1);\n    document.title = formattedTitle;\n\n    this.fadeOutAndIn(this.currentPage, this.pages[pageID]);\n    this.currentPage = this.pages[pageID];\n  }\n\n  private fadeOutAndIn(\n    currentPage: PageInterface,\n    nextPage: PageInterface,\n  ): void {\n    let start = performance.now();\n\n    const fadeIn = (timestamp: number): void => {\n      const elapsed = timestamp - start;\n      const progress = Math.min(elapsed / this.duration, MAX_OPACITY);\n      const page = nextPage.getHTML();\n\n      page.style.opacity = `${progress}`;\n      page.style.display = PAGES_STATE.VISIBLE;\n\n      if (elapsed < this.duration) {\n        window.requestAnimationFrame(fadeIn);\n      }\n    };\n\n    const fadeOut = (timestamp: number): void => {\n      const elapsed = timestamp - start;\n      const progress = Math.min(elapsed / this.duration, MAX_OPACITY);\n      const opacity = MAX_OPACITY - progress;\n\n      const page = currentPage.getHTML();\n      page.style.opacity = `${opacity}`;\n\n      if (elapsed < this.duration) {\n        window.requestAnimationFrame(fadeOut);\n      } else {\n        Object.entries(this.pages).forEach(([key, value]) => {\n          if (key !== this.currentPage.getHTML().id && value.getHTML()) {\n            const val = value.getHTML();\n            val.style.display = PAGES_STATE.HIDDEN;\n          }\n        });\n\n        page.style.display = PAGES_STATE.HIDDEN;\n        start = performance.now();\n        window.requestAnimationFrame(fadeIn);\n      }\n    };\n\n    window.requestAnimationFrame(fadeOut);\n  }\n\n  private hashChangeHandler(): void {\n    const loginPage = this.pages[PAGES_IDS.LOG_IN];\n    const hash = window.location.hash.slice(1);\n\n    if (!loginPage.checkAuthUser) {\n      return;\n    }\n\n    if (!(hash in this.pages)) {\n      if (loginPage.checkAuthUser()) {\n        this.renderNewPageCallback(PAGES_IDS.START);\n      } else {\n        this.renderNewPageCallback(PAGES_IDS.LOG_IN);\n      }\n      return;\n    }\n\n    if (loginPage.checkAuthUser()) {\n      if (hash !== PAGES_IDS.BLANK && hash !== PAGES_IDS.LOG_IN) {\n        this.renderNewPageCallback(hash);\n      } else {\n        window.location.hash = this.currentPage.getID();\n      }\n    } else {\n      this.renderNewPageCallback(PAGES_IDS.LOG_IN);\n    }\n  }\n}\n\nexport default RouterModel;\n","export const randomIndex = 0.5;\n\nexport const BUTTONS_TEXT_CONTENT = {\n  continueBtn: 'Continue',\n  checkBtn: 'Check',\n  autocompleteBtn: 'Autocomplete',\n  translateBtn: 'Translate',\n  nextRoundBtn: 'Next round',\n  statisticsBtn: 'Statistics',\n} as const;\n\nexport const EVENT_ACCESSIBILITY = {\n  none: 'none',\n  auto: 'auto',\n} as const;\n\nexport const IS_VISIBLE = {\n  visible: true,\n  hidden: false,\n} as const;\n\nexport const AUDIO_SRC =\n  'https://raw.githubusercontent.com/rolling-scopes-school/rss-puzzle-data/main/';\n","const volumeOn = `<?xml version=\"1.0\" ?><svg viewBox=\"0 0 256 256\" xmlns=\"http://www.w3.org/2000/svg\"><rect fill=\"none\" height=\"256\" width=\"256\"/><path d=\"M218.9,77.1a71.9,71.9,0,0,1,0,101.8\" fill=\"none\" stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\"/><path d=\"M80,168H32a8,8,0,0,1-8-8V96a8,8,0,0,1,8-8H80l72-56V224Z\" fill=\"none\" stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\"/><line fill=\"none\" stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\" x1=\"80\" x2=\"80\" y1=\"88\" y2=\"168\"/><path d=\"M190.6,105.4a31.9,31.9,0,0,1,0,45.2\" fill=\"none\" stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\"/></svg>`;\n\nconst volumeOff = `<?xml version=\"1.0\" ?><svg viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><defs><style>.cls-1{fill:#101820;}</style></defs><title/><g data-name=\"Layer 35\" id=\"Layer_35\"><path class=\"cls-1\" d=\"M18,29a1,1,0,0,1-.57-.18l-10-7A1,1,0,0,1,7,21V11a1,1,0,0,1,.43-.82l10-7a1,1,0,0,1,1-.07A1,1,0,0,1,19,4V28a1,1,0,0,1-.54.89A1,1,0,0,1,18,29ZM9,20.48l8,5.6V5.92l-8,5.6Z\"/><path class=\"cls-1\" d=\"M8,22H4a3,3,0,0,1-3-3V13a3,3,0,0,1,3-3H8a1,1,0,0,1,1,1V21A1,1,0,0,1,8,22ZM4,12a1,1,0,0,0-1,1v6a1,1,0,0,0,1,1H7V12Z\"/><rect class=\"cls-1\" height=\"12\" transform=\"translate(-3.77 22.9) rotate(-45)\" width=\"2\" x=\"24.76\" y=\"10\"/><rect class=\"cls-1\" height=\"2\" transform=\"translate(-3.77 22.9) rotate(-45)\" width=\"12\" x=\"19.76\" y=\"15\"/></g></svg>`;\n\nconst IMG_SRC = {\n  volumeOn,\n  volumeOff,\n} as const;\n\nexport default IMG_SRC;\n","import ButtonModel from '../../../shared/button/model/ButtonModel.ts';\nimport { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport styles from './style.module.scss';\nimport { BUTTONS_TEXT_CONTENT } from '../types/constants.ts';\nimport IMG_SRC from './imgSrc/imgSrc.ts';\n\nclass PlaygroundView {\n  private translateSentence: HTMLDivElement;\n\n  private translateListenBtn: ButtonModel;\n\n  private audio: HTMLAudioElement;\n\n  private translateWrapper: HTMLDivElement;\n\n  private playground: HTMLDivElement;\n\n  private gameBoard: HTMLDivElement;\n\n  private sourceBlock: HTMLDivElement;\n\n  private continueBtn: ButtonModel;\n\n  private checkBtn: ButtonModel;\n\n  private autocompleteBtn: ButtonModel;\n\n  private nextRound: ButtonModel;\n\n  private statisticsBtn: ButtonModel;\n\n  private roundTitle: HTMLHeadingElement;\n\n  private roundSubtitle: HTMLHeadingElement;\n\n  private roundDescription: HTMLSpanElement;\n\n  constructor() {\n    this.audio = new Audio();\n    this.translateSentence = this.createTranslateSentence();\n    this.translateListenBtn = this.createTranslateListenBtn();\n    this.translateWrapper = this.createTranslateWrapper();\n    this.gameBoard = this.createGameBoard();\n    this.sourceBlock = this.createSourceBlock();\n    this.continueBtn = this.createContinueBtn();\n    this.checkBtn = this.createCheckBtn();\n    this.autocompleteBtn = this.createAutocompleteBtn();\n    this.nextRound = this.createNextRoundBtn();\n    this.statisticsBtn = this.createStatisticsBtn();\n    this.roundTitle = this.createRoundTitle();\n    this.roundSubtitle = this.createRoundSubtitle();\n    this.roundDescription = this.createRoundDescription();\n    this.playground = this.createHTML();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.playground;\n  }\n\n  public getTranslateSentenceHTML(): HTMLDivElement {\n    return this.translateSentence;\n  }\n\n  public getTranslateSentenceWrapperHTML(): HTMLDivElement {\n    return this.translateWrapper;\n  }\n\n  public getTranslateListenBtn(): ButtonModel {\n    return this.translateListenBtn;\n  }\n\n  public getAudioElement(): HTMLAudioElement {\n    return this.audio;\n  }\n\n  public getGameBoardHTML(): HTMLDivElement {\n    return this.gameBoard;\n  }\n\n  public clearGameBoardHTML(): void {\n    this.gameBoard.innerHTML = '';\n  }\n\n  public getSourceBlockHTML(): HTMLDivElement {\n    return this.sourceBlock;\n  }\n\n  public clearSourceBlockHTML(): void {\n    this.sourceBlock.innerHTML = '';\n  }\n\n  public getContinueBtn(): ButtonModel {\n    return this.continueBtn;\n  }\n\n  public getCheckBtn(): ButtonModel {\n    return this.checkBtn;\n  }\n\n  public getAutocompleteBtn(): ButtonModel {\n    return this.autocompleteBtn;\n  }\n\n  public getNextRoundBtn(): ButtonModel {\n    return this.nextRound;\n  }\n\n  public getStatisticsBtn(): ButtonModel {\n    return this.statisticsBtn;\n  }\n\n  public getRoundTitle(): HTMLHeadingElement {\n    return this.roundTitle;\n  }\n\n  public getRoundDescription(): HTMLSpanElement {\n    return this.roundDescription;\n  }\n\n  public getRoundSubtitle(): HTMLHeadingElement {\n    return this.roundSubtitle;\n  }\n\n  private createRoundSubtitle(): HTMLHeadingElement {\n    this.roundSubtitle = createBaseElement({\n      tag: TAG_NAMES.h3,\n      cssClasses: [styles.game_board_subtitle],\n    });\n    return this.roundSubtitle;\n  }\n\n  private createTranslateListenBtn(): ButtonModel {\n    this.translateListenBtn = new ButtonModel('', [styles.translate_btn]);\n    this.translateListenBtn.getHTML().innerHTML = IMG_SRC.volumeOff;\n    return this.translateListenBtn;\n  }\n\n  private createTranslateSentence(): HTMLDivElement {\n    this.translateSentence = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.translate_sentence],\n    });\n    return this.translateSentence;\n  }\n\n  private createTranslateWrapper(): HTMLDivElement {\n    this.translateWrapper = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.translate_wrapper],\n    });\n\n    this.translateWrapper.append(\n      this.audio,\n      this.translateListenBtn.getHTML(),\n      this.translateSentence,\n    );\n    return this.translateWrapper;\n  }\n\n  private createGameBoard(): HTMLDivElement {\n    this.gameBoard = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.game_board],\n    });\n\n    return this.gameBoard;\n  }\n\n  private createSourceBlock(): HTMLDivElement {\n    this.sourceBlock = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.source_data],\n    });\n\n    return this.sourceBlock;\n  }\n\n  private createContinueBtn(): ButtonModel {\n    this.continueBtn = new ButtonModel(BUTTONS_TEXT_CONTENT.continueBtn, [\n      styles.continue_btn,\n      styles.btn__hidden,\n    ]);\n\n    return this.continueBtn;\n  }\n\n  private createCheckBtn(): ButtonModel {\n    this.checkBtn = new ButtonModel(BUTTONS_TEXT_CONTENT.checkBtn, [\n      styles.check_btn,\n    ]);\n\n    this.checkBtn.setDisabled();\n\n    return this.checkBtn;\n  }\n\n  private createNextRoundBtn(): ButtonModel {\n    this.nextRound = new ButtonModel(BUTTONS_TEXT_CONTENT.continueBtn, [\n      styles.nextRound_btn,\n      styles.btn__hidden,\n    ]);\n\n    return this.nextRound;\n  }\n\n  private createStatisticsBtn(): ButtonModel {\n    this.statisticsBtn = new ButtonModel(BUTTONS_TEXT_CONTENT.statisticsBtn, [\n      styles.statistics_btn,\n      styles.btn__hidden,\n    ]);\n\n    return this.statisticsBtn;\n  }\n\n  private createAutocompleteBtn(): ButtonModel {\n    this.autocompleteBtn = new ButtonModel(\n      BUTTONS_TEXT_CONTENT.autocompleteBtn,\n      [styles.autocomplete_btn],\n    );\n\n    return this.autocompleteBtn;\n  }\n\n  private createRoundTitle(): HTMLHeadingElement {\n    this.roundTitle = createBaseElement({\n      tag: TAG_NAMES.h2,\n      cssClasses: [styles.game_board_title],\n    });\n\n    return this.roundTitle;\n  }\n\n  private createRoundDescription(): HTMLSpanElement {\n    this.roundDescription = createBaseElement({\n      tag: TAG_NAMES.span,\n      cssClasses: [styles.game_board_description],\n    });\n    return this.roundDescription;\n  }\n\n  private createHTML(): HTMLDivElement {\n    this.playground = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.playground],\n    });\n\n    this.playground.append(\n      this.translateWrapper,\n      this.roundSubtitle,\n      this.gameBoard,\n      this.sourceBlock,\n      this.continueBtn.getHTML(),\n      this.checkBtn.getHTML(),\n      this.nextRound.getHTML(),\n      this.statisticsBtn.getHTML(),\n      this.autocompleteBtn.getHTML(),\n    );\n    return this.playground;\n  }\n}\n\nexport default PlaygroundView;\n","import type PlaygroundView from '../../widgets/playground/ui/PlaygroundView.ts';\nimport { EVENT_NAMES, TAG_NAMES } from '../../shared/types/enums.ts';\nimport createBaseElement from '../../utils/createBaseElement.ts';\nimport styles from './style.module.scss';\nimport playgroundStyles from '../../widgets/playground/ui/style.module.scss';\nimport type PlaygroundModel from '../../widgets/playground/model/PlaygroundModel.ts';\nimport type ButtonModel from '../../shared/button/model/ButtonModel.ts';\n\nclass PuzzleComponent {\n  private puzzle: HTMLDivElement;\n\n  private word: string;\n\n  private playground: PlaygroundModel;\n\n  private playgroundView: PlaygroundView;\n\n  constructor(\n    word: string,\n    playground: PlaygroundModel,\n    playgroundView: PlaygroundView,\n  ) {\n    this.word = word;\n    this.playground = playground;\n    this.playgroundView = playgroundView;\n    this.puzzle = this.createHTML(this.word);\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.puzzle;\n  }\n\n  public getWord(): string {\n    return this.word;\n  }\n\n  private calculateSizePuzzle(elem: HTMLDivElement): void {\n    const currentElem = elem;\n    const wordLength = this.word.length;\n    const paddingX = 2;\n    const paddingY = 1;\n\n    const pivotFont = 5;\n    const minFontSize = 75;\n    const maxFontSize = 85;\n    const calcFontSize = wordLength > pivotFont ? minFontSize : maxFontSize;\n    const padding = `${paddingY}% ${paddingX}%`;\n    const fontSize = `${calcFontSize}%`;\n\n    currentElem.style.padding = padding;\n    currentElem.style.fontSize = fontSize;\n  }\n\n  public clickPuzzleHandler(): void {\n    const wordsInCurrentLine = this.playground.getWordsInCurrentLine();\n    const words = this.playground.getWords();\n    const currentRound = this.playground.getCurrentRound();\n    const checkBtn = this.playgroundView.getCheckBtn();\n    const wordLines = this.playground.getWordLinesHTML();\n\n    if (this.puzzle.parentNode !== wordLines[currentRound]) {\n      this.handlePuzzleNotInCurrentLine(\n        words,\n        currentRound,\n        checkBtn,\n        wordLines,\n        wordsInCurrentLine,\n      );\n    } else {\n      this.handlePuzzleInCurrentLine(\n        words,\n        currentRound,\n        checkBtn,\n        wordsInCurrentLine,\n        wordLines,\n      );\n    }\n  }\n\n  private handlePuzzleNotInCurrentLine(\n    words: string[][],\n    currentRound: number,\n    checkBtn: ButtonModel,\n    wordLines: HTMLElement[],\n    wordsInCurrentLine: string[],\n  ): void {\n    wordLines[currentRound].append(this.puzzle);\n    wordsInCurrentLine.push(this.word);\n\n    if (wordsInCurrentLine.length === words[currentRound].length) {\n      checkBtn.setEnabled();\n    } else {\n      checkBtn.setDisabled();\n    }\n  }\n\n  private handlePuzzleInCurrentLine(\n    words: string[][],\n    currentRound: number,\n    checkBtn: ButtonModel,\n    wordsInCurrentLine: string[],\n    wordLines: HTMLElement[],\n  ): void {\n    const puzzlesArr = wordLines[currentRound].children;\n    Array.from(puzzlesArr).forEach((puzzle) => {\n      puzzle.classList.remove(\n        playgroundStyles.copy_puzzle__error,\n        playgroundStyles.copy_puzzle__success,\n      );\n    });\n\n    const index = wordsInCurrentLine.indexOf(this.word);\n    if (index > -1) {\n      wordsInCurrentLine.splice(index, 1);\n    }\n\n    this.playground.setWordsInCurrentLine(wordsInCurrentLine);\n    this.playgroundView.getSourceBlockHTML().append(this.puzzle);\n\n    if (wordsInCurrentLine.length !== words[currentRound].length) {\n      checkBtn.setDisabled();\n    } else {\n      checkBtn.setEnabled();\n    }\n  }\n\n  private createHTML(word: string): HTMLDivElement {\n    const isDraggable = 'true';\n    this.puzzle = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.puzzle],\n      attributes: {\n        draggable: isDraggable,\n        id: word,\n      },\n      innerContent: word,\n    });\n\n    this.calculateSizePuzzle(this.puzzle);\n\n    this.puzzle.addEventListener(\n      EVENT_NAMES.click,\n      this.clickPuzzleHandler.bind(this),\n    );\n\n    return this.puzzle;\n  }\n}\n\nexport default PuzzleComponent;\n","import type { levelInfo } from '../pages/choiceGamePage/types/interfaces.ts';\nimport type { NewData } from '../widgets/playground/types/interfaces.ts';\n\nconst isNewData = (data: unknown): data is NewData => {\n  if (\n    typeof data === 'object' &&\n    data !== null &&\n    'currentRound' in data &&\n    typeof data.currentRound === 'number' &&\n    'currentLVL' in data &&\n    typeof data.currentLVL === 'number' &&\n    'gameData' in data &&\n    data.gameData !== null &&\n    Array.isArray(data.gameData) &&\n    data.gameData.every(\n      (round: levelInfo) =>\n        'rounds' in round &&\n        Array.isArray(round.rounds) &&\n        'roundsCount' in round &&\n        typeof round.roundsCount === 'number',\n    )\n  ) {\n    return true;\n  }\n  return false;\n};\n\nexport default isNewData;\n","const API_URLS = {\n  levelData:\n    'https://raw.githubusercontent.com/rolling-scopes-school/rss-puzzle-data/main/data/wordCollectionLevel',\n  cutImg:\n    'https://raw.githubusercontent.com/rolling-scopes-school/rss-puzzle-data/main/images/',\n} as const;\n\nexport default API_URLS;\n","const shuffleArr = (array: unknown[]): unknown[] => {\n  const shuffledArray = array.slice();\n  for (let i = shuffledArray.length - 1; i > 0; i -= 1) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n};\n\nexport default shuffleArr;\n","import { EVENT_NAMES, TAG_NAMES } from '../../../shared/types/enums.ts';\nimport type {\n  CompletedRound,\n  levelInfo,\n  wordsInfo,\n} from '../../../pages/choiceGamePage/types/interfaces.ts';\nimport {\n  AUDIO_SRC,\n  EVENT_ACCESSIBILITY,\n  IS_VISIBLE,\n  randomIndex,\n} from '../types/constants.ts';\nimport PlaygroundView from '../ui/PlaygroundView.ts';\nimport styles from '../ui/style.module.scss';\nimport puzzleStyles from '../../../entities/puzzle/style.module.scss';\nimport PuzzleComponent from '../../../entities/puzzle/Puzzle.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport MediatorModel from '../../../pages/core/mediator/model/MediatorModel.ts';\nimport AppEvents from '../../../pages/core/mediator/types/enums.ts';\nimport IMG_SRC from '../ui/imgSrc/imgSrc.ts';\nimport type StorageModel from '../../../app/Storage/model/StorageModel.ts';\nimport isNewData from '../../../utils/isNewData.ts';\nimport STORE_KEYS from '../../../app/Storage/types/enums.ts';\nimport API_URLS from '../../../pages/choiceGamePage/types/constants.ts';\nimport formattedText from '../../../utils/formattedText.ts';\nimport { PAGES_IDS } from '../../../pages/types/enums.ts';\nimport type MapOfLineInfo from '../types/types.ts';\nimport type { PictureInfo } from '../types/interfaces.ts';\nimport shuffleArr from '../../../utils/shuffleArr.ts';\n\nclass PlaygroundModel {\n  private storage: StorageModel;\n\n  private view: PlaygroundView;\n\n  private gameData: levelInfo[] = [];\n\n  private levelData: levelInfo | null = null;\n\n  private audio: HTMLAudioElement;\n\n  private singletonMediator: MediatorModel<unknown>;\n\n  private words: string[][] = [];\n\n  private translateSentence = '';\n\n  private shuffledWords: string[][];\n\n  private lvl = 1;\n\n  private currentRoundLvl = 0;\n\n  private currentRound = 0;\n\n  private wordsInCurrentLine: string[] = [];\n\n  private puzzles: PuzzleComponent[][] = [];\n\n  private wordLinesHTML: HTMLDivElement[] = [];\n\n  private dragWrapper: HTMLElement;\n\n  private knowLines: MapOfLineInfo = new Map();\n\n  private dontKnowLines: MapOfLineInfo = new Map();\n\n  private imageRound: HTMLImageElement | null = null;\n\n  private pictureInfo: PictureInfo = {\n    src: '',\n    title: '',\n    info: '',\n  };\n\n  constructor(storage: StorageModel) {\n    this.storage = storage;\n    this.view = new PlaygroundView();\n    this.singletonMediator = MediatorModel.getInstance();\n    this.audio = this.view.getAudioElement();\n    this.shuffledWords = this.shuffleWords();\n    this.wordLinesHTML = this.createWordLines();\n    this.dragWrapper = this.view.getSourceBlockHTML();\n    this.init();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.view.getHTML();\n  }\n\n  public getView(): PlaygroundView {\n    return this.view;\n  }\n\n  public getWordsInCurrentLine(): string[] {\n    return this.wordsInCurrentLine;\n  }\n\n  public setWordsInCurrentLine(words: string[]): void {\n    this.wordsInCurrentLine = words;\n  }\n\n  public getWordLinesHTML(): HTMLDivElement[] {\n    return this.wordLinesHTML;\n  }\n\n  public getCurrentRound(): number {\n    return this.currentRound;\n  }\n\n  public getWords(): string[][] {\n    return this.words;\n  }\n\n  public getPuzzles(): PuzzleComponent[][] {\n    return this.puzzles;\n  }\n\n  public getImageRound(): HTMLImageElement | null {\n    return this.imageRound;\n  }\n\n  private switchTranslateListen(): void {\n    const translateListenHTML = this.view.getTranslateListenBtn().getHTML();\n    translateListenHTML.innerHTML = IMG_SRC.volumeOn;\n    translateListenHTML.classList.add(styles.translate_btn_active);\n    this.audio.src = this.getCurrentAudioURL();\n    this.audio.play().catch(() => {});\n  }\n\n  private setDragsForSourceBlock(): void {\n    const sourceBlock = this.view.getSourceBlockHTML();\n\n    sourceBlock.addEventListener(EVENT_NAMES.dragOver, (event) =>\n      event.preventDefault(),\n    );\n\n    sourceBlock.addEventListener(EVENT_NAMES.dragDrop, (event: DragEvent) => {\n      this.setDragDrop(event, sourceBlock);\n    });\n  }\n\n  private checkLine(): boolean {\n    if (\n      this.wordsInCurrentLine.length === this.words[this.currentRound].length &&\n      this.wordsInCurrentLine.every(\n        (word, index) => this.words[this.currentRound][index] === word,\n      )\n    ) {\n      const continueBtn = this.view.getContinueBtn();\n      continueBtn.setEnabled();\n\n      const currentWordLine = this.wordLinesHTML[this.currentRound];\n      const filterStyle = 'grayscale(0)';\n      currentWordLine.style.backdropFilter = filterStyle;\n      currentWordLine.style.pointerEvents = EVENT_ACCESSIBILITY.none;\n\n      this.puzzles[this.currentRound].forEach((puzzle) => {\n        const currentPuzzle = puzzle.getHTML();\n        currentPuzzle.classList.remove(puzzleStyles.puzzle_placeholder);\n      });\n\n      const translateSentenceHTML = this.view.getTranslateSentenceHTML();\n      translateSentenceHTML.classList.remove(styles.translate_sentence_hidden);\n      const translateListenBtn = this.view.getTranslateListenBtn().getHTML();\n      translateListenBtn.classList.remove(styles.translate_listen_hidden);\n      this.addKnowLine();\n      return true;\n    }\n    return false;\n  }\n\n  private addKnowLine(): void {\n    const currentLine =\n      this.levelData?.rounds[this.currentRoundLvl].words[this.currentRound];\n    const currentLineData = {\n      audioCurrentLineSrc: this.getCurrentAudioURL(),\n      sentenceCurrentLine: currentLine?.textExample,\n    };\n    this.knowLines.set(this.currentRound, currentLineData);\n  }\n\n  private addDontKnowLine(): void {\n    const currentLine =\n      this.levelData?.rounds[this.currentRoundLvl].words[this.currentRound];\n    const currentLineData = {\n      audioCurrentLineSrc: this.getCurrentAudioURL(),\n      sentenceCurrentLine: currentLine?.textExample,\n    };\n    this.dontKnowLines.set(this.currentRound, currentLineData);\n  }\n\n  private clearRoundInfo(): void {\n    this.currentRound = 0;\n    this.words = [];\n    this.wordsInCurrentLine = [];\n    this.puzzles = [];\n    this.wordLinesHTML = [];\n    this.shuffledWords = [];\n    this.wordsInCurrentLine = [];\n    this.knowLines.clear();\n    this.dontKnowLines.clear();\n\n    const checkBtn = this.view.getCheckBtn();\n    const continueBtn = this.view.getContinueBtn();\n    const nextRoundBtn = this.view.getNextRoundBtn();\n    const autoCompleteBtn = this.view.getAutocompleteBtn();\n    const statisticsBtn = this.view.getStatisticsBtn();\n    nextRoundBtn.getHTML().classList.add(styles.btn__hidden);\n    checkBtn.getHTML().classList.remove(styles.btn__hidden);\n    autoCompleteBtn.getHTML().classList.remove(styles.btn__hidden);\n    statisticsBtn.getHTML().classList.add(styles.btn__hidden);\n    continueBtn.setDisabled();\n    checkBtn.setDisabled();\n    autoCompleteBtn.setEnabled();\n  }\n\n  private setCurrentWords(): void {\n    const currentWords = this.levelData?.rounds[this.currentRoundLvl].words;\n    currentWords?.forEach((word: wordsInfo) => {\n      this.words.push(word.textExample.split(' '));\n    });\n  }\n\n  private checkLimitSaveGame(): void {\n    if (this.levelData && this.currentRoundLvl === this.levelData.roundsCount) {\n      this.lvl = this.lvl === this.gameData.length - 1 ? 0 : (this.lvl += 1);\n      this.levelData = this.gameData[this.lvl];\n      this.currentRoundLvl = 0;\n    }\n  }\n\n  // private checkVisibleBackgroundHint(): void {\n  //   this.puzzles.forEach((line) => {\n  //     line.forEach((puzzle) => {\n  //       const currentPuzzle = puzzle.getHTML();\n  //       currentPuzzle.classList.toggle(\n  //         puzzleStyles.puzzle_placeholder,\n  //         this.storage.get(STORE_KEYS.BACKGROUND_HINT) === false,\n  //       );\n  //     });\n  //   });\n  // }\n\n  private setCurrentRoundImg(): void {\n    const imgRoundSrc = `${API_URLS.cutImg}${this.levelData?.rounds[this.currentRoundLvl].levelData.imageSrc}`;\n    this.imageRound = new Image();\n    this.imageRound.src = imgRoundSrc;\n    this.imageRound.classList.add(styles.game_board__image);\n\n    this.imageRound.onload = async (): Promise<void> => {\n      const gameBoard = this.view.getGameBoardHTML();\n\n      if (this.imageRound) {\n        gameBoard.append(this.imageRound);\n      }\n\n      await this.waitForImageClientWidth();\n      this.addBackgroundToPuzzle();\n    };\n  }\n\n  private waitForImageClientWidth(): Promise<void> {\n    return new Promise((resolve) => {\n      const checkClientWidth = (): void => {\n        if (this.imageRound?.clientWidth) {\n          resolve();\n        } else {\n          setTimeout(checkClientWidth, 0);\n        }\n      };\n\n      checkClientWidth();\n    });\n  }\n\n  private updateRoundSubtitle(): void {\n    const textContent = `Lvl: ${this.lvl + 1} Round: ${this.currentRoundLvl + 1}`;\n    this.view.getRoundSubtitle().textContent = textContent;\n  }\n\n  private redrawPlayground(): void {\n    this.view.getGameBoardHTML().classList.remove(styles.game_board__complete);\n    this.view.clearGameBoardHTML();\n    this.view.clearSourceBlockHTML();\n    this.setCurrentWords();\n    this.shuffleWords();\n    this.wordLinesHTML = this.createWordLines();\n    this.createPuzzleElements();\n    this.fillSourcedBlock();\n    this.setDragListenersToNextRound();\n    this.setTranslateSentence();\n    this.updateRoundSubtitle();\n    this.view.getTranslateSentenceHTML().innerHTML = this.translateSentence;\n    this.wordLinesHTML[this.currentRound].style.pointerEvents =\n      EVENT_ACCESSIBILITY.auto;\n    this.setCurrentRoundImg();\n  }\n\n  private setTranslateSentence(): string {\n    let translateSentence =\n      this.levelData?.rounds[this.currentRoundLvl].words[this.currentRound]\n        .textExampleTranslate;\n\n    if (!translateSentence) {\n      translateSentence = '';\n    }\n\n    this.translateSentence = translateSentence;\n    return this.translateSentence;\n  }\n\n  private shuffleWords(): string[][] {\n    this.shuffledWords = this.words.map((wordArr: string[]) =>\n      [...wordArr].sort(() => Math.random() - randomIndex),\n    );\n\n    return this.shuffledWords;\n  }\n\n  private saveCompletedRound(): void {\n    let completedRounds: CompletedRound[] =\n      this.storage.get<CompletedRound[]>(STORE_KEYS.COMPLETED_ROUND) || [];\n\n    if (!completedRounds) {\n      completedRounds = [];\n    }\n\n    const formattedLVL = this.lvl + 1;\n\n    const completedRoundData = {\n      lvl: formattedLVL,\n      round: this.currentRoundLvl,\n    };\n    completedRounds.push(completedRoundData);\n    this.storage.add(\n      STORE_KEYS.COMPLETED_ROUND,\n      JSON.stringify(completedRounds),\n    );\n    this.singletonMediator.notify(AppEvents.newCompletedRound, '');\n  }\n\n  private saveLastRound(): void {\n    const lastRoundData = {\n      currentLVL: this.lvl + 1,\n      currentRound: this.currentRoundLvl + 1,\n      gameData: this.gameData,\n    };\n    this.storage.add(STORE_KEYS.LAST_ROUND, JSON.stringify(lastRoundData));\n  }\n\n  private checkLimitGames(): void {\n    if (\n      this.levelData &&\n      this.currentRoundLvl === this.levelData.roundsCount - 1\n    ) {\n      this.lvl = this.lvl === this.gameData.length - 1 ? 0 : (this.lvl += 1);\n      this.levelData = this.gameData[this.lvl];\n      this.currentRoundLvl = 0;\n    } else {\n      this.currentRoundLvl += 1;\n    }\n  }\n\n  private setGameData(data: unknown): void {\n    if (isNewData(data)) {\n      this.lvl = data.currentLVL - 1;\n      this.currentRoundLvl = data.currentRound;\n      this.gameData = data.gameData;\n      this.levelData = data.gameData[this.lvl];\n      this.checkLimitSaveGame();\n      this.clearRoundInfo();\n      this.redrawPlayground();\n    }\n  }\n\n  private startNextLine(): void {\n    const checkBtn = this.view.getCheckBtn();\n    const continueBtn = this.view.getContinueBtn();\n    const autoCompleteBtn = this.view.getAutocompleteBtn();\n    const nextRoundBtn = this.view.getNextRoundBtn();\n    const statisticsBtn = this.view.getStatisticsBtn();\n\n    this.switchInitialTranslateSentence();\n    this.switchInitialTranslateListen();\n\n    this.cleanAllUnmatchedPuzzles();\n\n    this.currentRound += 1;\n\n    if (this.wordLinesHTML[this.currentRound]) {\n      this.wordLinesHTML[this.currentRound].style.pointerEvents =\n        EVENT_ACCESSIBILITY.auto;\n    }\n\n    continueBtn.getHTML().classList.add(styles.btn__hidden);\n    nextRoundBtn.getHTML().classList.add(styles.btn__hidden);\n    statisticsBtn.getHTML().classList.add(styles.btn__hidden);\n    checkBtn.getHTML().classList.remove(styles.btn__hidden);\n\n    if (this.currentRound === this.words.length) {\n      this.endRound();\n      return;\n    }\n\n    this.setDragListenersToNextRound();\n    this.setTranslateSentence();\n    this.view.getTranslateSentenceHTML().innerHTML = this.translateSentence;\n    this.wordsInCurrentLine = [];\n    continueBtn.setDisabled();\n    checkBtn.setDisabled();\n    autoCompleteBtn.setEnabled();\n    this.view.clearSourceBlockHTML();\n    this.fillSourcedBlock();\n  }\n\n  private startNextRound(): void {\n    this.view.getGameBoardHTML().classList.remove(styles.game_board__complete);\n    this.view.getCheckBtn().setDisabled();\n    this.view.getCheckBtn().getHTML().classList.remove(styles.btn__hidden);\n    this.view.getNextRoundBtn().getHTML().classList.add(styles.btn__hidden);\n    const autoCompleteBtn = this.view.getAutocompleteBtn();\n    autoCompleteBtn.setEnabled();\n    this.saveCompletedRound();\n    this.clearRoundInfo();\n    this.checkLimitGames();\n    this.redrawPlayground();\n\n    this.view\n      .getTranslateSentenceHTML()\n      .classList.toggle(\n        styles.translate_sentence_hidden,\n        this.storage.get(STORE_KEYS.TRANSLATE_VISIBLE),\n      );\n\n    this.view\n      .getTranslateListenBtn()\n      .getHTML()\n      .classList.toggle(\n        styles.translate_listen_hidden,\n        this.storage.get(STORE_KEYS.LISTEN_VISIBLE),\n      );\n  }\n\n  private getCurrentRoundInfo(): PictureInfo {\n    const imgSrc = `${API_URLS.cutImg}${this.levelData?.rounds[this.currentRoundLvl].levelData.cutSrc}`;\n\n    const titleTextContent =\n      this.levelData?.rounds[this.currentRoundLvl].levelData.author ?? '';\n    const pictureNameText =\n      this.levelData?.rounds[this.currentRoundLvl].levelData.name ?? '';\n    const pictureYearText =\n      this.levelData?.rounds[this.currentRoundLvl].levelData.year ?? '';\n\n    const formattedTitle = formattedText(titleTextContent);\n    const formattedPictureName = formattedText(pictureNameText);\n    const formattedPictureYear = formattedText(pictureYearText);\n\n    const imgInfo = `- ${formattedPictureName} (${formattedPictureYear})`;\n    return {\n      src: imgSrc,\n      title: formattedTitle,\n      info: imgInfo,\n    };\n  }\n\n  private endRound(): void {\n    this.puzzles.forEach((line) => {\n      line.forEach((puzzle) => {\n        const currentPuzzle = puzzle.getHTML();\n        currentPuzzle.style.backgroundImage = '';\n      });\n    });\n    this.saveCompletedRound();\n    this.saveLastRound();\n    this.createContentForCompleteRound();\n    this.view\n      .getTranslateSentenceHTML()\n      .classList.add(styles.translate_sentence_hidden);\n\n    this.view\n      .getTranslateListenBtn()\n      .getHTML()\n      .classList.add(styles.translate_listen_hidden);\n    const continueBtn = this.view.getContinueBtn().getHTML();\n    continueBtn.classList.add(styles.btn__hidden);\n\n    const checkBtn = this.view.getCheckBtn().getHTML();\n    checkBtn.classList.add(styles.btn__hidden);\n\n    const nextRoundBtn = this.view.getNextRoundBtn().getHTML();\n    nextRoundBtn.classList.remove(styles.btn__hidden);\n\n    const statisticsBtn = this.view.getStatisticsBtn().getHTML();\n    statisticsBtn.classList.remove(styles.btn__hidden);\n\n    const autoCompleteBtn = this.view.getAutocompleteBtn().getHTML();\n    autoCompleteBtn.classList.add(styles.btn__hidden);\n\n    this.pictureInfo = this.getCurrentRoundInfo();\n\n    this.singletonMediator.notify(AppEvents.endRound, [\n      this.knowLines,\n      this.dontKnowLines,\n      this.pictureInfo,\n    ]);\n  }\n\n  private getCurrentAudioURL(): string {\n    const currentAudioSrc =\n      this.levelData?.rounds[this.currentRoundLvl].words[this.currentRound]\n        .audioExample;\n\n    const url = `${AUDIO_SRC}${currentAudioSrc}`;\n    return url;\n  }\n\n  private addBackgroundToPuzzle(): void {\n    const imageWidth = this.view.getGameBoardHTML().clientWidth ?? 0;\n    const imageHeight = this.view.getGameBoardHTML().clientHeight ?? 0;\n    const maxLines = 10;\n\n    this.words.forEach((line, lineIndex) => {\n      line.forEach((_, puzzleIndex) => {\n        this.puzzles.forEach((lineArr) => {\n          lineArr.forEach((puzzle) => {\n            const puzzleLine = puzzle.getHTML().getAttribute('line');\n            const puzzleWord = puzzle.getHTML().getAttribute('word');\n            const currentPuzzle = puzzle.getHTML();\n            if (\n              puzzleLine === String(lineIndex) &&\n              puzzleWord === String(puzzleIndex)\n            ) {\n              if (!currentPuzzle.style.backgroundImage) {\n                let backgroundPositionX = 0;\n                let backgroundPositionY = 0;\n                if (puzzleIndex > 0) {\n                  backgroundPositionX = -(\n                    puzzleIndex *\n                    (imageWidth / line.length)\n                  );\n                }\n                if (lineIndex > 0) {\n                  backgroundPositionY = -(lineIndex * (imageHeight / maxLines));\n                }\n\n                currentPuzzle.style.backgroundImage = `url(${this.imageRound?.src})`;\n                currentPuzzle.style.backgroundSize = `${imageWidth}px ${imageHeight}px`;\n                currentPuzzle.style.backgroundPosition = `${backgroundPositionX}px ${backgroundPositionY}px`;\n              }\n            }\n          });\n        });\n      });\n    });\n  }\n\n  private checkMatchingPuzzles(): void {\n    this.wordsInCurrentLine.forEach((word, index) => {\n      const isMatching = word === this.words[this.currentRound][index];\n      const currentLine = this.wordLinesHTML[this.currentRound];\n      const currentLineChildren = Array.from(currentLine.children);\n\n      currentLineChildren[index].classList.toggle(\n        styles.copy_puzzle__error,\n        !isMatching,\n      );\n      currentLineChildren[index].classList.toggle(\n        styles.copy_puzzle__success,\n        isMatching,\n      );\n\n      const continueBtnHTML = this.view.getContinueBtn().getHTML();\n      const checkBtnHTML = this.view.getCheckBtn().getHTML();\n      this.view.getCheckBtn().setDisabled();\n      const autoCompleteBtnHTML = this.view.getAutocompleteBtn().getHTML();\n\n      continueBtnHTML.classList.toggle(styles.btn__hidden, !this.checkLine());\n      checkBtnHTML.classList.toggle(styles.btn__hidden, this.checkLine());\n      autoCompleteBtnHTML.disabled = this.checkLine();\n    });\n  }\n\n  private cleanAllUnmatchedPuzzles(): void {\n    const currentLine = this.wordLinesHTML[this.currentRound];\n    const currentLineChildren = Array.from(currentLine.children);\n    currentLineChildren.forEach((children) => {\n      children.classList.remove(\n        styles.copy_puzzle__success,\n        styles.copy_puzzle__error,\n      );\n    });\n  }\n\n  private setDragListenersToNextRound(): void {\n    this.puzzles[this.currentRound].forEach((puzzle) => {\n      const currentPuzzle = puzzle.getHTML();\n      const puzzleWord = puzzle.getWord();\n      currentPuzzle.addEventListener(\n        EVENT_NAMES.dragStart,\n        (event: DragEvent) => {\n          this.setDragStartForPuzzle(currentPuzzle, event, puzzleWord);\n          const parent = currentPuzzle.parentElement;\n\n          if (parent) {\n            this.dragWrapper = parent;\n          }\n        },\n      );\n      currentPuzzle.addEventListener(EVENT_NAMES.dragEnd, () => {\n        this.setDragEndForPuzzle(currentPuzzle);\n      });\n    });\n  }\n\n  private createContentForCompleteRound(): void {\n    this.wordLinesHTML.forEach((wordsLine) => {\n      const currentWordsLine = wordsLine;\n      currentWordsLine.classList.add(styles.line_complete);\n      const wordsLineChildren = Array.from(wordsLine.children);\n      wordsLineChildren.forEach((puzzle) => {\n        const puzzleHTML = puzzle;\n        puzzleHTML.classList.add(puzzleStyles.puzzle_completed);\n        if (puzzleHTML instanceof HTMLDivElement) {\n          const fontSize = '0px';\n          puzzleHTML.style.fontSize = fontSize;\n        }\n      });\n    });\n\n    const titleTextContent =\n      this.levelData?.rounds[this.currentRoundLvl].levelData.author ?? '';\n    const pictureNameText =\n      this.levelData?.rounds[this.currentRoundLvl].levelData.name ?? '';\n    const pictureYearText =\n      this.levelData?.rounds[this.currentRoundLvl].levelData.year ?? '';\n\n    const formattedTitle = formattedText(titleTextContent);\n    const formattedPictureName = formattedText(pictureNameText);\n    const formattedPictureYear = formattedText(pictureYearText);\n\n    const imgInfo = `- ${formattedPictureName} (${formattedPictureYear})`;\n\n    const gameBoardHTML = this.view.getGameBoardHTML();\n    const title = this.view.getRoundTitle();\n    const description = this.view.getRoundDescription();\n    gameBoardHTML.classList.add(styles.game_board__complete);\n    title.textContent = formattedTitle;\n    description.textContent = imgInfo;\n    gameBoardHTML.append(title, description);\n  }\n\n  private autoCompleteLine(): void {\n    this.wordLinesHTML[this.currentRound].innerHTML = '';\n    this.wordLinesHTML[this.currentRound].style.pointerEvents =\n      EVENT_ACCESSIBILITY.none;\n    this.view.clearSourceBlockHTML();\n\n    const wordsCopy = [...this.words[this.currentRound]];\n    const puzzlesCopy = [...this.puzzles[this.currentRound]];\n\n    wordsCopy.forEach((word, index) => {\n      const puzzle = puzzlesCopy.find(\n        (item) =>\n          item.getHTML().id === word &&\n          item.getHTML().getAttribute('word') === String(index),\n      );\n      if (puzzle) {\n        this.wordLinesHTML[this.currentRound].appendChild(puzzle.getHTML());\n      }\n    });\n\n    this.puzzles[this.currentRound].forEach((puzzle) => {\n      const currentPuzzle = puzzle.getHTML();\n      currentPuzzle.classList.remove(puzzleStyles.puzzle_placeholder);\n    });\n\n    const checkBtnHTML = this.view.getCheckBtn();\n    const continueBtnHTML = this.view.getContinueBtn();\n    const nextRoundBtnHTML = this.view.getNextRoundBtn();\n    const autoCompleteBtn = this.view.getAutocompleteBtn();\n\n    continueBtnHTML.getHTML().classList.remove(styles.btn__hidden);\n    nextRoundBtnHTML.getHTML().classList.add(styles.btn__hidden);\n    checkBtnHTML.getHTML().classList.add(styles.btn__hidden);\n\n    autoCompleteBtn.setDisabled();\n    checkBtnHTML.setEnabled();\n    continueBtnHTML.setEnabled();\n\n    this.view\n      .getTranslateSentenceHTML()\n      .classList.remove(styles.translate_sentence_hidden);\n\n    this.view\n      .getTranslateListenBtn()\n      .getHTML()\n      .classList.remove(styles.translate_listen_hidden);\n\n    this.addDontKnowLine();\n  }\n\n  private switchInitialTranslateSentence(): void {\n    const isVisible = this.storage.get(AppEvents.switchTranslateVisible);\n    const translateSentenceHTML = this.view.getTranslateSentenceHTML();\n    if (typeof isVisible === 'boolean') {\n      translateSentenceHTML.classList.toggle(\n        styles.translate_sentence_hidden,\n        isVisible,\n      );\n    }\n  }\n\n  private switchVisibleTranslateSentence(isVisible: unknown): void {\n    const translateSentenceHTML = this.view.getTranslateSentenceHTML();\n\n    if (typeof isVisible === 'boolean') {\n      translateSentenceHTML.classList.toggle(\n        styles.translate_sentence_hidden,\n        !isVisible,\n      );\n    }\n  }\n\n  private switchInitialTranslateListen(): void {\n    const isVisible = this.storage.get(AppEvents.switchListenVisible);\n\n    const translateListenBtn = this.view.getTranslateListenBtn().getHTML();\n    if (typeof isVisible === 'boolean') {\n      translateListenBtn.classList.toggle(\n        styles.translate_listen_hidden,\n        isVisible,\n      );\n    }\n  }\n\n  private switchVisibleTranslateListen(isVisible: unknown): void {\n    const translateListenBtn = this.view.getTranslateListenBtn().getHTML();\n    if (typeof isVisible === 'boolean') {\n      translateListenBtn.classList.toggle(\n        styles.translate_listen_hidden,\n        !isVisible,\n      );\n    }\n  }\n\n  private switchInitialBackgroundHint(): void {\n    const isVisible = this.storage.get(AppEvents.switchBackgroundHintVisible);\n    if (typeof isVisible === 'boolean') {\n      this.puzzles[this.currentRound].forEach((puzzle) => {\n        const currentPuzzle = puzzle.getHTML();\n        currentPuzzle.classList.toggle(\n          puzzleStyles.puzzle_placeholder,\n          isVisible,\n        );\n      });\n    }\n  }\n\n  private switchVisibleBackgroundHint(isVisible: unknown): void {\n    if (typeof isVisible === 'boolean' && this.puzzles[this.currentRound]) {\n      this.puzzles[this.currentRound].forEach((puzzle) => {\n        const currentPuzzle = puzzle.getHTML();\n        currentPuzzle.classList.toggle(\n          puzzleStyles.puzzle_placeholder,\n          !isVisible,\n        );\n      });\n    }\n  }\n\n  private setHandlersToButtons(): void {\n    const checkBtnHTML = this.view.getCheckBtn().getHTML();\n    const continueBtnHTML = this.view.getContinueBtn().getHTML();\n    const autoCompleteBtnHTML = this.view.getAutocompleteBtn().getHTML();\n    const nextRoundBtnHTML = this.view.getNextRoundBtn().getHTML();\n    const statisticsBtnHTML = this.view.getStatisticsBtn().getHTML();\n\n    checkBtnHTML.addEventListener(\n      EVENT_NAMES.click,\n      this.checkMatchingPuzzles.bind(this),\n    );\n\n    continueBtnHTML.addEventListener(\n      EVENT_NAMES.click,\n      this.startNextLine.bind(this),\n    );\n\n    autoCompleteBtnHTML.addEventListener(\n      EVENT_NAMES.click,\n      this.autoCompleteLine.bind(this),\n    );\n\n    nextRoundBtnHTML.addEventListener(\n      EVENT_NAMES.click,\n      this.startNextRound.bind(this),\n    );\n\n    statisticsBtnHTML.addEventListener(EVENT_NAMES.click, () => {\n      this.singletonMediator.notify(AppEvents.changeHash, PAGES_IDS.STATISTICS);\n      this.singletonMediator.notify(AppEvents.switchDisableNextRoundBtn, '');\n    });\n  }\n\n  private createWordLines(): HTMLDivElement[] {\n    this.shuffledWords.forEach((_, index) => {\n      const wordsLine = createBaseElement({\n        tag: TAG_NAMES.div,\n        cssClasses: [styles.line],\n      });\n\n      wordsLine.style.pointerEvents = EVENT_ACCESSIBILITY.none;\n      wordsLine.style.top = `${index}0%`;\n      this.wordLinesHTML.push(wordsLine);\n\n      wordsLine.addEventListener(EVENT_NAMES.dragOver, (event) => {\n        event.preventDefault();\n      });\n\n      wordsLine.addEventListener(EVENT_NAMES.dragDrop, (event: DragEvent) => {\n        this.setDragDrop(event, wordsLine);\n      });\n    });\n\n    this.view.getGameBoardHTML().append(...this.wordLinesHTML);\n\n    return this.wordLinesHTML;\n  }\n\n  private setDragDrop(event: DragEvent, element: HTMLElement): void {\n    if (this.dragWrapper === element) {\n      return;\n    }\n    if (event.dataTransfer) {\n      element.classList.remove(styles.line_hovered);\n\n      const draggedElementId = event.dataTransfer.getData('id');\n      const index = this.puzzles[this.currentRound].findIndex(\n        (puz) => puz.getHTML().id === draggedElementId,\n      );\n\n      if (index !== -1) {\n        const puzzle = this.puzzles[this.currentRound][index];\n        this.puzzles[this.currentRound].splice(index, 1);\n\n        if (puzzle.getHTML().parentNode !== element) {\n          puzzle.clickPuzzleHandler();\n          element.append(puzzle.getHTML());\n          this.puzzles[this.currentRound].push(puzzle);\n        }\n      }\n    }\n  }\n\n  private createPuzzleElements(): PuzzleComponent[][] {\n    this.shuffledWords.forEach((wordsLine, lineIndex) => {\n      const lineArr: PuzzleComponent[] = [];\n\n      wordsLine.forEach((_, wordIndex) => {\n        const puzzle = new PuzzleComponent(\n          this.words[lineIndex][wordIndex],\n          this,\n          this.view,\n        );\n\n        puzzle.getHTML().setAttribute('line', `${lineIndex}`);\n        puzzle.getHTML().setAttribute('word', `${wordIndex}`);\n\n        lineArr.push(puzzle);\n      });\n\n      this.puzzles.push(lineArr);\n    });\n\n    return this.puzzles;\n  }\n\n  private fillSourcedBlock(): void {\n    const sourcedBlockHTML = this.view.getSourceBlockHTML();\n    const shuffledPuzzles = shuffleArr(this.puzzles[this.currentRound]);\n    shuffledPuzzles.forEach((puzzle) => {\n      if (puzzle instanceof PuzzleComponent) {\n        const puzzleHTML = puzzle.getHTML();\n        sourcedBlockHTML.append(puzzleHTML);\n      }\n    });\n\n    shuffledPuzzles.forEach((puzzle) => {\n      if (puzzle instanceof PuzzleComponent) {\n        const currentPuzzle = puzzle.getHTML();\n        currentPuzzle.classList.toggle(\n          puzzleStyles.puzzle_placeholder,\n          this.storage.get(STORE_KEYS.BACKGROUND_HINT) === true,\n        );\n      }\n    });\n\n    this.switchInitialBackgroundHint();\n\n    const gridTemplateColumns = `repeat(${this.puzzles[this.currentRound].length}, auto)`;\n    sourcedBlockHTML.style.gridTemplateColumns = gridTemplateColumns;\n    this.wordLinesHTML[this.currentRound].style.gridTemplateColumns =\n      gridTemplateColumns;\n  }\n\n  private setDragStartForPuzzle(\n    currentPuzzle: HTMLElement,\n    event: DragEvent,\n    puzzleWord: string,\n  ): void {\n    const { target } = event;\n    const currentLine = this.wordLinesHTML[this.currentRound];\n    const sourceBlock = this.view.getSourceBlockHTML();\n\n    if (currentPuzzle.parentElement === sourceBlock) {\n      currentLine.classList.add(styles.line_hovered);\n    } else {\n      sourceBlock.classList.add(styles.line_hovered);\n    }\n\n    if (event.dataTransfer && target instanceof HTMLElement && target.id) {\n      event.dataTransfer.setData('id', puzzleWord);\n    }\n    currentPuzzle.classList.add(styles.puzzle_placeholder);\n  }\n\n  private setDragEndForPuzzle(currentPuzzle: HTMLElement): void {\n    const currentLine = this.wordLinesHTML[this.currentRound];\n    const sourceBlock = this.view.getSourceBlockHTML();\n\n    if (currentPuzzle.parentElement === sourceBlock) {\n      currentLine.classList.remove(styles.line_hovered);\n    } else {\n      sourceBlock.classList.remove(styles.line_hovered);\n    }\n\n    currentPuzzle.classList.remove(styles.puzzle_placeholder);\n  }\n\n  private init(): void {\n    this.singletonMediator.subscribe(\n      AppEvents.switchTranslateVisible,\n      this.switchVisibleTranslateSentence.bind(this),\n    );\n    this.singletonMediator.subscribe(\n      AppEvents.switchListenVisible,\n      this.switchVisibleTranslateListen.bind(this),\n    );\n\n    this.singletonMediator.subscribe(\n      AppEvents.switchBackgroundHintVisible,\n      this.switchVisibleBackgroundHint.bind(this),\n    );\n\n    this.singletonMediator.subscribe(AppEvents.logOut, () => {\n      this.switchVisibleTranslateListen(IS_VISIBLE.visible);\n      this.switchVisibleTranslateSentence(IS_VISIBLE.visible);\n      this.switchVisibleBackgroundHint(IS_VISIBLE.visible);\n    });\n\n    this.switchInitialTranslateListen();\n    this.switchInitialTranslateSentence();\n\n    this.singletonMediator.subscribe(\n      AppEvents.newGame,\n      this.setGameData.bind(this),\n    );\n\n    this.singletonMediator.subscribe(\n      AppEvents.nextRound,\n      this.startNextRound.bind(this),\n    );\n\n    this.setHandlersToButtons();\n    this.setDragsForSourceBlock();\n\n    const translateListenHTML = this.view.getTranslateListenBtn().getHTML();\n    translateListenHTML.addEventListener(\n      EVENT_NAMES.click,\n      this.switchTranslateListen.bind(this),\n    );\n\n    this.audio.addEventListener(EVENT_NAMES.ended, () => {\n      translateListenHTML.innerHTML = IMG_SRC.volumeOff;\n      translateListenHTML.classList.remove(styles.translate_btn_active);\n    });\n  }\n}\n\nexport default PlaygroundModel;\n","import createBaseElement from '../../../utils/createBaseElement.ts';\nimport type PageInterface from '../../types/interfaces.ts';\nimport styles from './style.module.scss';\nimport { PAGES_STATE } from '../../types/enums.ts';\nimport { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport type PlaygroundView from '../../../widgets/playground/ui/PlaygroundView.ts';\nimport type GameSettingsView from '../../../features/gameSettings/ui/GameSettingsView.ts';\n\nclass MainPageView implements PageInterface {\n  private id: string;\n\n  private parent: HTMLDivElement;\n\n  private playgroundView: PlaygroundView;\n\n  private gameSettingsView: GameSettingsView;\n\n  private page: HTMLDivElement;\n\n  constructor(\n    id: string,\n    parent: HTMLDivElement,\n    playground: PlaygroundView,\n    gameSettings: GameSettingsView,\n  ) {\n    this.id = id;\n    this.parent = parent;\n    this.playgroundView = playground;\n    this.gameSettingsView = gameSettings;\n    this.page = this.createHTML(this.id);\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.page;\n  }\n\n  public getID(): string {\n    return this.id;\n  }\n\n  private createHTML(id: string): HTMLDivElement {\n    this.page = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.page],\n      attributes: { id },\n    });\n\n    const wrapper = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.game_wrapper],\n    });\n    this.page.append(wrapper);\n    wrapper.append(\n      this.playgroundView.getHTML(),\n      this.gameSettingsView.getHTML(),\n    );\n\n    this.page.style.display = PAGES_STATE.HIDDEN;\n    this.parent.append(this.page);\n    return this.page;\n  }\n}\n\nexport default MainPageView;\n","const translateOn = `<svg width=\"20\" height=\"14\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M4.34315 3.65686L1 7.00001L4.34315 10.3432C7.46734 13.4674 12.5327 13.4674 15.6569 10.3432L19 7.00001L15.6569 3.65687C12.5327 0.532674 7.46734 0.53267 4.34315 3.65686Z\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n<path d=\"M12 7.00001C12 8.10458 11.1046 9.00001 10 9.00001C8.89543 9.00001 8 8.10458 8 7.00001C8 5.89544 8.89543 5.00001 10 5.00001C11.1046 5.00001 12 5.89544 12 7.00001Z\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n</svg>\n`;\n\nconst translateOff = `<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8.58579 8.58579C8.94772 8.22386 9.44771 8 10 8C11.1046 8 12 8.89543 12 10C12 10.5523 11.7761 11.0523 11.4142 11.4142M8.58579 8.58579L11.4142 11.4142M8.58579 8.58579L5.61839 5.61839M11.4142 11.4142L14.3816 14.3816M19 19L14.3816 14.3816M14.3816 14.3816C14.8327 14.0858 15.2604 13.7396 15.6569 13.3431L19 10L15.6569 6.65685C12.9291 3.92913 8.72168 3.58297 5.61839 5.61839M5.61839 5.61839L1 1M3 8L1 10L4.34315 13.3431C6.1601 15.1601 8.63361 15.9204 11 15.6239\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n</svg>\n`;\n\nconst chooseGameImg = `<svg width=\"18\" height=\"20\" viewBox=\"0 0 18 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M9 8C10.1046 8 11 8.89543 11 10C11 11.1046 10.1046 12 9 12C7.89543 12 7 11.1046 7 10C7 8.89543 7.89543 8 9 8Z\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n<path d=\"M3.90136 4.7469C2.96492 4.20624 1.76749 4.52709 1.22684 5.46353L1.1851 5.53583C0.644237 6.47263 0.965207 7.67051 1.902 8.21137L2.1448 8.35155C2.71742 8.68215 3 9.3388 3 10C3 10.6612 2.71742 11.3179 2.1448 11.6485L1.902 11.7886C0.965208 12.3295 0.644237 13.5274 1.1851 14.4642L1.22684 14.5365C1.7675 15.4729 2.96492 15.7938 3.90136 15.2531L4.14546 15.1122C4.71803 14.7816 5.42331 14.863 5.9953 15.1946C6.56711 15.526 7 16.1005 7 16.7614V17.0427C7 18.1237 7.8763 19 8.95728 19H9.04273C10.1237 19 11 18.1237 11 17.0427V16.7614C11 16.1005 11.4329 15.5261 12.0047 15.1946C12.5767 14.863 13.282 14.7816 13.8545 15.1122L14.0986 15.2531C15.0351 15.7938 16.2325 15.4729 16.7732 14.5365L16.8149 14.4642C17.3558 13.5274 17.0348 12.3295 16.098 11.7886L15.8552 11.6485C15.2826 11.3179 15 10.6612 15 10C15 9.3388 15.2826 8.68215 15.8552 8.35155L16.098 8.21137C17.0348 7.6705 17.3558 6.47262 16.8149 5.53581L16.7732 5.46353C16.2325 4.52709 15.0351 4.20623 14.0986 4.74689L13.8545 4.88783C13.282 5.2184 12.5767 5.13699 12.0047 4.80541C11.4329 4.47395 11 3.89952 11 3.23859V2.95728C11 1.8763 10.1237 1 9.04273 1L8.95728 1C7.8763 1 7 1.8763 7 2.95727V3.23858C7 3.89952 6.56711 4.47395 5.9953 4.80542C5.42331 5.13699 4.71803 5.2184 4.14546 4.88783L3.90136 4.7469Z\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n</svg>\n`;\n\nconst logOutImg = `<svg width=\"19\" height=\"21\" viewBox=\"0 0 19 21\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M9 13H7C3.68629 13 1 15.6863 1 19M12 14L15 17M15 17L18 20M15 17L18 14M15 17L12 20M12 5C12 7.20914 10.2091 9 8 9C5.79086 9 4 7.20914 4 5C4 2.79086 5.79086 1 8 1C10.2091 1 12 2.79086 12 5Z\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n</svg>\n`;\n\nconst IMG_SRC = {\n  translateOn,\n  translateOff,\n  chooseGameImg,\n  logOutImg,\n} as const;\n\nexport default IMG_SRC;\n","import { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport styles from './style.module.scss';\nimport IMG_SRC from './img/imgSrc/imgSrc.ts';\n\nclass GameSettingsView {\n  private gameSettings: HTMLDivElement;\n\n  private translateSentenceWrapper: HTMLDivElement;\n\n  private translateSentenceImg: HTMLSpanElement;\n\n  private translateListenWrapper: HTMLDivElement;\n\n  private translateListenImg: HTMLSpanElement;\n\n  private choiceGameWrapper: HTMLDivElement;\n\n  private choiceGameImg: HTMLSpanElement;\n\n  private backgroundHintImg: HTMLSpanElement;\n\n  private backgroundHintWrapper: HTMLDivElement;\n\n  private logOutWrapper: HTMLDivElement;\n\n  private logOutImg: HTMLSpanElement;\n\n  constructor() {\n    this.translateSentenceImg = this.createTranslateSentenceImg();\n    this.translateSentenceWrapper = this.createTranslateSentenceWrapper();\n    this.translateListenImg = this.createTranslateListenImg();\n    this.translateListenWrapper = this.createTranslateListenWrapper();\n    this.choiceGameImg = this.createChoiceGameImg();\n    this.choiceGameWrapper = this.createChoiceGameWrapper();\n    this.backgroundHintImg = this.createBackgroundHintImg();\n    this.backgroundHintWrapper = this.createBackgroundHintWrapper();\n    this.logOutImg = this.createLogOutImg();\n    this.logOutWrapper = this.createLogOutWrapper();\n    this.gameSettings = this.createHTML();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.gameSettings;\n  }\n\n  public getTranslateSentenceWrapper(): HTMLDivElement {\n    return this.translateSentenceWrapper;\n  }\n\n  public getTranslateSentenceImg(): HTMLSpanElement {\n    return this.translateSentenceImg;\n  }\n\n  public getTranslateListenWrapper(): HTMLDivElement {\n    return this.translateListenWrapper;\n  }\n\n  public getTranslateListenImg(): HTMLSpanElement {\n    return this.translateListenImg;\n  }\n\n  public getBackgroundHintWrapper(): HTMLDivElement {\n    return this.backgroundHintWrapper;\n  }\n\n  public getBackgroundHintImg(): HTMLSpanElement {\n    return this.backgroundHintImg;\n  }\n\n  public getChoiceGameWrapper(): HTMLDivElement {\n    return this.choiceGameWrapper;\n  }\n\n  public getChoiceGameImg(): HTMLSpanElement {\n    return this.choiceGameImg;\n  }\n\n  public getLogOutWrapper(): HTMLDivElement {\n    return this.logOutWrapper;\n  }\n\n  private createTranslateSentenceImg(): HTMLSpanElement {\n    this.translateSentenceImg = createBaseElement({\n      tag: TAG_NAMES.span,\n      cssClasses: [styles.translate_sentence_img],\n      attributes: {},\n      innerContent: IMG_SRC.translateOff,\n    });\n    return this.translateSentenceImg;\n  }\n\n  private createTranslateSentenceWrapper(): HTMLDivElement {\n    this.translateSentenceWrapper = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.game_settings_item],\n    });\n\n    const textContent = 'Translate';\n    const textElem = createBaseElement({\n      tag: TAG_NAMES.span,\n      cssClasses: [styles.game_settings_item_text],\n      innerContent: textContent,\n    });\n\n    this.translateSentenceWrapper.append(this.translateSentenceImg, textElem);\n    return this.translateSentenceWrapper;\n  }\n\n  private createTranslateListenImg(): HTMLSpanElement {\n    this.translateListenImg = createBaseElement({\n      tag: TAG_NAMES.span,\n      cssClasses: [styles.translate_listen_img],\n      attributes: {},\n      innerContent: IMG_SRC.translateOff,\n    });\n    return this.translateListenImg;\n  }\n\n  private createTranslateListenWrapper(): HTMLDivElement {\n    this.translateListenWrapper = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.game_settings_item],\n    });\n\n    const textContent = 'Listen';\n    const textElem = createBaseElement({\n      tag: TAG_NAMES.span,\n      cssClasses: [styles.game_settings_item_text],\n      innerContent: textContent,\n    });\n\n    this.translateListenWrapper.append(this.translateListenImg, textElem);\n    return this.translateListenWrapper;\n  }\n\n  private createChoiceGameImg(): HTMLSpanElement {\n    this.choiceGameImg = createBaseElement({\n      tag: TAG_NAMES.span,\n      cssClasses: [styles.translate_listen_img],\n      attributes: {},\n      innerContent: IMG_SRC.chooseGameImg,\n    });\n    return this.choiceGameImg;\n  }\n\n  private createChoiceGameWrapper(): HTMLDivElement {\n    this.choiceGameWrapper = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.game_settings_item],\n    });\n\n    const textContent = 'Choice Game';\n    const textElem = createBaseElement({\n      tag: TAG_NAMES.span,\n      cssClasses: [styles.game_settings_item_text],\n      innerContent: textContent,\n    });\n\n    this.choiceGameWrapper.append(this.choiceGameImg, textElem);\n    return this.choiceGameWrapper;\n  }\n\n  private createLogOutImg(): HTMLSpanElement {\n    this.logOutImg = createBaseElement({\n      tag: TAG_NAMES.span,\n      cssClasses: [styles.translate_listen_img],\n      attributes: {},\n      innerContent: IMG_SRC.logOutImg,\n    });\n    return this.logOutImg;\n  }\n\n  private createBackgroundHintWrapper(): HTMLDivElement {\n    this.backgroundHintWrapper = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.game_settings_item],\n    });\n\n    const textContent = 'Background Hint';\n    const textElem = createBaseElement({\n      tag: TAG_NAMES.span,\n      cssClasses: [styles.game_settings_item_text],\n      innerContent: textContent,\n    });\n\n    this.backgroundHintWrapper.append(this.backgroundHintImg, textElem);\n    return this.backgroundHintWrapper;\n  }\n\n  private createBackgroundHintImg(): HTMLSpanElement {\n    this.backgroundHintImg = createBaseElement({\n      tag: TAG_NAMES.span,\n      cssClasses: [styles.translate_listen_img],\n      attributes: {},\n      innerContent: IMG_SRC.translateOff,\n    });\n    return this.backgroundHintImg;\n  }\n\n  private createLogOutWrapper(): HTMLDivElement {\n    this.logOutWrapper = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.game_settings_item],\n    });\n\n    const textContent = 'Log Out';\n    const textElem = createBaseElement({\n      tag: TAG_NAMES.span,\n      cssClasses: [styles.game_settings_item_text],\n      innerContent: textContent,\n    });\n\n    this.logOutWrapper.append(this.logOutImg, textElem);\n    return this.logOutWrapper;\n  }\n\n  private createHTML(): HTMLDivElement {\n    this.gameSettings = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.game_settings],\n    });\n\n    this.gameSettings.append(\n      this.translateSentenceWrapper,\n      this.translateListenWrapper,\n      this.backgroundHintWrapper,\n      this.choiceGameWrapper,\n      this.logOutWrapper,\n    );\n    return this.gameSettings;\n  }\n}\n\nexport default GameSettingsView;\n","const IS_VISIBLE = {\n  visible: true,\n  hidden: false,\n};\n\nexport default IS_VISIBLE;\n","import MediatorModel from '../../../pages/core/mediator/model/MediatorModel.ts';\nimport GameSettingsView from '../ui/GameSettingsView.ts';\nimport IMG_SRC from '../ui/img/imgSrc/imgSrc.ts';\nimport { EVENT_NAMES } from '../../../shared/types/enums.ts';\nimport styles from '../ui/style.module.scss';\nimport AppEvents from '../../../pages/core/mediator/types/enums.ts';\nimport type StorageModel from '../../../app/Storage/model/StorageModel.ts';\nimport IS_VISIBLE from '../types/enums.ts';\nimport { PAGES_IDS } from '../../../pages/types/enums.ts';\nimport STORE_KEYS from '../../../app/Storage/types/enums.ts';\n\nclass GameSettingsModel {\n  private storage: StorageModel;\n\n  private singletonMediator: MediatorModel<unknown>;\n\n  private gameSettingsView: GameSettingsView;\n\n  constructor(storage: StorageModel) {\n    this.storage = storage;\n    this.singletonMediator = MediatorModel.getInstance();\n    this.gameSettingsView = new GameSettingsView();\n    this.singletonMediator.subscribe(\n      AppEvents.logOut,\n      this.resetStates.bind(this),\n    );\n    this.init();\n    this.checkSentence();\n    this.checkListen();\n    this.checkBackgroundHint();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.gameSettingsView.getHTML();\n  }\n\n  public getView(): GameSettingsView {\n    return this.gameSettingsView;\n  }\n\n  private checkSentence(): void {\n    if (typeof this.storage.get(STORE_KEYS.TRANSLATE_VISIBLE) === 'undefined') {\n      this.storage.add(STORE_KEYS.TRANSLATE_VISIBLE, `${IS_VISIBLE.visible}`);\n    }\n  }\n\n  private checkListen(): void {\n    if (typeof this.storage.get(STORE_KEYS.LISTEN_VISIBLE) === 'undefined') {\n      this.storage.add(STORE_KEYS.LISTEN_VISIBLE, `${IS_VISIBLE.visible}`);\n    }\n  }\n\n  private checkBackgroundHint(): void {\n    if (typeof this.storage.get(STORE_KEYS.BACKGROUND_HINT) === 'undefined') {\n      this.storage.add(STORE_KEYS.BACKGROUND_HINT, `${IS_VISIBLE.visible}`);\n    }\n  }\n\n  private resetStates(): void {\n    this.storage.add(STORE_KEYS.TRANSLATE_VISIBLE, `${IS_VISIBLE.hidden}`);\n    this.storage.add(STORE_KEYS.LISTEN_VISIBLE, `${IS_VISIBLE.hidden}`);\n    this.storage.add(STORE_KEYS.BACKGROUND_HINT, `${IS_VISIBLE.hidden}`);\n  }\n\n  private toggleVisibilityState(\n    wrapper: HTMLElement,\n    img: HTMLElement,\n    event: string,\n  ): void {\n    const currentImg = img;\n    const isVisible = this.storage.get(event);\n\n    if (isVisible) {\n      currentImg.innerHTML = IMG_SRC.translateOff;\n      this.storage.add(event, `${IS_VISIBLE.hidden}`);\n    } else {\n      currentImg.innerHTML = IMG_SRC.translateOn;\n      this.storage.add(event, `${IS_VISIBLE.visible}`);\n    }\n\n    this.singletonMediator.notify(event, isVisible);\n    wrapper.classList.toggle(styles.active);\n  }\n\n  private translateSentenceHandler(): void {\n    const translateSentenceWrapper =\n      this.gameSettingsView.getTranslateSentenceWrapper();\n    const translateSentenceImg =\n      this.gameSettingsView.getTranslateSentenceImg();\n    this.toggleVisibilityState(\n      translateSentenceWrapper,\n      translateSentenceImg,\n      AppEvents.switchTranslateVisible,\n    );\n  }\n\n  private translateListenHandler(): void {\n    const translateListenWrapper =\n      this.gameSettingsView.getTranslateListenWrapper();\n    const translateListenImg = this.gameSettingsView.getTranslateListenImg();\n    this.toggleVisibilityState(\n      translateListenWrapper,\n      translateListenImg,\n      AppEvents.switchListenVisible,\n    );\n  }\n\n  private translateBackgroundHintHandler(): void {\n    const backgroundHintWrapper =\n      this.gameSettingsView.getBackgroundHintWrapper();\n    const backgroundHintImg = this.gameSettingsView.getBackgroundHintImg();\n    this.toggleVisibilityState(\n      backgroundHintWrapper,\n      backgroundHintImg,\n      AppEvents.switchBackgroundHintVisible,\n    );\n  }\n\n  private switchInitTranslateSentence(): void {\n    const translateSentenceImg =\n      this.gameSettingsView.getTranslateSentenceImg();\n    if (this.storage.get(STORE_KEYS.TRANSLATE_VISIBLE) === IS_VISIBLE.visible) {\n      translateSentenceImg.innerHTML = IMG_SRC.translateOn;\n    } else {\n      translateSentenceImg.innerHTML = IMG_SRC.translateOff;\n    }\n  }\n\n  private switchInitTranslateListen(): void {\n    const translateListenImg = this.gameSettingsView.getTranslateListenImg();\n    if (this.storage.get(STORE_KEYS.LISTEN_VISIBLE) === IS_VISIBLE.visible) {\n      translateListenImg.innerHTML = IMG_SRC.translateOn;\n    } else {\n      translateListenImg.innerHTML = IMG_SRC.translateOff;\n    }\n  }\n\n  private switchInitBackgroundHint(): void {\n    const backgroundHintImg = this.gameSettingsView.getBackgroundHintImg();\n    if (this.storage.get(STORE_KEYS.BACKGROUND_HINT) === IS_VISIBLE.visible) {\n      backgroundHintImg.innerHTML = IMG_SRC.translateOn;\n    } else {\n      backgroundHintImg.innerHTML = IMG_SRC.translateOff;\n    }\n  }\n\n  private init(): void {\n    const translateSentenceWrapper =\n      this.gameSettingsView.getTranslateSentenceWrapper();\n\n    this.switchInitTranslateSentence();\n    this.switchInitTranslateListen();\n    this.switchInitBackgroundHint();\n\n    const translateListenWrapper =\n      this.gameSettingsView.getTranslateListenWrapper();\n\n    translateSentenceWrapper.addEventListener(\n      EVENT_NAMES.click,\n      this.translateSentenceHandler.bind(this),\n    );\n\n    translateListenWrapper.addEventListener(\n      EVENT_NAMES.click,\n      this.translateListenHandler.bind(this),\n    );\n\n    const backgroundHintWrapper =\n      this.gameSettingsView.getBackgroundHintWrapper();\n    backgroundHintWrapper.addEventListener(\n      EVENT_NAMES.click,\n      this.translateBackgroundHintHandler.bind(this),\n    );\n\n    const choiceGameWrapper = this.gameSettingsView.getChoiceGameWrapper();\n    choiceGameWrapper.addEventListener(EVENT_NAMES.click, () => {\n      this.singletonMediator.notify(\n        AppEvents.changeHash,\n        PAGES_IDS.CHOICE_GAME,\n      );\n    });\n\n    const logOutWrapper = this.gameSettingsView.getLogOutWrapper();\n    logOutWrapper.addEventListener(EVENT_NAMES.click, () => {\n      this.storage.remove(STORE_KEYS.USER);\n      this.storage.remove(STORE_KEYS.COMPLETED_ROUND);\n      this.storage.remove(STORE_KEYS.LAST_ROUND);\n      this.singletonMediator.notify(AppEvents.logOut, '');\n      this.singletonMediator.notify(AppEvents.changeHash, PAGES_IDS.LOG_IN);\n    });\n  }\n}\n\nexport default GameSettingsModel;\n","import PlaygroundModel from '../../../widgets/playground/model/PlaygroundModel.ts';\nimport type PageInterface from '../../types/interfaces.ts';\nimport MainPageView from '../ui/MainPageView.ts';\nimport GameSettingsModel from '../../../features/gameSettings/model/GameSettingsModel.ts';\nimport type StorageModel from '../../../app/Storage/model/StorageModel.ts';\n\nclass MainPageModel implements PageInterface {\n  private id: string;\n\n  private storage: StorageModel;\n\n  private pageView: MainPageView;\n\n  private page: HTMLDivElement;\n\n  private playgroundModel: PlaygroundModel;\n\n  private gameSettingsModel: GameSettingsModel;\n\n  constructor(id: string, parent: HTMLDivElement, storage: StorageModel) {\n    this.id = id;\n    this.storage = storage;\n    this.playgroundModel = new PlaygroundModel(this.storage);\n    this.gameSettingsModel = new GameSettingsModel(this.storage);\n    this.pageView = new MainPageView(\n      id,\n      parent,\n      this.playgroundModel.getView(),\n      this.gameSettingsModel.getView(),\n    );\n    this.page = this.pageView.getHTML();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.page;\n  }\n\n  public getID(): string {\n    return this.id;\n  }\n}\n\nexport default MainPageModel;\n","import { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport styles from './style.module.scss';\n\nclass AppView {\n  private pagesContainer: HTMLDivElement;\n\n  constructor() {\n    this.pagesContainer = this.createHTML();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.pagesContainer;\n  }\n\n  private createHTML(): HTMLDivElement {\n    this.pagesContainer = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.pagesContainer],\n    });\n    return this.pagesContainer;\n  }\n}\n\nexport default AppView;\n","export const BTN_OPTIONS = {\n  offset: 15,\n  direction: 1,\n  displacement: 0,\n  maxDisplacementElements: 5,\n};\n\nexport const DESCRIPTIONS = [\n  `Level 1: \"Welcome to the world of 'Word Builder'! In this level you will have to make your first sentence from the words 'Hello', 'World', 'Funny', 'Adventure'. Let's see what you come up with!\"`,\n  `Level 2: \"In this level you will collect sentences to help the hero overcome the 'Mountain of Vowels' and the 'Forest of Consonants'. Be careful, the 'Evil Punctuation Mark' may be waiting for you around every corner!\"`,\n  `Level 3: \"Welcome to the 'English Circus'! Here you'll have to put together a sentence to make English words do incredible tricks. Are you ready for a circus show of language?\"`,\n  `Level 4: \"In this level, you'll collect sentences to help characters from classic books say their famous phrases. Get ready to meet 'Shakespeare,' 'Dickens,' and 'Jane Austen'!\"`,\n  `Level 5: \"Welcome to 'Flying Alphabet'! You will have to collect sentences to launch a rocket of words in English. Fly on the wings of words!\"`,\n  `Level 6: \"In this level, you will collect sentences to unravel the secret code of the English language and open the door to a world of fluent English communication. Get ready for 'Solving Speech Puzzles'!\"`,\n];\n\nexport const COMPLEXITY_COLORS = [\n  'beginner',\n  'novice',\n  'intermediate',\n  'advanced',\n  'master',\n  'expert',\n];\n","import createBaseElement from '../../../utils/createBaseElement.ts';\nimport styles from './style.module.scss';\nimport { PAGES_STATE } from '../../types/enums.ts';\nimport { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport type { levelInfo } from '../types/interfaces.ts';\nimport ButtonModel from '../../../shared/button/model/ButtonModel.ts';\nimport { BTN_OPTIONS, DESCRIPTIONS } from '../types/enums.ts';\n\nclass ChoiceGamePageView {\n  private id: string;\n\n  private parent: HTMLDivElement;\n\n  private gameData: levelInfo[];\n\n  private pageWrapper: HTMLDivElement | null = null;\n\n  private aside: HTMLDivElement;\n\n  private roundBtns: ButtonModel[];\n\n  private descriptionsHTML: HTMLDivElement[] = [];\n\n  private backToRoundBtn: ButtonModel;\n\n  private logOutBtn: ButtonModel;\n\n  private BTNS_OPTIONS: typeof BTN_OPTIONS;\n\n  constructor(id: string, parent: HTMLDivElement, gameData: levelInfo[]) {\n    this.id = id;\n    this.parent = parent;\n    this.gameData = gameData;\n    this.roundBtns = [];\n    this.backToRoundBtn = this.createBackToRoundBtn();\n    this.logOutBtn = this.createLogOutBtn();\n    this.aside = this.createAside();\n    this.pageWrapper = null;\n    this.BTNS_OPTIONS = BTN_OPTIONS;\n  }\n\n  public getRoundBtns(): ButtonModel[] {\n    return this.roundBtns;\n  }\n\n  public getID(): string {\n    return this.id;\n  }\n\n  public getLogOutBtn(): ButtonModel {\n    return this.logOutBtn;\n  }\n\n  public getBackToRoundBtn(): ButtonModel {\n    return this.backToRoundBtn;\n  }\n\n  private updateDisplacement(): void {\n    this.BTNS_OPTIONS.displacement +=\n      this.BTNS_OPTIONS.offset * this.BTNS_OPTIONS.direction;\n  }\n\n  private addStylesForBtn(\n    currentID: number,\n    btn: ButtonModel,\n    LVLRoundsLength: number,\n  ): void {\n    if (currentID !== LVLRoundsLength) {\n      this.updateDisplacement();\n    }\n\n    if (currentID % this.BTNS_OPTIONS.maxDisplacementElements === 0) {\n      this.BTNS_OPTIONS.direction *= -1;\n    }\n\n    const btnHTML = btn.getHTML();\n    const transform = `translateX(${this.BTNS_OPTIONS.displacement}px)`;\n    btnHTML.style.transform = transform;\n  }\n\n  private createLVLsHTML(): HTMLDivElement {\n    const LVLsWrapper = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.page__lvl_wrapper],\n    });\n\n    this.gameData.forEach((LVL, index) => {\n      const currentLVL = (index + 1).toString();\n      const currentLvlWrapper = createBaseElement({\n        tag: TAG_NAMES.div,\n        cssClasses: [styles.page__lvl],\n        attributes: {\n          id: `${index}`,\n        },\n      });\n\n      const descriptionWrapper = createBaseElement({\n        tag: TAG_NAMES.div,\n        cssClasses: [styles.page__lvl_description],\n      });\n\n      this.descriptionsHTML.push(descriptionWrapper);\n      currentLvlWrapper.append(descriptionWrapper);\n      const LVLRounds = LVL.rounds;\n\n      LVLRounds.forEach((_, id) => {\n        const currentID = id + 1;\n        const btnTextContent = `${id + 1}`;\n        const btn = this.createRoundBtn(btnTextContent);\n        btn.getHTML().setAttribute('currentLVL', currentLVL);\n        btn.getHTML().setAttribute('currentRound', id.toString());\n        this.addStylesForBtn(currentID, btn, LVLRounds.length);\n        currentLvlWrapper.append(btn.getHTML());\n      });\n\n      LVLsWrapper.append(currentLvlWrapper);\n    });\n\n    return LVLsWrapper;\n  }\n\n  private createRoundBtn(id: string): ButtonModel {\n    const btn = new ButtonModel(id, [styles.page__btn, 'btn-reset']);\n    this.roundBtns.push(btn);\n    return btn;\n  }\n\n  private fillDescriptions(): void {\n    this.descriptionsHTML.forEach((description, index) => {\n      const currentDescr = description;\n      currentDescr.innerHTML = DESCRIPTIONS[index];\n    });\n  }\n\n  private createAside(): HTMLDivElement {\n    this.aside = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.page_aside],\n    });\n    return this.aside;\n  }\n\n  private createBackToRoundBtn(): ButtonModel {\n    const textContent = 'Back to round';\n    this.backToRoundBtn = new ButtonModel(textContent, [\n      styles.aside__btn,\n      'btn-reset',\n    ]);\n    return this.backToRoundBtn;\n  }\n\n  private createLogOutBtn(): ButtonModel {\n    const textContent = 'Log Out';\n    this.logOutBtn = new ButtonModel(textContent, [\n      styles.aside__btn,\n      'btn-reset',\n    ]);\n    return this.logOutBtn;\n  }\n\n  public initHTML(gameData: levelInfo[]): void {\n    this.gameData = gameData;\n\n    const LVLsWrapper = this.createLVLsHTML();\n    this.fillDescriptions();\n    this.pageWrapper?.append(LVLsWrapper);\n  }\n\n  public createHTML(id: string): HTMLDivElement {\n    const page = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.page],\n      attributes: { id },\n    });\n\n    this.pageWrapper = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.choice_game_wrapper],\n    });\n\n    this.aside.append(this.backToRoundBtn.getHTML(), this.logOutBtn.getHTML());\n\n    page.style.display = PAGES_STATE.HIDDEN;\n    page.append(this.pageWrapper, this.aside);\n    this.parent.append(page);\n    return page;\n  }\n}\n\nexport default ChoiceGamePageView;\n","import type { levelInfo } from '../pages/choiceGamePage/types/interfaces';\n\nconst getData = async (url: string): Promise<levelInfo | null> => {\n  const data: levelInfo | null = await fetch(url)\n    .then((response) => response.json())\n    .then((json: levelInfo) => json)\n    .catch(() => null);\n  return data;\n};\n\nexport default getData;\n","import API_URLS from '../types/constants.ts';\nimport type { levelInfo } from '../types/interfaces.ts';\nimport getData from '../../../utils/getData.ts';\n\nconst MAX_LEVEL = 6;\n\nclass ChoiceGameApi {\n  private levelInfo: levelInfo | null;\n\n  private levelInfoReceived: boolean;\n\n  constructor() {\n    this.levelInfo = null;\n    this.levelInfoReceived = false;\n  }\n\n  public isLevelInfoReceived(): boolean {\n    return this.levelInfoReceived;\n  }\n\n  public async getGameData(): Promise<levelInfo[]> {\n    const promises = [];\n    for (let index = 1; index <= MAX_LEVEL; index += 1) {\n      promises.push(this.receiveLevelInfo(index));\n    }\n    const results: levelInfo[] = await Promise.all(promises);\n    return results;\n  }\n\n  private async receiveLevelInfo(currentLvl: number): Promise<levelInfo> {\n    const url = `${API_URLS.levelData}${currentLvl}.json`;\n\n    await getData(url)\n      .then((data) => {\n        this.levelInfo = data;\n        this.levelInfoReceived = true;\n      })\n      .catch(() => {\n        this.levelInfoReceived = false;\n      });\n    if (!this.levelInfo) {\n      throw new Error('No level info');\n    }\n    return this.levelInfo;\n  }\n}\n\nexport default ChoiceGameApi;\n","const getComplexityColor = (lvl: number): string => {\n  const complexityColors = [\n    'beginner',\n    'novice',\n    'intermediate',\n    'advanced',\n    'master',\n    'expert',\n  ];\n  return complexityColors[lvl - 1];\n};\n\nexport default getComplexityColor;\n","import type PageInterface from '../../types/interfaces.ts';\nimport type StorageModel from '../../../app/Storage/model/StorageModel.ts';\nimport ChoiceGamePageView from '../ui/ChoiceGamePageView.ts';\nimport ChoiceGameApi from '../api/ChoiceGameApi.ts';\nimport type { CompletedRound, levelInfo } from '../types/interfaces.ts';\nimport { EVENT_NAMES } from '../../../shared/types/enums.ts';\nimport MediatorModel from '../../core/mediator/model/MediatorModel.ts';\nimport AppEvents from '../../core/mediator/types/enums.ts';\nimport { PAGES_IDS } from '../../types/enums.ts';\nimport styles from '../ui/style.module.scss';\nimport getComplexityColor from '../../../utils/getComplexityColor.ts';\nimport type { LastRoundInfo } from '../../../widgets/playground/types/interfaces.ts';\nimport STORE_KEYS from '../../../app/Storage/types/enums.ts';\nimport { COMPLEXITY_COLORS } from '../types/enums.ts';\n\nclass ChoiceGamePageModel implements PageInterface {\n  private id: string;\n\n  private parent: HTMLDivElement;\n\n  private api: ChoiceGameApi;\n\n  private storage: StorageModel;\n\n  private singletonMediator: MediatorModel<unknown>;\n\n  private pageView: ChoiceGamePageView;\n\n  private page: HTMLDivElement;\n\n  private gameData: levelInfo[] = [];\n\n  constructor(id: string, parent: HTMLDivElement, storage: StorageModel) {\n    this.id = id;\n    this.parent = parent;\n    this.api = new ChoiceGameApi();\n    this.storage = storage;\n    this.singletonMediator = MediatorModel.getInstance();\n    this.singletonMediator.subscribe(\n      AppEvents.newCompletedRound,\n      this.switchCompletedRound.bind(this),\n    );\n    this.singletonMediator.subscribe(\n      AppEvents.logOut,\n      this.setGameData.bind(this),\n    );\n\n    this.singletonMediator.subscribe(\n      AppEvents.logOut,\n      this.switchCompletedRound.bind(this),\n    );\n\n    this.pageView = new ChoiceGamePageView(this.id, this.parent, this.gameData);\n    this.page = this.init();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.page;\n  }\n\n  public getID(): string {\n    return this.id;\n  }\n\n  private async getGameData(): Promise<levelInfo[]> {\n    this.gameData = [];\n    const gameData = await this.api.getGameData();\n    return gameData;\n  }\n\n  private switchParentClassByButtonClass(): void {\n    const btns = this.pageView.getRoundBtns();\n    const btnsHTML: HTMLButtonElement[] = [];\n    btns.forEach((item) => {\n      btnsHTML.push(item.getHTML());\n    });\n\n    const groupedByParent = new Map<HTMLElement, HTMLElement[]>();\n\n    btnsHTML.forEach((btn) => {\n      const parent = btn.parentElement;\n      if (parent) {\n        if (groupedByParent.has(parent)) {\n          groupedByParent.get(parent)?.push(btn);\n        } else {\n          groupedByParent.set(parent, [btn]);\n        }\n      }\n    });\n\n    groupedByParent.forEach((buttons, parent) => {\n      const lvl = Number(parent.getAttribute('id'));\n      const hasAnyClass = (classes: string[]): boolean =>\n        buttons.every((btn) =>\n          btn.classList.contains(styles[classes[Number(lvl)]]),\n        );\n\n      const allButtonsHaveClass = hasAnyClass(COMPLEXITY_COLORS);\n      if (allButtonsHaveClass) {\n        parent.classList.add(styles[COMPLEXITY_COLORS[Number(lvl)]]);\n      } else {\n        parent.classList.remove(styles[COMPLEXITY_COLORS[Number(lvl)]]);\n      }\n    });\n  }\n\n  private switchCompletedRound(): void {\n    const completedRounds = this.storage.get<CompletedRound[]>(\n      STORE_KEYS.COMPLETED_ROUND,\n    );\n    const btns = this.pageView.getRoundBtns();\n\n    btns.forEach((btn) => {\n      const lvl = btn.getHTML().getAttribute('currentLVL');\n      const round = btn.getHTML().getAttribute('currentRound');\n      const complexity = getComplexityColor(Number(lvl));\n      if (\n        completedRounds?.some(\n          (obj) => obj.lvl.toString() === lvl && obj.round.toString() === round,\n        )\n      ) {\n        btn.getHTML().classList.add(styles[complexity]);\n      } else {\n        btn.getHTML().classList.remove(styles[complexity]);\n      }\n    });\n    this.switchParentClassByButtonClass();\n  }\n\n  private setHandlersForBtns(): void {\n    const btns = this.pageView.getRoundBtns();\n\n    btns.forEach((btn) => {\n      btn.getHTML().addEventListener(EVENT_NAMES.click, () => {\n        const currentLVL = Number(btn.getHTML().getAttribute('currentLVL'));\n        const currentRound = Number(btn.getHTML().getAttribute('currentRound'));\n        const currentDataLVL = {\n          gameData: this.gameData,\n          currentRound,\n          currentLVL,\n        };\n        this.singletonMediator.notify(AppEvents.newGame, currentDataLVL);\n        this.singletonMediator.notify(AppEvents.changeHash, PAGES_IDS.MAIN);\n      });\n    });\n\n    const backToRoundBtn = this.pageView.getBackToRoundBtn();\n    backToRoundBtn.getHTML().addEventListener(EVENT_NAMES.click, () => {\n      this.singletonMediator.notify(AppEvents.changeHash, PAGES_IDS.MAIN);\n    });\n\n    const logOutBtn = this.pageView.getLogOutBtn();\n    logOutBtn.getHTML().addEventListener(EVENT_NAMES.click, () => {\n      this.storage.remove(STORE_KEYS.USER);\n      this.storage.remove(STORE_KEYS.COMPLETED_ROUND);\n      this.storage.remove(STORE_KEYS.LAST_ROUND);\n      this.singletonMediator.notify(AppEvents.changeHash, PAGES_IDS.LOG_IN);\n      this.singletonMediator.notify(AppEvents.logOut, '');\n    });\n  }\n\n  private setGameData(): void {\n    const lastRoundData: LastRoundInfo | undefined = this.storage.get(\n      STORE_KEYS.LAST_ROUND,\n    );\n    if (lastRoundData) {\n      const currentDataLVL = {\n        gameData: this.gameData,\n        currentRound: lastRoundData.currentRound,\n        currentLVL: lastRoundData.currentLVL,\n      };\n      this.singletonMediator.notify(AppEvents.newGame, currentDataLVL);\n    } else {\n      const data = {\n        gameData: this.gameData,\n        currentRound: 0,\n        currentLVL: 1,\n      };\n      this.singletonMediator.notify(AppEvents.newGame, data);\n    }\n  }\n\n  private init(): HTMLDivElement {\n    this.getGameData()\n      .then((data) => {\n        this.gameData = data;\n      })\n      .then(() => {\n        this.pageView.initHTML(this.gameData);\n        this.setHandlersForBtns();\n        this.switchCompletedRound();\n        this.switchParentClassByButtonClass();\n        this.setGameData();\n      })\n      .catch(() => {});\n\n    this.page = this.pageView.createHTML(this.id);\n    return this.page;\n  }\n}\n\nexport default ChoiceGamePageModel;\n","import IMG_SRC from '../widgets/playground/ui/imgSrc/imgSrc.ts';\nimport { EVENT_NAMES } from '../shared/types/enums.ts';\n\nconst setListenersLineBtn = (\n  btn: HTMLButtonElement,\n  audio: HTMLAudioElement,\n): void => {\n  const currentBtn = btn;\n  let btnSvg = currentBtn.firstChild;\n\n  if (btnSvg && !(btnSvg instanceof SVGElement)) {\n    btnSvg = btnSvg.nextSibling;\n  }\n  currentBtn.addEventListener(EVENT_NAMES.click, () => {\n    if (btnSvg && btnSvg instanceof SVGElement) {\n      btnSvg.innerHTML = IMG_SRC.volumeOn;\n    }\n    audio.play().catch(() => {});\n  });\n  audio.addEventListener(EVENT_NAMES.ended, () => {\n    if (btnSvg && btnSvg instanceof SVGElement) {\n      btnSvg.innerHTML = IMG_SRC.volumeOff;\n    }\n  });\n};\n\nexport default setListenersLineBtn;\n","import { PAGES_STATE } from '../../types/enums.ts';\nimport { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport styles from './style.module.scss';\nimport ButtonModel from '../../../shared/button/model/ButtonModel.ts';\nimport { BUTTONS_TEXT_CONTENT } from '../../../widgets/playground/types/constants.ts';\nimport BUTTON_STATE from '../../../shared/button/types/enums.ts';\nimport type { lineInfo } from '../../../widgets/playground/types/interfaces.ts';\nimport setListenersLineBtn from '../../../utils/addListenersAudioBnt.ts';\nimport IMG_SRC from '../../../widgets/playground/ui/imgSrc/imgSrc.ts';\n\nclass StatisticsPageView {\n  private id: string;\n\n  private parent: HTMLDivElement;\n\n  private page: HTMLDivElement;\n\n  private nextRoundBtn: ButtonModel;\n\n  private roundInfoWrapper: HTMLDivElement;\n\n  private knowList: HTMLUListElement;\n\n  private dontKnowList: HTMLUListElement;\n\n  private liArr: HTMLLIElement[] = [];\n\n  private roundPictureImg: HTMLImageElement;\n\n  private roundPictureAuthor: HTMLSpanElement;\n\n  private roundPictureInfo: HTMLSpanElement;\n\n  private roundPictureWrapper: HTMLDivElement;\n\n  constructor(id: string, parent: HTMLDivElement) {\n    this.id = id;\n    this.parent = parent;\n    this.nextRoundBtn = this.createNextRoundBtn();\n    this.knowList = this.createKnowList();\n    this.dontKnowList = this.createDontKnowList();\n    this.roundPictureInfo = this.createRoundPictureInfo();\n    this.roundPictureAuthor = this.createRoundPictureAuthor();\n    this.roundPictureImg = this.createRoundPictureElement();\n    this.roundPictureWrapper = this.createRoundPictureWrapper();\n    this.roundInfoWrapper = this.createRoundInfoWrapper();\n    this.page = this.createHTML(this.id);\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.page;\n  }\n\n  public getID(): string {\n    return this.id;\n  }\n\n  public getNextRoundBtn(): ButtonModel {\n    return this.nextRoundBtn;\n  }\n\n  public getKnowList(): HTMLUListElement {\n    return this.knowList;\n  }\n\n  public clearKnowList(): void {\n    this.knowList.innerHTML = '';\n  }\n\n  public getRoundPictureImg(): HTMLImageElement {\n    return this.roundPictureImg;\n  }\n\n  public getRoundPictureAuthor(): HTMLSpanElement {\n    return this.roundPictureAuthor;\n  }\n\n  public getRoundPictureInfo(): HTMLSpanElement {\n    return this.roundPictureInfo;\n  }\n\n  public getDontKnowList(): HTMLUListElement {\n    return this.dontKnowList;\n  }\n\n  public clearDontKnowList(): void {\n    this.dontKnowList.innerHTML = '';\n  }\n\n  public createListItem(\n    value: lineInfo,\n    listItemStyle: string,\n    textItemStyle: string,\n  ): HTMLLIElement {\n    const li = createBaseElement({\n      tag: TAG_NAMES.li,\n      cssClasses: [listItemStyle],\n    });\n    const btn = new ButtonModel('', [`${listItemStyle}_btn`]);\n    const audio = new Audio(value.audioCurrentLineSrc);\n    const text = createBaseElement({\n      tag: TAG_NAMES.span,\n      cssClasses: [textItemStyle],\n      innerContent: `${value.sentenceCurrentLine}`,\n    });\n    const btnHTML = btn.getHTML();\n    btnHTML.innerHTML = IMG_SRC.volumeOff;\n    setListenersLineBtn(btnHTML, audio);\n    btnHTML.append(audio);\n    li.append(btnHTML, text);\n    this.liArr.push(li);\n    return li;\n  }\n\n  private createRoundPictureWrapper(): HTMLDivElement {\n    this.roundPictureWrapper = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.round_picture_wrapper],\n    });\n\n    const imgWrapper = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.round_picture_wrapper],\n    });\n    imgWrapper.append(this.roundPictureImg);\n    this.roundPictureWrapper.append(\n      imgWrapper,\n      this.roundPictureAuthor,\n      this.roundPictureInfo,\n    );\n    return this.roundPictureWrapper;\n  }\n\n  private createRoundPictureElement(): HTMLImageElement {\n    this.roundPictureImg = createBaseElement({\n      tag: TAG_NAMES.img,\n      cssClasses: [styles.round_picture],\n    });\n\n    return this.roundPictureImg;\n  }\n\n  private createRoundPictureAuthor(): HTMLSpanElement {\n    this.roundPictureAuthor = createBaseElement({\n      tag: TAG_NAMES.span,\n      cssClasses: [styles.round_picture_author],\n    });\n\n    return this.roundPictureAuthor;\n  }\n\n  private createRoundPictureInfo(): HTMLSpanElement {\n    this.roundPictureInfo = createBaseElement({\n      tag: TAG_NAMES.span,\n      cssClasses: [styles.round_picture_info],\n    });\n\n    return this.roundPictureInfo;\n  }\n\n  private createRoundInfoWrapper(): HTMLDivElement {\n    this.roundInfoWrapper = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.round_info_wrapper],\n    });\n\n    return this.roundInfoWrapper;\n  }\n\n  private createNextRoundBtn(): ButtonModel {\n    this.nextRoundBtn = new ButtonModel(\n      BUTTONS_TEXT_CONTENT.continueBtn,\n      [styles.nextRound_btn],\n      { disabled: `${BUTTON_STATE.DISABLED}` },\n    );\n\n    return this.nextRoundBtn;\n  }\n\n  private createKnowList(): HTMLUListElement {\n    this.knowList = createBaseElement({\n      tag: TAG_NAMES.ul,\n      cssClasses: [styles.know_list],\n    });\n    return this.knowList;\n  }\n\n  private createDontKnowList(): HTMLUListElement {\n    this.dontKnowList = createBaseElement({\n      tag: TAG_NAMES.ul,\n      cssClasses: [styles.dont_know_list],\n    });\n    return this.dontKnowList;\n  }\n\n  private createHTML(id: string): HTMLDivElement {\n    this.page = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.page],\n      attributes: { id },\n    });\n\n    const wrapper = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.statistics_wrapper],\n    });\n\n    this.roundInfoWrapper.append(\n      this.roundPictureWrapper,\n      this.knowList,\n      this.dontKnowList,\n      this.nextRoundBtn.getHTML(),\n    );\n    wrapper.append(this.roundInfoWrapper);\n    this.page.append(wrapper);\n\n    this.page.style.display = PAGES_STATE.HIDDEN;\n    this.parent.append(this.page);\n    return this.page;\n  }\n}\n\nexport default StatisticsPageView;\n","import type {\n  PictureInfo,\n  lineInfo,\n} from '@/widgets/playground/types/interfaces';\nimport type MapOfLineInfo from '../widgets/playground/types/types';\n\nexport const isPictureInfo = (obj: unknown): obj is PictureInfo =>\n  typeof obj === 'object' &&\n  obj !== null &&\n  'src' in obj &&\n  'title' in obj &&\n  'info' in obj;\n\nexport const isMapOfLineInfoArr = (\n  arr: unknown,\n): arr is [Map<number, lineInfo>, Map<number, lineInfo>, PictureInfo] =>\n  Array.isArray(arr) &&\n  arr.length === 3 &&\n  arr[0] instanceof Map &&\n  arr[1] instanceof Map &&\n  isPictureInfo(arr[2]);\n\nexport const isMapOfLineInfo = (obj: unknown): obj is MapOfLineInfo =>\n  obj instanceof Map;\n","import { TAG_NAMES } from '../shared/types/enums.ts';\nimport createBaseElement from './createBaseElement.ts';\n\nconst createListTitle = (title: string): HTMLSpanElement => {\n  const span = createBaseElement({\n    tag: TAG_NAMES.span,\n    innerContent: title,\n  });\n  return span;\n};\n\nexport default createListTitle;\n","const LIST_TITLES = {\n  KNOW_LIST: 'I know',\n  DONT_KNOW_LIST: \"I don't know\",\n} as const;\n\nexport default LIST_TITLES;\n","import MediatorModel from '../../core/mediator/model/MediatorModel.ts';\nimport { EVENT_NAMES } from '../../../shared/types/enums.ts';\nimport StatisticsPageView from '../ui/StatisticsPageView.ts';\nimport AppEvents from '../../core/mediator/types/enums.ts';\nimport { PAGES_IDS } from '../../types/enums.ts';\nimport {\n  isMapOfLineInfoArr,\n  isMapOfLineInfo,\n  isPictureInfo,\n} from '../../../utils/isMapOfLineInfoArr.ts';\nimport type MapOfLineInfo from '../../../widgets/playground/types/types.ts';\nimport styles from '../ui/style.module.scss';\nimport createListTitle from '../../../utils/createListTitle.ts';\nimport LIST_TITLES from '../types/enums.ts';\nimport type { PictureInfo } from '../../../widgets/playground/types/interfaces.ts';\n\nclass StatisticsPageModel {\n  private id: string;\n\n  private page: HTMLDivElement;\n\n  private pageView: StatisticsPageView;\n\n  private singletonMediator: MediatorModel<unknown>;\n\n  private KNOW_LIST_INDEX = 0;\n\n  private DONT_KNOW_LIST_INDEX = 1;\n\n  private ROUND_INFO_INDEX = 2;\n\n  constructor(id: string, parent: HTMLDivElement) {\n    this.id = id;\n    this.pageView = new StatisticsPageView(id, parent);\n    this.singletonMediator = MediatorModel.getInstance();\n    this.page = this.pageView.getHTML();\n    this.init();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.page;\n  }\n\n  public getID(): string {\n    return this.id;\n  }\n\n  private switchDisableNextRoundBtn(): void {\n    const nextRoundBtn = this.pageView.getNextRoundBtn();\n    nextRoundBtn.switchDisabled();\n  }\n\n  private fillKnowList(params: MapOfLineInfo): void {\n    const knowList = this.pageView.getKnowList();\n    const title = createListTitle(LIST_TITLES.KNOW_LIST);\n    knowList.append(title);\n    params.forEach((value) => {\n      const li = this.pageView.createListItem(\n        value,\n        styles.know_list_item,\n        styles.know_list_item__text,\n      );\n      knowList.append(li);\n    });\n  }\n\n  private fillDontKnowList(params: MapOfLineInfo): void {\n    const dontKnow = this.pageView.getDontKnowList();\n    const title = createListTitle(LIST_TITLES.DONT_KNOW_LIST);\n    dontKnow.append(title);\n    params.forEach((value) => {\n      const li = this.pageView.createListItem(\n        value,\n        styles.dont_know_list_item,\n        styles.dont_know_list_item__text,\n      );\n      dontKnow.append(li);\n    });\n  }\n\n  private fillPictureInfo(params: PictureInfo): void {\n    const pictureImg = this.pageView.getRoundPictureImg();\n    const pictureAuthor = this.pageView.getRoundPictureAuthor();\n    const pictureInfo = this.pageView.getRoundPictureInfo();\n    pictureAuthor.textContent = params.title;\n    pictureInfo.textContent = params.info;\n    pictureImg.src = params.src;\n    pictureImg.alt = params.info;\n  }\n\n  private drawRoundInfo(params: unknown): void {\n    if (isMapOfLineInfoArr(params)) {\n      this.pageView.clearKnowList();\n      this.pageView.clearDontKnowList();\n\n      const knowListData = params[this.KNOW_LIST_INDEX];\n      const dontKnowListData = params[this.DONT_KNOW_LIST_INDEX];\n      const pictureInfo = params[this.ROUND_INFO_INDEX];\n\n      if (isPictureInfo(pictureInfo)) {\n        this.fillPictureInfo(pictureInfo);\n      }\n\n      if (isMapOfLineInfo(knowListData) && isMapOfLineInfo(dontKnowListData)) {\n        this.fillKnowList(knowListData);\n        this.fillDontKnowList(dontKnowListData);\n      }\n    }\n  }\n\n  private init(): void {\n    const nextRoundBtn = this.pageView.getNextRoundBtn();\n    nextRoundBtn.getHTML().addEventListener(EVENT_NAMES.click, () => {\n      this.singletonMediator.notify(AppEvents.nextRound, '');\n      this.singletonMediator.notify(AppEvents.changeHash, PAGES_IDS.MAIN);\n      nextRoundBtn.setDisabled();\n    });\n\n    this.singletonMediator.subscribe(\n      AppEvents.switchDisableNextRoundBtn,\n      this.switchDisableNextRoundBtn.bind(this),\n    );\n\n    this.singletonMediator.subscribe(\n      AppEvents.endRound,\n      this.drawRoundInfo.bind(this),\n    );\n  }\n}\n\nexport default StatisticsPageModel;\n","import LogInPageModel from '../../../pages/logInPage/model/LoginPageModel.ts';\nimport StorageModel from '../../Storage/model/StorageModel.ts';\nimport StartPageModel from '../../../pages/startPage/model/StartPageModel.ts';\nimport RouterModel from '../../Router/model/RouterModel.ts';\nimport { PAGES_IDS } from '../../../pages/types/enums.ts';\nimport MainPageModel from '../../../pages/mainPage/model/MainPageModel.ts';\nimport AppView from '../ui/AppView.ts';\nimport ChoiceGamePageModel from '../../../pages/choiceGamePage/model/ChoiceGamePageModel.ts';\nimport StatisticsPageModel from '../../../pages/statisticsPage/model/StatisticsPageModel.ts';\n\nclass AppModel {\n  private appView: AppView;\n\n  private app: HTMLDivElement;\n\n  private storage: StorageModel;\n\n  private pages: {\n    logIn: LogInPageModel;\n    start: StartPageModel;\n    choiceGame: ChoiceGamePageModel;\n    main: MainPageModel;\n    statistics: StatisticsPageModel;\n  };\n\n  private router: RouterModel;\n\n  constructor() {\n    this.appView = new AppView();\n    this.app = this.appView.getHTML();\n    this.storage = new StorageModel();\n\n    this.pages = {\n      logIn: new LogInPageModel(\n        PAGES_IDS.LOG_IN,\n        this.appView.getHTML(),\n        this.storage,\n      ),\n      start: new StartPageModel(\n        PAGES_IDS.START,\n        this.appView.getHTML(),\n        this.storage,\n      ),\n      choiceGame: new ChoiceGamePageModel(\n        PAGES_IDS.CHOICE_GAME,\n        this.appView.getHTML(),\n        this.storage,\n      ),\n      main: new MainPageModel(\n        PAGES_IDS.MAIN,\n        this.appView.getHTML(),\n        this.storage,\n      ),\n      statistics: new StatisticsPageModel(\n        PAGES_IDS.STATISTICS,\n        this.appView.getHTML(),\n      ),\n    };\n\n    this.router = new RouterModel(this.pages);\n    this.router.init();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.app;\n  }\n}\n\nexport default AppModel;\n","import './index.scss';\nimport AppModel from './app/App/model/AppModel.ts';\n\nconst myApp = new AppModel();\ndocument.body.append(myApp.getHTML());\n"],"names":["ERRORS_NAME","styles","form","FIELD_NAMES","page","index","STORE_KEYS","BUTTONS_TEXT_CONTENT","IS_VISIBLE","IMG_SRC","playground","puzzle","playgroundStyles","line"],"mappings":"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"}