{"version":3,"file":"main-7a4252af.js","sources":["../../src/utils/createBaseElement.ts","../../src/shared/input/Input.ts","../../src/entities/inputField/InputField.ts","../../src/shared/button/Button.ts","../../src/entities/submitBtn/SubmitBtn.ts","../../src/features/formValidation/types/enum.ts","../../src/features/formValidation/const.ts","../../src/features/formValidation/FormValidation.ts","../../src/widgets/loginForm/types/enum.ts","../../src/pages/types/enums.ts","../../src/widgets/loginForm/LoginForm.ts","../../src/pages/core/mediator/mediator.ts","../../src/app/Storage/types/enums.ts","../../src/pages/core/mediator/types/enums.ts","../../src/pages/logInPage/index.ts","../../src/app/Storage/Storage.ts","../../src/pages/startPage/index.ts","../../src/app/Router/Router.ts","../../src/pages/mainPage/index.ts","../../src/app/App/app.ts","../../index.ts"],"sourcesContent":["interface CreateBaseElement<T> {\n  tag: T;\n  cssClasses?: string[];\n  attributes?: Record<string, string>;\n  innerContent?: string;\n}\n\nconst createBaseElement = <T extends keyof HTMLElementTagNameMap>({\n  tag,\n  cssClasses = [],\n  attributes = {},\n  innerContent = '',\n}: CreateBaseElement<T>): HTMLElementTagNameMap[T] => {\n  const elem = document.createElement(tag);\n\n  elem.classList.add(...cssClasses);\n\n  Object.entries(attributes).forEach(([attrName, attrValue]) => {\n    elem.setAttribute(attrName, attrValue);\n  });\n\n  elem.innerHTML = innerContent;\n\n  return elem;\n};\n\nexport default createBaseElement;\n","import createBaseElement from '../../utils/createBaseElement.ts';\nimport { type InputComponentInterface } from './types/interfaces.ts';\n\nclass InputComponent implements InputComponentInterface {\n  public input: HTMLInputElement;\n\n  constructor(attrs: Record<string, string>) {\n    this.input = this.createHTML(attrs);\n  }\n\n  public getHTML(): HTMLInputElement {\n    return this.input;\n  }\n\n  private createHTML(attrs: Record<string, string>): HTMLInputElement {\n    this.input = createBaseElement({\n      tag: 'input',\n      attributes: attrs,\n    });\n\n    return this.input;\n  }\n}\n\nexport default InputComponent;\n","import { type InputFieldComponentInterface } from './types/interfaces.ts';\nimport InputComponent from '../../shared/input/Input.ts';\n\nclass InputFieldComponent\n  extends InputComponent\n  implements InputFieldComponentInterface\n{\n  public form: HTMLFormElement;\n\n  public isValid: boolean;\n\n  constructor(attrs: Record<string, string>, form: HTMLFormElement) {\n    super(attrs);\n    this.form = form;\n    this.isValid = true;\n  }\n}\n\nexport default InputFieldComponent;\n","import createBaseElement from '../../utils/createBaseElement.ts';\nimport type ButtonAction from './types/types.ts';\n\nclass ButtonComponent {\n  public button: HTMLButtonElement;\n\n  constructor(\n    text?: string,\n    classes?: string[],\n    attrs?: Record<string, string>,\n    action?: ButtonAction,\n  ) {\n    this.button = this.createHTML(action, classes, attrs, text);\n  }\n\n  public getHTML(): HTMLButtonElement {\n    return this.button;\n  }\n\n  private createHTML(\n    action?: ButtonAction,\n    classes?: string[],\n    attrs?: Record<string, string>,\n    text?: string,\n  ): HTMLButtonElement {\n    this.button = createBaseElement({\n      tag: 'button',\n      cssClasses: classes,\n      attributes: attrs,\n      innerContent: text,\n    });\n\n    if (action) {\n      this.button.addEventListener(action.key, action.value);\n    }\n\n    return this.button;\n  }\n}\n\nexport default ButtonComponent;\n","import type ButtonAction from '../../shared/button/types/types.ts';\nimport ButtonComponent from '../../shared/button/Button.ts';\n\nclass SubmitButtonComponent extends ButtonComponent {\n  public form: HTMLFormElement;\n\n  constructor(\n    form: HTMLFormElement,\n    text?: string,\n    classes?: string[],\n    attrs?: Record<string, string>,\n    action?: ButtonAction,\n  ) {\n    super(text, classes, attrs, action);\n\n    this.form = form;\n  }\n}\n\nexport default SubmitButtonComponent;\n","enum ERRORS_NAME {\n  FIRST_CHAR = 'firstChar',\n  EMPTY_FIELD = 'emptyField',\n  MANY_CHARS = 'manyChars',\n  OTHER_CHARS = 'otherChars',\n}\n\nexport default ERRORS_NAME;\n","const FIELD_INFO = {\n  name: {\n    name: 'name',\n    minChars: 3,\n  },\n  surname: {\n    name: 'surname',\n    minChars: 4,\n  },\n};\n\nexport default FIELD_INFO;\n","import { type InputFieldComponentInterface } from '../../entities/inputField/types/interfaces.ts';\nimport styles from '../../widgets/loginForm/style.module.scss';\nimport ERRORS_NAME from './types/enum.ts';\nimport FIELD_INFO from './const.ts';\n\nclass FormValidation {\n  private fields: InputFieldComponentInterface[] = [];\n\n  private errorMessages: Record<string, string> = {};\n\n  private fieldErrors: HTMLSpanElement[] = [];\n\n  private button: HTMLButtonElement;\n\n  constructor(\n    fields: InputFieldComponentInterface[],\n    fieldErrors: HTMLSpanElement[],\n    button: HTMLButtonElement,\n  ) {\n    this.fields = fields;\n    this.fieldErrors = fieldErrors;\n    this.button = button;\n  }\n\n  public initValidation(): void {\n    this.fields.forEach((field) => {\n      const fieldHTML = field.getHTML();\n\n      const options: Record<string, number> = {};\n      options.minChars =\n        fieldHTML.name === FIELD_INFO.name.name\n          ? FIELD_INFO.name.minChars\n          : FIELD_INFO.surname.minChars;\n\n      fieldHTML.addEventListener('input', () =>\n        this.fieldCheck(field, fieldHTML, options),\n      );\n    });\n  }\n\n  private updateBtnState(): void {\n    const isValidFields = Object.values(this.fields).every(\n      (field) => !field.isValid,\n    );\n    this.button.disabled = !isValidFields;\n  }\n\n  private getErrorMessage(\n    error: string,\n    options?: Record<string, number>,\n    name?: string,\n  ): string {\n    this.errorMessages = {\n      firstChar: 'The first letter must be in uppercase',\n      otherChars: 'Only letters of the Latin alphabet and \"-\" are allowed',\n      emptyField: 'The field can`t be empty',\n      manyChars: `The ${name} field must contain more than ${options?.minChars} characters`,\n    };\n\n    return this.errorMessages[error];\n  }\n\n  private setError(\n    field: InputFieldComponentInterface,\n    span: HTMLSpanElement,\n    error: string,\n    options?: Record<string, number>,\n    name?: string,\n  ): void {\n    const currentField = field;\n    currentField.isValid = true;\n\n    const fieldHTML = currentField.getHTML();\n    fieldHTML.classList.remove(styles.form__input__success);\n    fieldHTML.classList.add(styles.form__input__error);\n\n    const currentSpan = span;\n    currentSpan.classList.remove(styles.form__span__hidden);\n    currentSpan.classList.add(styles.form__span__visually);\n    currentSpan.textContent = this.getErrorMessage(error, options, name);\n\n    this.updateBtnState();\n  }\n\n  private fieldCheck(\n    field: InputFieldComponentInterface,\n    fieldHTML: HTMLInputElement,\n    options: Record<string, number>,\n  ): void {\n    const currentField = field;\n    const { value } = fieldHTML;\n    const { name } = fieldHTML;\n\n    const currentErrorSpan = this.fieldErrors.filter(\n      (item) => item.id === currentField.getHTML().id,\n    );\n\n    const currentSpan = currentErrorSpan[0];\n\n    if (value !== '' && value[0] !== value[0].toUpperCase()) {\n      const errorCode = ERRORS_NAME.FIRST_CHAR;\n      this.setError(currentField, currentSpan, errorCode);\n      return;\n    }\n\n    if (!/^[A-Za-z-]*$/.test(value)) {\n      const errorCode = ERRORS_NAME.OTHER_CHARS;\n      this.setError(currentField, currentSpan, errorCode);\n      return;\n    }\n\n    if (value === '') {\n      const errorCode = ERRORS_NAME.EMPTY_FIELD;\n      this.setError(currentField, currentSpan, errorCode);\n      return;\n    }\n\n    if (value.length < options.minChars) {\n      const errorCode = ERRORS_NAME.MANY_CHARS;\n      this.setError(currentField, currentSpan, errorCode, options, name);\n    } else {\n      currentField.isValid = false;\n      fieldHTML.classList.add(styles.form__input__success);\n      fieldHTML.classList.remove(styles.form__input__error);\n\n      currentSpan.textContent = '';\n      currentSpan.classList.add(styles.form__span__hidden);\n      currentSpan.classList.remove(styles.form__span__visually);\n\n      this.updateBtnState();\n    }\n  }\n}\n\nexport default FormValidation;\n","enum FIELD_NAMES {\n  NAME = 'name',\n  SURNAME = 'surname',\n}\n\nexport default FIELD_NAMES;\n","export const PAGES_IDS = {\n  START: 'start',\n  LOG_IN: 'logIn',\n  MAIN: 'main',\n} as const;\n\nexport const PAGES_STATE = {\n  VISIBLE: 'flex',\n  HIDDEN: 'none',\n} as const;\n","import styles from './style.module.scss';\nimport createBaseElement from '../../utils/createBaseElement.ts';\nimport InputFieldComponent from '../../entities/inputField/InputField.ts';\nimport SubmitButtonComponent from '../../entities/submitBtn/SubmitBtn.ts';\nimport FormValidation from '../../features/formValidation/FormValidation.ts';\nimport FIELD_NAMES from './types/enum.ts';\nimport { PAGES_IDS } from '../../pages/types/enums.ts';\nimport type PageInterface from '../../pages/types/interfaces.ts';\n\nclass LoginForm {\n  private form: HTMLFormElement;\n\n  protected inputFields: InputFieldComponent[] = [];\n\n  protected inputFieldsHTML: HTMLInputElement[] = [];\n\n  protected fieldErrors: HTMLSpanElement[] = [];\n\n  protected submitBtn: SubmitButtonComponent;\n\n  private userData: { [key: string]: FormDataEntryValue | null } = {};\n\n  private formValidation: FormValidation;\n\n  private page: PageInterface;\n\n  constructor(page: PageInterface) {\n    this.page = page;\n    this.submitBtn = this.createSubmitBtn();\n    this.form = this.createHTML();\n    this.formValidation = new FormValidation(\n      this.inputFields,\n      this.fieldErrors,\n      this.submitBtn.getHTML(),\n    );\n    this.formValidation.initValidation();\n  }\n\n  public getHTML(): HTMLFormElement {\n    return this.form;\n  }\n\n  private submit(event: Event): void {\n    event.preventDefault();\n    const formData = new FormData(this.form);\n    const nameData = formData.get(FIELD_NAMES.NAME);\n    const surnameData = formData.get(FIELD_NAMES.SURNAME);\n    this.userData.name = nameData;\n    this.userData.surname = surnameData;\n\n    window.location.hash = PAGES_IDS.START;\n\n    if (this.page.saveAuthUser) {\n      this.page.saveAuthUser(this.userData);\n    }\n\n    const newLoginForm = new LoginForm(this.page);\n    const currentForm = this.getHTML();\n    const { parentElement } = currentForm;\n\n    if (parentElement) {\n      parentElement.replaceChild(newLoginForm.getHTML(), currentForm);\n    }\n  }\n\n  private createFieldBox(input: HTMLInputElement): HTMLLabelElement {\n    const fieldLabel = createBaseElement({\n      tag: 'label',\n      cssClasses: [styles.form__label],\n      attributes: {\n        for: input.id,\n      },\n      innerContent: `Enter ${input.name}`,\n    });\n\n    const fieldErrorSpan = createBaseElement({\n      tag: 'span',\n      cssClasses: [styles.form__span],\n      attributes: {\n        id: input.id,\n      },\n    });\n\n    this.fieldErrors.push(fieldErrorSpan);\n    fieldLabel.append(input, fieldErrorSpan);\n    return fieldLabel;\n  }\n\n  private createInputsField(): InputFieldComponent[] {\n    const inputName = new InputFieldComponent(\n      {\n        type: 'text',\n        name: FIELD_NAMES.NAME,\n        id: FIELD_NAMES.NAME,\n        placeholder: 'Ivan',\n        class: styles.form__input,\n        autocomplete: 'off',\n      },\n      this.form,\n    );\n\n    const inputSurname = new InputFieldComponent(\n      {\n        type: 'text',\n        name: FIELD_NAMES.SURNAME,\n        id: FIELD_NAMES.SURNAME,\n        placeholder: 'Ivanov',\n        class: styles.form__input,\n        autocomplete: 'off',\n      },\n      this.form,\n    );\n\n    this.inputFieldsHTML.push(inputName.getHTML(), inputSurname.getHTML());\n    return [inputName, inputSurname];\n  }\n\n  private createSubmitBtn(): SubmitButtonComponent {\n    const submitBtn = new SubmitButtonComponent(\n      this.form,\n      'Login',\n      [styles.form__btn, 'btn-reset'],\n      {\n        type: 'submit',\n        disabled: 'true',\n      },\n    );\n\n    return submitBtn;\n  }\n\n  private createHTML(): HTMLFormElement {\n    this.form = createBaseElement({\n      tag: 'form',\n      cssClasses: [styles.form],\n      attributes: {\n        action: '#',\n        method: 'post',\n      },\n    });\n\n    this.inputFields = this.createInputsField();\n\n    this.inputFieldsHTML.forEach((input) => {\n      const fieldBox = this.createFieldBox(input);\n      this.form.append(fieldBox);\n    });\n\n    this.form.addEventListener('submit', this.submit.bind(this));\n    this.form.append(this.submitBtn.getHTML());\n    return this.form;\n  }\n}\n\nexport default LoginForm;\n","class Mediator {\n  private static mediator = new Mediator();\n\n  private listeners: Map<string, Array<(params?: unknown) => void>>;\n\n  constructor() {\n    this.listeners = new Map();\n  }\n\n  public static getInstance(): Mediator {\n    return Mediator.mediator;\n  }\n\n  public subscribe(\n    eventName: string,\n    listener: (params?: unknown) => void,\n  ): void {\n    if (this.listeners.has(eventName)) {\n      const listeners = this.listeners.get(eventName);\n      listeners?.push(listener);\n    } else {\n      const newListeners = [];\n      newListeners.push(listener);\n      this.listeners.set(eventName, newListeners);\n    }\n  }\n\n  public notify(eventName: string, params?: unknown): void {\n    const eventListeners = this.listeners.get(eventName);\n    if (eventListeners) {\n      eventListeners.forEach((listener) => listener(params));\n    }\n  }\n\n  public unsubscribe(eventName: string, listener: () => void): void {\n    if (this.listeners.has(eventName)) {\n      const listeners = this.listeners.get(eventName);\n      const index = listeners?.indexOf(listener);\n\n      if (index && index !== -1) {\n        listeners?.splice(index, 1);\n      }\n    }\n  }\n}\n\nexport default Mediator;\n","enum STORE_KEYS {\n  LS_NAME = 'kleostro',\n  USER = 'user',\n}\n\nexport default STORE_KEYS;\n","const AppEvents = {\n  newUser: 'newUser',\n  changeHash: 'changeHash',\n} as const;\n\nexport default AppEvents;\n","/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport styles from './style.module.scss';\nimport createBaseElement from '../../utils/createBaseElement.ts';\nimport LoginForm from '../../widgets/loginForm/LoginForm.ts';\nimport type StorageComponent from '../../app/Storage/Storage.ts';\nimport { PAGES_STATE } from '../types/enums.ts';\nimport Mediator from '../core/mediator/mediator.ts';\nimport STORE_KEYS from '../../app/Storage/types/enums.ts';\nimport type PageInterface from '../types/interfaces.ts';\nimport AppEvents from '../core/mediator/types/enums.ts';\n\nclass LogInPage implements PageInterface {\n  public storage: StorageComponent;\n\n  public id: string;\n\n  private parent: HTMLDivElement;\n\n  private singletonMediator: Mediator;\n\n  private page: HTMLDivElement;\n\n  constructor(id: string, parent: HTMLDivElement, storage: StorageComponent) {\n    this.id = id;\n    this.parent = parent;\n    this.storage = storage;\n    this.singletonMediator = Mediator.getInstance();\n    this.page = this.createHTML(this.id);\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.page;\n  }\n\n  public checkAuthUser(): boolean {\n    const userData = this.storage.get(STORE_KEYS.USER);\n    if (userData.name !== '') {\n      this.singletonMediator.notify(AppEvents.newUser, userData);\n    } else {\n      return false;\n    }\n    return true;\n  }\n\n  public saveAuthUser(userData: {\n    [key: string]: FormDataEntryValue | null;\n  }): void {\n    this.storage.add(STORE_KEYS.USER, JSON.stringify(userData));\n  }\n\n  private createHTML(id: string): HTMLDivElement {\n    this.page = createBaseElement({\n      tag: 'div',\n      cssClasses: [styles.page],\n      attributes: { id },\n    });\n\n    this.page.style.display = PAGES_STATE.HIDDEN;\n\n    const loginForm = new LoginForm(this);\n\n    this.page.append(loginForm.getHTML());\n    this.parent.append(this.page);\n    return this.page;\n  }\n}\n\nexport default LogInPage;\n","/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport STORE_KEYS from './types/enums.ts';\nimport type {\n  Data,\n  StorageComponentInterface,\n  UserDataInterface,\n} from './types/interfaces';\n\nclass StorageComponent implements StorageComponentInterface {\n  private storage: Data;\n\n  constructor() {\n    this.storage = this.init();\n  }\n\n  public get(key: string): UserDataInterface {\n    let result: UserDataInterface = { name: '', surname: '' };\n    if (key in this.storage) {\n      result = JSON.parse(this.storage[key]);\n    }\n    return result;\n  }\n\n  public add(key: string, value: string): void {\n    this.storage[key] = value;\n    this.save(this.storage);\n  }\n\n  public remove(key: string): void {\n    const data: Data = this.init();\n    delete data[key];\n    this.save(data);\n  }\n\n  public clear(): void {\n    localStorage.clear();\n    this.init();\n  }\n\n  private save(data: Data): Data {\n    localStorage.setItem(STORE_KEYS.LS_NAME, JSON.stringify(data));\n    return this.storage;\n  }\n\n  private init(): Data {\n    const storedData = localStorage.getItem(STORE_KEYS.LS_NAME);\n\n    const safeJsonParse = <T extends Data>(str: string): T => {\n      try {\n        const jsonValue: T = JSON.parse(str);\n        return jsonValue;\n      } catch {\n        throw new Error('I need help >_<');\n      }\n    };\n\n    if (storedData) {\n      this.storage = safeJsonParse(storedData);\n    } else {\n      localStorage.setItem(STORE_KEYS.LS_NAME, '{}');\n      this.storage = this.init();\n    }\n\n    return this.storage;\n  }\n}\n\nexport default StorageComponent;\n","/* eslint-disable class-methods-use-this */\nimport styles from './style.module.scss';\nimport createBaseElement from '../../utils/createBaseElement.ts';\nimport type StorageComponent from '../../app/Storage/Storage.ts';\nimport type PageInterface from '../types/interfaces.ts';\nimport ButtonComponent from '../../shared/button/Button.ts';\nimport STORE_KEYS from '../../app/Storage/types/enums.ts';\nimport { type UserDataInterface } from '../../app/Storage/types/interfaces.ts';\nimport { PAGES_IDS, PAGES_STATE } from '../types/enums.ts';\nimport Mediator from '../core/mediator/mediator.ts';\nimport AppEvents from '../core/mediator/types/enums.ts';\n\nclass StartPage implements PageInterface {\n  public id: string;\n\n  public storage: StorageComponent;\n\n  private parent: HTMLDivElement;\n\n  private page: HTMLDivElement;\n\n  private title: HTMLHeadingElement | null;\n\n  private subtitle: HTMLHeadingElement;\n\n  private descr: HTMLDivElement | null;\n\n  private startBtn: ButtonComponent | null;\n\n  private logOutBtn: ButtonComponent | null;\n\n  private singletonMediator: Mediator;\n\n  constructor(id: string, parent: HTMLDivElement, storage: StorageComponent) {\n    this.id = id;\n    this.parent = parent;\n    this.storage = storage;\n\n    this.title = null;\n    this.subtitle = createBaseElement({ tag: 'h2' });\n    this.descr = null;\n    this.startBtn = null;\n    this.logOutBtn = null;\n\n    this.singletonMediator = Mediator.getInstance();\n    this.singletonMediator.subscribe(\n      AppEvents.newUser,\n      this.greeting.bind(this),\n    );\n\n    this.page = this.createHTML(this.id);\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.page;\n  }\n\n  public greeting(): string {\n    const userData: UserDataInterface = this.storage.get(STORE_KEYS.USER);\n    const { name, surname } = userData;\n    const greeting = `Hello, ${name} ${surname}!`;\n    this.subtitle.textContent = greeting;\n    return greeting;\n  }\n\n  private logOut(): void {\n    this.storage.remove(STORE_KEYS.USER);\n    window.location.hash = PAGES_IDS.LOG_IN;\n  }\n\n  private createTitle(): HTMLHeadingElement {\n    this.title = createBaseElement({\n      tag: 'h1',\n      cssClasses: [styles.page__title],\n      innerContent: 'RSS Puzzle',\n    });\n    return this.title;\n  }\n\n  private createSubtitle(): HTMLHeadingElement {\n    this.subtitle = createBaseElement({\n      tag: 'h2',\n      cssClasses: [styles.page__subtitle],\n      innerContent: this.greeting(),\n    });\n    return this.subtitle;\n  }\n\n  private createDescr(): HTMLParagraphElement {\n    this.descr = createBaseElement({\n      tag: 'p',\n      cssClasses: [styles.page__descr],\n      innerContent: 'Your RSS reader',\n    });\n    return this.descr;\n  }\n\n  private moveToMainPage(): void {\n    window.location.hash = PAGES_IDS.MAIN;\n  }\n\n  private createStartBtn(): ButtonComponent {\n    this.startBtn = new ButtonComponent(\n      'Start',\n      [styles.page__btn, 'btn-reset'],\n      {},\n      {\n        key: 'click',\n        value: (): void => {\n          this.moveToMainPage();\n        },\n      },\n    );\n    return this.startBtn;\n  }\n\n  private createLogOutBtn(): ButtonComponent {\n    this.logOutBtn = new ButtonComponent(\n      'Log out',\n      [styles.page__btn, 'btn-reset'],\n      {},\n      {\n        key: 'click',\n        value: (): void => {\n          this.logOut();\n        },\n      },\n    );\n\n    return this.logOutBtn;\n  }\n\n  private createHTML(id: string): HTMLDivElement {\n    this.page = createBaseElement({\n      tag: 'div',\n      cssClasses: [styles.page],\n      attributes: { id },\n    });\n\n    this.page.style.display = PAGES_STATE.HIDDEN;\n\n    this.title = this.createTitle();\n    this.subtitle = this.createSubtitle();\n    this.descr = this.createDescr();\n    this.startBtn = this.createStartBtn();\n    this.logOutBtn = this.createLogOutBtn();\n\n    this.page.append(\n      this.title,\n      this.subtitle,\n      this.descr,\n      this.startBtn.getHTML(),\n      this.logOutBtn.getHTML(),\n    );\n\n    this.parent.append(this.page);\n    return this.page;\n  }\n}\n\nexport default StartPage;\n","import { PAGES_IDS, PAGES_STATE } from '../../pages/types/enums.ts';\nimport type PageInterface from '../../pages/types/interfaces.ts';\n\nconst PAGE_DELAY = 500;\nconst maxOpacity = 1;\n\nclass Router {\n  private pages: Record<string, PageInterface>;\n\n  private currentPage: PageInterface;\n\n  private duration: number;\n\n  constructor(pages: Record<string, PageInterface>) {\n    this.pages = pages;\n\n    this.currentPage = this.setCurrentPage();\n    this.duration = PAGE_DELAY;\n    window.addEventListener('hashchange', this.hashChangeHandler.bind(this));\n  }\n\n  public init(): void {\n    this.hashChangeHandler();\n  }\n\n  private setCurrentPage(): PageInterface {\n    const currentHash = window.location.hash.slice(1);\n\n    if (currentHash in this.pages) {\n      this.currentPage = this.pages[currentHash];\n    } else if (currentHash === '') {\n      this.currentPage = this.pages[PAGES_IDS.LOG_IN];\n    }\n\n    return this.currentPage;\n  }\n\n  private renderNewPage(pageID: string): void {\n    const formattedTitle = pageID[0].toUpperCase() + pageID.slice(1);\n    document.title = formattedTitle;\n\n    this.fadeOutAndIn(this.currentPage, this.pages[pageID]);\n\n    this.currentPage = this.pages[pageID];\n  }\n\n  private fadeOutAndIn(\n    currentPage: PageInterface,\n    nextPage: PageInterface,\n    duration = this.duration,\n  ): void {\n    let start = performance.now();\n\n    const fadeIn = (timestamp: number): void => {\n      const elapsed = timestamp - start;\n      const progress = Math.min(elapsed / duration, maxOpacity);\n      const page = nextPage.getHTML();\n\n      page.style.opacity = `${progress}`;\n      page.style.display = PAGES_STATE.VISIBLE;\n\n      if (elapsed < duration) {\n        window.requestAnimationFrame(fadeIn);\n      }\n    };\n\n    const fadeOut = (timestamp: number): void => {\n      const elapsed = timestamp - start;\n      const progress = Math.min(elapsed / duration, maxOpacity);\n\n      const page = currentPage.getHTML();\n      page.style.opacity = `${maxOpacity - progress}`;\n\n      if (elapsed < duration) {\n        window.requestAnimationFrame(fadeOut);\n      } else {\n        Object.entries(this.pages)\n          .filter(([key]) => key !== this.currentPage.getHTML().id)\n          .forEach(([key]) => {\n            this.pages[key].getHTML().style.display = PAGES_STATE.HIDDEN;\n          });\n\n        page.style.display = PAGES_STATE.HIDDEN;\n        start = performance.now();\n        window.requestAnimationFrame(fadeIn);\n      }\n    };\n\n    window.requestAnimationFrame(fadeOut);\n  }\n\n  private hashChangeHandler(): void {\n    const loginPage = this.pages[PAGES_IDS.LOG_IN];\n\n    if (loginPage.checkAuthUser) {\n      if (loginPage.checkAuthUser()) {\n        const hash = window.location.hash.slice(1);\n\n        if (hash === '' || hash === PAGES_IDS.LOG_IN) {\n          window.location.hash = PAGES_IDS.START;\n          this.renderNewPage(PAGES_IDS.START);\n        } else if (hash !== this.pages[hash]?.id) {\n          // TBD add 404 page\n          window.location.hash = PAGES_IDS.START;\n          this.renderNewPage(PAGES_IDS.START);\n          throw new Error('Wrong hash');\n        } else {\n          this.renderNewPage(hash);\n        }\n      } else {\n        window.location.hash = PAGES_IDS.LOG_IN;\n        this.renderNewPage(PAGES_IDS.LOG_IN);\n      }\n    }\n  }\n}\n\nexport default Router;\n","/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport styles from './style.module.scss';\nimport createBaseElement from '../../utils/createBaseElement.ts';\nimport type StorageComponent from '../../app/Storage/Storage.ts';\nimport { PAGES_STATE } from '../types/enums.ts';\nimport type PageInterface from '../types/interfaces.ts';\n\nclass MainPage implements PageInterface {\n  public id: string;\n\n  public storage: StorageComponent;\n\n  private parent: HTMLDivElement;\n\n  private page: HTMLDivElement;\n\n  constructor(id: string, parent: HTMLDivElement, storage: StorageComponent) {\n    this.id = id;\n    this.parent = parent;\n    this.storage = storage;\n    this.page = this.createHTML(this.id);\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.page;\n  }\n\n  private createHTML(id: string): HTMLDivElement {\n    this.page = createBaseElement({\n      tag: 'div',\n      cssClasses: [styles.page],\n      attributes: { id },\n    });\n\n    this.page.style.display = PAGES_STATE.HIDDEN;\n\n    this.parent.append(this.page);\n    return this.page;\n  }\n}\n\nexport default MainPage;\n","import styles from './style.module.scss';\nimport LogInPage from '../../pages/logInPage/index.ts';\nimport createBaseElement from '../../utils/createBaseElement.ts';\nimport StorageComponent from '../Storage/Storage.ts';\nimport StartPage from '../../pages/startPage/index.ts';\nimport Router from '../Router/Router.ts';\nimport { PAGES_IDS } from '../../pages/types/enums.ts';\nimport MainPage from '../../pages/mainPage/index.ts';\n\nclass App {\n  public pagesContainer: HTMLDivElement;\n\n  private storage: StorageComponent;\n\n  public pages: {\n    logIn: LogInPage;\n    start: StartPage;\n    main: MainPage;\n  };\n\n  private router: Router;\n\n  constructor() {\n    this.pagesContainer = this.createHTML();\n    this.storage = new StorageComponent();\n\n    this.pages = {\n      logIn: new LogInPage(PAGES_IDS.LOG_IN, this.pagesContainer, this.storage),\n      start: new StartPage(PAGES_IDS.START, this.pagesContainer, this.storage),\n      main: new MainPage(PAGES_IDS.MAIN, this.pagesContainer, this.storage),\n    };\n\n    this.router = new Router(this.pages);\n    this.router.init();\n  }\n\n  private createHTML(): HTMLDivElement {\n    this.pagesContainer = createBaseElement({\n      tag: 'div',\n      cssClasses: [styles.pagesContainer],\n    });\n    return this.pagesContainer;\n  }\n}\n\nexport default App;\n","import './index.scss';\nimport App from './src/app/App/app.ts';\n\nconst myApp = new App();\ndocument.body.append(myApp.pagesContainer);\n"],"names":["form","ERRORS_NAME","styles","FIELD_NAMES","page","index","STORE_KEYS"],"mappings":"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"}