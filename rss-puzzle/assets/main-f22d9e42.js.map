{"version":3,"file":"main-f22d9e42.js","sources":["../../src/features/formValidation/types/enum.ts","../../src/features/formValidation/const.ts","../../src/shared/input/types/enums.ts","../../src/features/formValidation/model/FormValidationModel.ts","../../src/shared/types/enums.ts","../../src/utils/createBaseElement.ts","../../src/shared/input/view/InputView.ts","../../src/entities/inputField/model/InputFieldModal.ts","../../src/shared/button/types/enums.ts","../../src/shared/button/ui/ButtonView.ts","../../src/shared/button/model/ButtonModel.ts","../../src/entities/submitBtn/model/SubmitBtnModel.ts","../../src/widgets/loginForm/types/enum.ts","../../src/widgets/loginForm/ui/LoginFormView.ts","../../src/widgets/loginForm/model/LoginFormModel.ts","../../src/pages/types/enums.ts","../../src/pages/core/mediator/model/MediatorModel.ts","../../src/app/Storage/types/enums.ts","../../src/pages/core/mediator/types/enums.ts","../../src/pages/logInPage/ui/LoginPageView.ts","../../src/pages/logInPage/model/LoginPageModel.ts","../../src/app/Storage/model/StorageModel.ts","../../src/pages/startPage/types/enums.ts","../../src/pages/startPage/ui/StartPageView.ts","../../src/pages/startPage/model/StartPageModel.ts","../../src/app/Router/model/RouterModel.ts","../../src/shared/api/types/constants.ts","../../src/shared/api/model/ApiModel.ts","../../src/widgets/playground/api/PlaygroundApi.ts","../../src/widgets/playground/types/constants.ts","../../src/widgets/playground/ui/PlaygroundView.ts","../../src/entities/puzzle/types/constans.ts","../../src/entities/puzzle/Puzzle.ts","../../src/widgets/playground/model/PlaygroundModel.ts","../../src/pages/mainPage/ui/MainPageView.ts","../../src/pages/mainPage/model/MainPageModel.ts","../../src/app/App/ui/AppView.ts","../../src/app/App/model/AppModel.ts","../../src/index.ts"],"sourcesContent":["enum ERRORS_NAME {\n  FIRST_CHAR = 'firstChar',\n  EMPTY_FIELD = 'emptyField',\n  MANY_CHARS = 'manyChars',\n  OTHER_CHARS = 'otherChars',\n}\n\nexport default ERRORS_NAME;\n","const FIELD_INFO = {\n  name: {\n    name: 'name',\n    minChars: 3,\n  },\n  surname: {\n    name: 'surname',\n    minChars: 4,\n  },\n};\n\nexport default FIELD_INFO;\n","const INPUT_STATE = {\n  DISABLED: true,\n  ENABLED: false,\n} as const;\n\nexport default INPUT_STATE;\n","import styles from '../../../widgets/loginForm/style.module.scss';\nimport ERRORS_NAME from '../types/enum.ts';\nimport FIELD_INFO from '../const.ts';\nimport type InputFieldModal from '@/entities/inputField/model/InputFieldModal.ts';\nimport INPUT_STATE from '../../../shared/input/types/enums.ts';\n\nclass FormValidationModel {\n  private fields: InputFieldModal[] = [];\n\n  private errorMessages: Record<string, string> = {};\n\n  private fieldErrors: HTMLSpanElement[] = [];\n\n  private button: HTMLButtonElement;\n\n  constructor(\n    fields: InputFieldModal[],\n    fieldErrors: HTMLSpanElement[],\n    button: HTMLButtonElement,\n  ) {\n    this.fields = fields;\n    this.fieldErrors = fieldErrors;\n    this.button = button;\n  }\n\n  public initValidation(): void {\n    this.fields.forEach((field) => {\n      const fieldHTML = field.getHTML();\n\n      const options: Record<string, number> = {};\n      options.minChars =\n        fieldHTML.name === FIELD_INFO.name.name\n          ? FIELD_INFO.name.minChars\n          : FIELD_INFO.surname.minChars;\n\n      fieldHTML.addEventListener('input', () =>\n        this.fieldCheck(field, fieldHTML, options),\n      );\n    });\n  }\n\n  private updateBtnState(): void {\n    const isValidFields = Object.values(this.fields).every(\n      (field) => !field.getIsValid(),\n    );\n    this.button.disabled = !isValidFields;\n  }\n\n  private getErrorMessage(\n    error: string,\n    options?: Record<string, number>,\n    name?: string,\n  ): string {\n    this.errorMessages = {\n      firstChar: 'The first letter must be in uppercase',\n      otherChars: 'Only letters of the Latin alphabet and \"-\" are allowed',\n      emptyField: 'The field can`t be empty',\n      manyChars: `The ${name} field must contain more than ${options?.minChars} characters`,\n    };\n\n    return this.errorMessages[error];\n  }\n\n  private setError(\n    field: InputFieldModal,\n    span: HTMLSpanElement,\n    error: string,\n    options?: Record<string, number>,\n    name?: string,\n  ): void {\n    const currentField = field;\n    currentField.setIsValid(INPUT_STATE.DISABLED);\n\n    const fieldHTML = currentField.getHTML();\n    fieldHTML.classList.remove(styles.form__input__success);\n    fieldHTML.classList.add(styles.form__input__error);\n\n    const currentSpan = span;\n    currentSpan.classList.remove(styles.form__span__hidden);\n    currentSpan.classList.add(styles.form__span__visually);\n    currentSpan.textContent = this.getErrorMessage(error, options, name);\n\n    this.updateBtnState();\n  }\n\n  private fieldCheck(\n    field: InputFieldModal,\n    fieldHTML: HTMLInputElement,\n    options: Record<string, number>,\n  ): void {\n    const currentField = field;\n    const { value } = fieldHTML;\n    const { name } = fieldHTML;\n\n    const currentErrorSpan = this.fieldErrors.filter(\n      (item) => item.id === currentField.getHTML().id,\n    );\n\n    const currentSpan = currentErrorSpan[0];\n\n    if (value !== '' && value[0] !== value[0].toUpperCase()) {\n      const errorCode = ERRORS_NAME.FIRST_CHAR;\n      this.setError(currentField, currentSpan, errorCode);\n      return;\n    }\n\n    if (!/^[A-Za-z-]*$/.test(value)) {\n      const errorCode = ERRORS_NAME.OTHER_CHARS;\n      this.setError(currentField, currentSpan, errorCode);\n      return;\n    }\n\n    if (value === '') {\n      const errorCode = ERRORS_NAME.EMPTY_FIELD;\n      this.setError(currentField, currentSpan, errorCode);\n      return;\n    }\n\n    if (value.length < options.minChars) {\n      const errorCode = ERRORS_NAME.MANY_CHARS;\n      this.setError(currentField, currentSpan, errorCode, options, name);\n    } else {\n      currentField.setIsValid(INPUT_STATE.ENABLED);\n      fieldHTML.classList.add(styles.form__input__success);\n      fieldHTML.classList.remove(styles.form__input__error);\n\n      currentSpan.textContent = '';\n      currentSpan.classList.add(styles.form__span__hidden);\n      currentSpan.classList.remove(styles.form__span__visually);\n\n      this.updateBtnState();\n    }\n  }\n}\n\nexport default FormValidationModel;\n","export const TAG_NAMES = {\n  div: 'div',\n  button: 'button',\n  form: 'form',\n  input: 'input',\n  textarea: 'textarea',\n  label: 'label',\n  span: 'span',\n  p: 'p',\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  ul: 'ul',\n  li: 'li',\n  a: 'a',\n  img: 'img',\n} as const;\n\nexport const EVENT_NAMES = {\n  hashchange: 'hashchange',\n  click: 'click',\n  submit: 'submit',\n} as const;\n","interface CreateBaseElement<T> {\n  tag: T;\n  cssClasses?: string[];\n  attributes?: Record<string, string>;\n  innerContent?: string;\n}\n\nconst createBaseElement = <T extends keyof HTMLElementTagNameMap>({\n  tag,\n  cssClasses = [],\n  attributes = {},\n  innerContent = '',\n}: CreateBaseElement<T>): HTMLElementTagNameMap[T] => {\n  const elem = document.createElement(tag);\n\n  elem.classList.add(...cssClasses);\n\n  Object.entries(attributes).forEach(([attrName, attrValue]) => {\n    elem.setAttribute(attrName, attrValue);\n  });\n\n  elem.innerHTML = innerContent;\n\n  return elem;\n};\n\nexport default createBaseElement;\n","import { TAG_NAMES } from '../../types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\n\nclass InputView {\n  public input: HTMLInputElement;\n\n  constructor(attrs: Record<string, string>) {\n    this.input = this.createHTML(attrs);\n  }\n\n  public getHTML(): HTMLInputElement {\n    return this.input;\n  }\n\n  private createHTML(attrs: Record<string, string>): HTMLInputElement {\n    this.input = createBaseElement({\n      tag: TAG_NAMES.input,\n      attributes: attrs,\n    });\n\n    return this.input;\n  }\n}\n\nexport default InputView;\n","import InputView from '../../../shared/input/view/InputView.ts';\n\nclass InputFieldModal extends InputView {\n  private form: HTMLFormElement;\n\n  private isValid: boolean;\n\n  private name: string;\n\n  constructor(attrs: Record<string, string>, form: HTMLFormElement) {\n    super(attrs);\n    this.form = form;\n    this.isValid = true;\n    this.name = attrs.name;\n  }\n\n  public getInputName(): string {\n    return this.name;\n  }\n\n  public getIsValid(): boolean {\n    return this.isValid;\n  }\n\n  public setIsValid(isValid: boolean): void {\n    this.isValid = isValid;\n  }\n\n  public getInputForm(): HTMLFormElement {\n    return this.form;\n  }\n\n  public getData(): string {\n    return this.input.value;\n  }\n}\n\nexport default InputFieldModal;\n","const BUTTON_STATE = {\n  DISABLED: true,\n  ENABLED: false,\n} as const;\n\nexport default BUTTON_STATE;\n","import { TAG_NAMES } from '../../types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport type ButtonAction from '../types/types';\n\nclass ButtonView {\n  private button: HTMLButtonElement;\n\n  constructor(\n    text?: string,\n    classes?: string[],\n    attrs?: Record<string, string>,\n    action?: ButtonAction,\n  ) {\n    this.button = this.createHTML(action, classes, attrs, text);\n  }\n\n  public getHTML(): HTMLButtonElement {\n    return this.button;\n  }\n\n  private createHTML(\n    action?: ButtonAction,\n    classes?: string[],\n    attrs?: Record<string, string>,\n    text?: string,\n  ): HTMLButtonElement {\n    this.button = createBaseElement({\n      tag: TAG_NAMES.button,\n      cssClasses: classes,\n      attributes: attrs,\n      innerContent: text,\n    });\n\n    if (action) {\n      this.button.addEventListener(action.key, action.value);\n    }\n\n    return this.button;\n  }\n}\n\nexport default ButtonView;\n","import BUTTON_STATE from '../types/enums.ts';\nimport type ButtonAction from '../types/types.ts';\nimport ButtonView from '../ui/ButtonView.ts';\n\nclass ButtonModel {\n  private view: ButtonView;\n\n  private button: HTMLButtonElement;\n\n  constructor(\n    text?: string,\n    classes?: string[],\n    attrs?: Record<string, string>,\n    action?: ButtonAction,\n  ) {\n    this.view = new ButtonView(text, classes, attrs, action);\n    this.button = this.view.getHTML();\n  }\n\n  public getHTML(): HTMLButtonElement {\n    return this.button;\n  }\n\n  public setDisabled(): void {\n    this.button.disabled = BUTTON_STATE.DISABLED;\n  }\n\n  public setEnabled(): void {\n    this.button.disabled = BUTTON_STATE.ENABLED;\n  }\n\n  public switchDisabled(): void {\n    this.button.disabled = !this.button.disabled;\n  }\n}\n\nexport default ButtonModel;\n","import type ButtonAction from '../../../shared/button/types/types.ts';\nimport ButtonModel from '../../../shared/button/model/ButtonModel.ts';\n\nclass SubmitButtonModel extends ButtonModel {\n  public form: HTMLFormElement;\n\n  constructor(\n    form: HTMLFormElement,\n    text?: string,\n    classes?: string[],\n    attrs?: Record<string, string>,\n    action?: ButtonAction,\n  ) {\n    super(text, classes, attrs, action);\n\n    this.form = form;\n  }\n}\n\nexport default SubmitButtonModel;\n","enum FIELD_NAMES {\n  NAME = 'name',\n  SURNAME = 'surname',\n}\n\nexport default FIELD_NAMES;\n","import { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport InputFieldModal from '../../../entities/inputField/model/InputFieldModal.ts';\nimport SubmitButtonModel from '../../../entities/submitBtn/model/SubmitBtnModel.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport styles from '../style.module.scss';\nimport FIELD_NAMES from '../types/enum.ts';\n\nclass LoginFormView {\n  private form: HTMLFormElement;\n\n  private inputFields: InputFieldModal[] = [];\n\n  private inputFieldsHTML: HTMLInputElement[] = [];\n\n  private fieldErrors: HTMLSpanElement[] = [];\n\n  private submitBtn: SubmitButtonModel;\n\n  constructor() {\n    this.submitBtn = this.createSubmitBtn();\n    this.form = this.createHTML();\n  }\n\n  public getHTML(): HTMLFormElement {\n    return this.form;\n  }\n\n  public getSubmitBtn(): SubmitButtonModel {\n    return this.submitBtn;\n  }\n\n  public getInputFields(): InputFieldModal[] {\n    return this.inputFields;\n  }\n\n  public getFieldErrors(): HTMLSpanElement[] {\n    return this.fieldErrors;\n  }\n\n  private createFieldBox(input: HTMLInputElement): HTMLLabelElement {\n    const labelText = `Enter ${input.name}`;\n\n    const fieldLabel = createBaseElement({\n      tag: TAG_NAMES.label,\n      cssClasses: [styles.form__label],\n      attributes: {\n        for: input.id,\n      },\n      innerContent: labelText,\n    });\n\n    const fieldErrorSpan = createBaseElement({\n      tag: TAG_NAMES.span,\n      cssClasses: [styles.form__span],\n      attributes: {\n        id: input.id,\n      },\n    });\n\n    this.fieldErrors.push(fieldErrorSpan);\n    fieldLabel.append(input, fieldErrorSpan);\n    return fieldLabel;\n  }\n\n  private createInputsField(): InputFieldModal[] {\n    const inputName = new InputFieldModal(\n      {\n        type: 'text',\n        name: FIELD_NAMES.NAME,\n        id: FIELD_NAMES.NAME,\n        placeholder: 'Ivan',\n        class: styles.form__input,\n        autocomplete: 'off',\n      },\n      this.form,\n    );\n\n    const inputSurname = new InputFieldModal(\n      {\n        type: 'text',\n        name: FIELD_NAMES.SURNAME,\n        id: FIELD_NAMES.SURNAME,\n        placeholder: 'Ivanov',\n        class: styles.form__input,\n        autocomplete: 'off',\n      },\n      this.form,\n    );\n\n    this.inputFieldsHTML.push(inputName.getHTML(), inputSurname.getHTML());\n    return [inputName, inputSurname];\n  }\n\n  private createSubmitBtn(): SubmitButtonModel {\n    const textContentBtn = 'Login';\n    const submitBtn = new SubmitButtonModel(\n      this.form,\n      textContentBtn,\n      [styles.form__btn, 'btn-reset'],\n      {\n        type: 'submit',\n      },\n    );\n\n    submitBtn.setDisabled();\n\n    return submitBtn;\n  }\n\n  private createHTML(): HTMLFormElement {\n    this.form = createBaseElement({\n      tag: TAG_NAMES.form,\n      cssClasses: [styles.form],\n      attributes: {\n        action: '#',\n        method: 'post',\n      },\n    });\n\n    this.inputFields = this.createInputsField();\n\n    this.inputFieldsHTML.forEach((input) => {\n      const fieldBox = this.createFieldBox(input);\n      this.form.append(fieldBox);\n    });\n\n    this.form.append(this.submitBtn.getHTML());\n    return this.form;\n  }\n}\n\nexport default LoginFormView;\n","import FormValidationModel from '../../../features/formValidation/model/FormValidationModel.ts';\nimport type PageInterface from '../../../pages/types/interfaces.ts';\nimport { type UserDataInterface } from '../../../app/Storage/types/interfaces.ts';\nimport { EVENT_NAMES } from '../../../shared/types/enums.ts';\nimport LoginFormView from '../ui/LoginFormView.ts';\n\nclass LoginFormModel {\n  private form: HTMLFormElement;\n\n  private formView: LoginFormView;\n\n  private formValidation: FormValidationModel;\n\n  private page: PageInterface;\n\n  constructor(page: PageInterface) {\n    this.page = page;\n    this.formView = new LoginFormView();\n    this.form = this.formView.getHTML();\n    this.form.addEventListener(EVENT_NAMES.submit, this.submit.bind(this));\n    this.formValidation = new FormValidationModel(\n      this.formView.getInputFields(),\n      this.formView.getFieldErrors(),\n      this.formView.getSubmitBtn().getHTML(),\n    );\n    this.formValidation.initValidation();\n  }\n\n  public getHTML(): HTMLFormElement {\n    return this.form;\n  }\n\n  private getData(): UserDataInterface {\n    const userData: UserDataInterface = {};\n\n    this.formView.getInputFields().forEach((input) => {\n      const key = input.getInputName();\n      const value = input.getData();\n      userData[key] = value;\n    });\n\n    return userData;\n  }\n\n  private submit(event: Event): void {\n    event.preventDefault();\n\n    if (this.page.saveAuthUser) {\n      this.page.saveAuthUser(this.getData());\n    }\n\n    this.form.remove();\n  }\n}\n\nexport default LoginFormModel;\n","export const PAGES_IDS = {\n  START: 'start',\n  LOG_IN: 'logIn',\n  BLANK: '',\n  MAIN: 'main',\n} as const;\n\nexport const PAGES_STATE = {\n  VISIBLE: 'flex',\n  HIDDEN: 'none',\n} as const;\n","import type ListenerCallback from '../types/types.ts';\n\nclass MediatorModel<T> {\n  private static mediator = new MediatorModel();\n\n  private listeners: Map<string, Array<ListenerCallback<T>>>;\n\n  constructor() {\n    this.listeners = new Map();\n  }\n\n  public static getInstance(): MediatorModel<unknown> {\n    return MediatorModel.mediator;\n  }\n\n  public subscribe(eventName: string, listener: ListenerCallback<T>): void {\n    if (this.listeners.has(eventName)) {\n      const listeners = this.listeners.get(eventName);\n      listeners?.push(listener);\n    } else {\n      const newListeners = [];\n      newListeners.push(listener);\n      this.listeners.set(eventName, newListeners);\n    }\n  }\n\n  public notify(eventName: string, params: T): void {\n    const eventListeners = this.listeners.get(eventName);\n    if (eventListeners) {\n      eventListeners.forEach((listener) => listener(params));\n    }\n  }\n\n  public unsubscribe(eventName: string, listener: ListenerCallback<T>): void {\n    if (this.listeners.has(eventName)) {\n      const listeners = this.listeners.get(eventName);\n      const index = listeners?.indexOf(listener);\n\n      if (index && index !== -1) {\n        listeners?.splice(index, 1);\n      }\n    }\n  }\n}\n\nexport default MediatorModel;\n","enum STORE_KEYS {\n  LS_NAME = 'kleostro',\n  USER = 'user',\n}\n\nexport default STORE_KEYS;\n","const AppEvents = {\n  newUser: 'newUser',\n  changeHash: 'changeHash',\n} as const;\n\nexport default AppEvents;\n","import { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport styles from './style.module.scss';\nimport { PAGES_STATE } from '../../types/enums.ts';\nimport type PageInterface from '../../types/interfaces.ts';\n\nclass LoginPageView implements PageInterface {\n  private id: string;\n\n  private parent: HTMLDivElement;\n\n  private page: HTMLDivElement;\n\n  constructor(id: string, parent: HTMLDivElement) {\n    this.id = id;\n    this.parent = parent;\n    this.page = this.createHTML(this.id);\n    this.hidden();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.page;\n  }\n\n  public getID(): string {\n    return this.id;\n  }\n\n  private hidden = (): void => {\n    this.page.style.display = PAGES_STATE.HIDDEN;\n  };\n\n  private createHTML(id: string): HTMLDivElement {\n    this.page = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.page],\n      attributes: { id },\n    });\n\n    this.page.style.display = PAGES_STATE.HIDDEN;\n\n    this.parent.append(this.page);\n    return this.page;\n  }\n}\n\nexport default LoginPageView;\n","import LoginFormModel from '../../../widgets/loginForm/model/LoginFormModel.ts';\nimport type StorageModel from '../../../app/Storage/model/StorageModel.ts';\nimport { PAGES_IDS, PAGES_STATE } from '../../types/enums.ts';\nimport MediatorModel from '../../core/mediator/model/MediatorModel.ts';\nimport STORE_KEYS from '../../../app/Storage/types/enums.ts';\nimport type PageInterface from '../../types/interfaces.ts';\nimport AppEvents from '../../core/mediator/types/enums.ts';\nimport { type UserDataInterface } from '../../../app/Storage/types/interfaces.ts';\nimport LoginPageView from '../ui/LoginPageView.ts';\n\nclass LogInPageModel implements PageInterface {\n  private storage: StorageModel;\n\n  private id: string;\n\n  private singletonMediator: MediatorModel<unknown>;\n\n  private pageView: LoginPageView;\n\n  private page: HTMLDivElement;\n\n  constructor(id: string, parent: HTMLDivElement, storage: StorageModel) {\n    this.id = id;\n    this.storage = storage;\n    this.singletonMediator = MediatorModel.getInstance();\n    this.pageView = new LoginPageView(id, parent);\n    this.page = this.pageView.getHTML();\n    this.drawForm();\n    this.hidden();\n  }\n\n  private hidden = (): void => {\n    this.page.style.display = PAGES_STATE.HIDDEN;\n  };\n\n  public getHTML(): HTMLDivElement {\n    return this.page;\n  }\n\n  public getID(): string {\n    return this.id;\n  }\n\n  public checkAuthUser(): boolean {\n    const userData = this.storage.get<UserDataInterface>(STORE_KEYS.USER);\n    if (userData) {\n      this.singletonMediator.notify(AppEvents.newUser, userData);\n    } else {\n      return false;\n    }\n    return true;\n  }\n\n  public saveAuthUser(userData: UserDataInterface): void {\n    this.storage.add(STORE_KEYS.USER, JSON.stringify(userData));\n    this.singletonMediator.notify(AppEvents.changeHash, PAGES_IDS.START);\n    this.drawForm();\n  }\n\n  private drawForm(): void {\n    const loginForm = new LoginFormModel(this);\n    this.page.append(loginForm.getHTML());\n  }\n}\n\nexport default LogInPageModel;\n","/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport STORE_KEYS from '../types/enums.ts';\nimport type { Data, StorageModelInterface } from '../types/interfaces';\n\nclass StorageModel implements StorageModelInterface {\n  private storage: Data;\n\n  constructor() {\n    this.storage = this.init();\n  }\n\n  public get<T>(key: string): T | undefined {\n    if (key in this.storage) {\n      const result: T = JSON.parse(this.storage[key]);\n      return result;\n    }\n    return undefined;\n  }\n\n  public add(key: string, value: string): void {\n    this.storage[key] = value;\n    this.save(this.storage);\n  }\n\n  public remove(key: string): void {\n    delete this.storage[key];\n    this.save(this.storage);\n  }\n\n  public clear(): void {\n    localStorage.clear();\n    this.init();\n  }\n\n  private save(data: Data): void {\n    localStorage.setItem(STORE_KEYS.LS_NAME, JSON.stringify(data));\n    this.storage = this.init();\n  }\n\n  private init(): Data {\n    const storedData = localStorage.getItem(STORE_KEYS.LS_NAME);\n\n    const safeJsonParse = <T>(str: string): T => {\n      try {\n        const jsonValue: T = JSON.parse(str);\n        return jsonValue;\n      } catch {\n        throw new Error('I need help >_<');\n      }\n    };\n\n    if (storedData) {\n      this.storage = safeJsonParse(storedData);\n    } else {\n      localStorage.setItem(STORE_KEYS.LS_NAME, '{}');\n      this.storage = this.init();\n    }\n\n    return this.storage;\n  }\n}\n\nexport default StorageModel;\n","const BUTTONS_TEXT_CONTENT = {\n  loginBtn: 'Log in',\n  startBtn: 'Start',\n} as const;\n\nexport default BUTTONS_TEXT_CONTENT;\n","import createBaseElement from '../../../utils/createBaseElement.ts';\nimport ButtonModel from '../../../shared/button/model/ButtonModel.ts';\nimport styles from './style.module.scss';\nimport { PAGES_STATE } from '../../types/enums.ts';\nimport { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport BUTTONS_TEXT_CONTENT from '../types/enums.ts';\n\nclass StartPageView {\n  private parent: HTMLDivElement;\n\n  private page: HTMLDivElement;\n\n  private title: HTMLHeadingElement;\n\n  private subtitle: HTMLHeadingElement;\n\n  private descr: HTMLDivElement;\n\n  private startBtn: ButtonModel;\n\n  private logOutBtn: ButtonModel;\n\n  constructor(id: string, parent: HTMLDivElement) {\n    this.title = this.createTitle();\n    this.subtitle = this.createSubtitle();\n    this.descr = this.createDescr();\n    this.startBtn = this.createStartBtn();\n    this.logOutBtn = this.createLogOutBtn();\n    this.parent = parent;\n    this.page = this.createHTML(id);\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.page;\n  }\n\n  public getSubTitle(): HTMLHeadingElement {\n    return this.subtitle;\n  }\n\n  public getLogOutBtn(): ButtonModel {\n    return this.logOutBtn;\n  }\n\n  public getStartBtn(): ButtonModel {\n    return this.startBtn;\n  }\n\n  private createTitle(): HTMLHeadingElement {\n    this.title = createBaseElement({\n      tag: TAG_NAMES.h1,\n      cssClasses: [styles.page__title],\n      innerContent: 'RSS Puzzle',\n    });\n    return this.title;\n  }\n\n  private createSubtitle(): HTMLHeadingElement {\n    this.subtitle = createBaseElement({\n      tag: TAG_NAMES.h2,\n      cssClasses: [styles.page__subtitle],\n    });\n    return this.subtitle;\n  }\n\n  private createDescr(): HTMLParagraphElement {\n    this.descr = createBaseElement({\n      tag: TAG_NAMES.p,\n      cssClasses: [styles.page__descr],\n      innerContent: 'Your RSS reader',\n    });\n    return this.descr;\n  }\n\n  private createStartBtn(): ButtonModel {\n    this.startBtn = new ButtonModel(BUTTONS_TEXT_CONTENT.startBtn, [\n      styles.page__btn,\n      'btn-reset',\n    ]);\n    return this.startBtn;\n  }\n\n  private createLogOutBtn(): ButtonModel {\n    this.logOutBtn = new ButtonModel(BUTTONS_TEXT_CONTENT.loginBtn, [\n      styles.page__btn,\n      'btn-reset',\n    ]);\n\n    return this.logOutBtn;\n  }\n\n  private createHTML(id: string): HTMLDivElement {\n    this.page = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.page],\n      attributes: { id },\n    });\n\n    this.page.style.display = PAGES_STATE.HIDDEN;\n\n    this.page.append(\n      this.title,\n      this.subtitle,\n      this.descr,\n      this.startBtn.getHTML(),\n      this.logOutBtn.getHTML(),\n    );\n\n    this.parent.append(this.page);\n    return this.page;\n  }\n}\n\nexport default StartPageView;\n","import type StorageModel from '../../../app/Storage/model/StorageModel.ts';\nimport type PageInterface from '../../types/interfaces.ts';\nimport type ButtonModel from '../../../shared/button/model/ButtonModel.ts';\nimport STORE_KEYS from '../../../app/Storage/types/enums.ts';\nimport { type UserDataInterface } from '../../../app/Storage/types/interfaces.ts';\nimport { PAGES_IDS } from '../../types/enums.ts';\nimport MediatorModel from '../../core/mediator/model/MediatorModel.ts';\nimport AppEvents from '../../core/mediator/types/enums.ts';\nimport { EVENT_NAMES } from '../../../shared/types/enums.ts';\nimport StartPageView from '../ui/StartPageView.ts';\n\nclass StartPageModel implements PageInterface {\n  private storage: StorageModel;\n\n  private id: string;\n\n  private pageView: StartPageView;\n\n  private page: HTMLDivElement;\n\n  private subtitle: HTMLHeadingElement;\n\n  private startBtn: ButtonModel;\n\n  private logOutBtn: ButtonModel;\n\n  private singletonMediator: MediatorModel<unknown>;\n\n  constructor(id: string, parent: HTMLDivElement, storage: StorageModel) {\n    this.id = id;\n    this.pageView = new StartPageView(id, parent);\n    this.page = this.pageView.getHTML();\n    this.subtitle = this.pageView.getSubTitle();\n    this.startBtn = this.pageView.getStartBtn();\n    this.logOutBtn = this.pageView.getLogOutBtn();\n    this.storage = storage;\n\n    this.singletonMediator = MediatorModel.getInstance();\n    this.singletonMediator.subscribe(\n      AppEvents.newUser,\n      this.greeting.bind(this),\n    );\n\n    this.setHandlers();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.page;\n  }\n\n  public getID(): string {\n    return this.id;\n  }\n\n  public greeting(): string {\n    const userData = this.storage.get<UserDataInterface>(STORE_KEYS.USER);\n    const greeting = `Hello, ${userData?.name} ${userData?.surname}!`;\n    this.subtitle.textContent = greeting;\n    return greeting;\n  }\n\n  private logOut(): void {\n    this.storage.remove(STORE_KEYS.USER);\n    this.singletonMediator.notify(AppEvents.changeHash, PAGES_IDS.LOG_IN);\n  }\n\n  private setHandlers(): void {\n    this.logOutBtn\n      .getHTML()\n      .addEventListener(EVENT_NAMES.click, this.logOut.bind(this));\n\n    this.startBtn.getHTML().addEventListener(EVENT_NAMES.click, () => {\n      this.singletonMediator.notify(AppEvents.changeHash, PAGES_IDS.MAIN);\n    });\n  }\n}\n\nexport default StartPageModel;\n","import AppEvents from '../../../pages/core/mediator/types/enums.ts';\nimport MediatorModel from '../../../pages/core/mediator/model/MediatorModel.ts';\nimport { PAGES_IDS, PAGES_STATE } from '../../../pages/types/enums.ts';\nimport type PageInterface from '../../../pages/types/interfaces.ts';\nimport type RenderNewPageCallback from '../types/types.ts';\nimport { EVENT_NAMES } from '../../../shared/types/enums.ts';\n\nconst PAGE_DELAY = 500;\nconst MAX_OPACITY = 1;\n\nclass RouterModel {\n  private pages: Record<string, PageInterface>;\n\n  private currentPage: PageInterface;\n\n  private duration: number;\n\n  private singletonMediator: MediatorModel<unknown>;\n\n  constructor(pages: Record<string, PageInterface>) {\n    this.pages = pages;\n    this.currentPage = this.setCurrentPage();\n    this.duration = PAGE_DELAY;\n    this.singletonMediator = MediatorModel.getInstance();\n    this.singletonMediator.subscribe(\n      AppEvents.changeHash,\n      this.renderNewPageCallback,\n    );\n    window.addEventListener(\n      EVENT_NAMES.hashchange,\n      this.hashChangeHandler.bind(this),\n    );\n  }\n\n  public init(): void {\n    const loginPage = this.pages[PAGES_IDS.LOG_IN];\n\n    if (loginPage.checkAuthUser) {\n      if (loginPage.checkAuthUser()) {\n        this.renderNewPageCallback(PAGES_IDS.START);\n      } else {\n        this.renderNewPageCallback(PAGES_IDS.LOG_IN);\n      }\n    }\n  }\n\n  private setCurrentPage(): PageInterface {\n    const currentHash = window.location.hash.slice(1);\n\n    if (currentHash in this.pages) {\n      this.currentPage = this.pages[currentHash];\n    } else if (currentHash === PAGES_IDS.BLANK) {\n      this.currentPage = this.pages[PAGES_IDS.LOG_IN];\n    }\n\n    return this.currentPage;\n  }\n\n  private renderNewPageCallback: RenderNewPageCallback = (hash: unknown) => {\n    if (typeof hash === 'string') {\n      window.location.hash = hash;\n      this.renderNewPage(hash);\n    }\n  };\n\n  private renderNewPage(pageID: string): void {\n    const formattedTitle = pageID[0].toUpperCase() + pageID.slice(1);\n    document.title = formattedTitle;\n\n    this.fadeOutAndIn(this.currentPage, this.pages[pageID]);\n    this.currentPage = this.pages[pageID];\n  }\n\n  private fadeOutAndIn(\n    currentPage: PageInterface,\n    nextPage: PageInterface,\n    duration = this.duration,\n  ): void {\n    let start = performance.now();\n\n    const fadeIn = (timestamp: number): void => {\n      const elapsed = timestamp - start;\n      const progress = Math.min(elapsed / duration, MAX_OPACITY);\n      const page = nextPage.getHTML();\n\n      page.style.opacity = `${progress}`;\n      page.style.display = PAGES_STATE.VISIBLE;\n\n      if (elapsed < duration) {\n        window.requestAnimationFrame(fadeIn);\n      }\n    };\n\n    const fadeOut = (timestamp: number): void => {\n      const elapsed = timestamp - start;\n      const progress = Math.min(elapsed / duration, MAX_OPACITY);\n      const opacity = MAX_OPACITY - progress;\n\n      const page = currentPage.getHTML();\n      page.style.opacity = `${opacity}`;\n\n      if (elapsed < duration) {\n        window.requestAnimationFrame(fadeOut);\n      } else {\n        Object.entries(this.pages)\n          .filter(([key]) => key !== this.currentPage.getHTML().id)\n          .forEach(([key]) => {\n            this.pages[key].getHTML().style.display = PAGES_STATE.HIDDEN;\n          });\n\n        page.style.display = PAGES_STATE.HIDDEN;\n        start = performance.now();\n        window.requestAnimationFrame(fadeIn);\n      }\n    };\n\n    window.requestAnimationFrame(fadeOut);\n  }\n\n  private hashChangeHandler(): void {\n    const loginPage = this.pages[PAGES_IDS.LOG_IN];\n    const hash = window.location.hash.slice(1);\n\n    if (!loginPage.checkAuthUser) {\n      return;\n    }\n\n    if (hash !== this.pages[hash].getID()) {\n      if (loginPage.checkAuthUser()) {\n        this.renderNewPageCallback(PAGES_IDS.START);\n      } else {\n        this.renderNewPageCallback(PAGES_IDS.LOG_IN);\n      }\n      return;\n    }\n\n    if (loginPage.checkAuthUser()) {\n      if (hash !== PAGES_IDS.BLANK && hash !== PAGES_IDS.LOG_IN) {\n        this.renderNewPageCallback(hash);\n      } else {\n        window.location.hash = this.currentPage.getID();\n      }\n    } else {\n      this.renderNewPageCallback(PAGES_IDS.LOG_IN);\n    }\n  }\n}\n\nexport default RouterModel;\n","const API_URLS = {\n  levelData:\n    'https://raw.githubusercontent.com/rolling-scopes-school/rss-puzzle-data/main/data/wordCollectionLevel',\n} as const;\n\nexport default API_URLS;\n","import type { levelInfo } from '../types/interfaces';\n\nclass ApiModel {\n  private response: Promise<levelInfo> | null;\n\n  constructor() {\n    this.response = null;\n  }\n\n  public async getData(url: string): Promise<levelInfo> {\n    const data: levelInfo = await this.fetchResponse(url);\n    return data;\n  }\n\n  private fetchResponse(url: string): Promise<levelInfo> {\n    this.response = fetch(url)\n      .then((response) => response.json())\n      .then((json: levelInfo) => json);\n\n    return this.response;\n  }\n}\n\nexport default ApiModel;\n","import API_URLS from '../../../shared/api/types/constants.ts';\nimport ApiModel from '../../../shared/api/model/ApiModel.ts';\nimport type { levelInfo } from '../../../shared/api/types/interfaces.ts';\n\nclass PlaygroundApi {\n  private api: ApiModel;\n\n  private levelInfo: levelInfo | null;\n\n  private levelInfoReceived: boolean;\n\n  constructor() {\n    this.api = new ApiModel();\n    this.levelInfo = null;\n    this.levelInfoReceived = false;\n    this.receiveLevelInfo(1).catch(() => {});\n  }\n\n  public async getLevelData(): Promise<levelInfo> {\n    if (!this.levelInfoReceived) {\n      await this.receiveLevelInfo(1);\n    }\n    if (!this.levelInfo) {\n      throw new Error('No level info');\n    }\n    return this.levelInfo;\n  }\n\n  private async receiveLevelInfo(currentLvl: number): Promise<void> {\n    const url = `${API_URLS.levelData}${currentLvl}.json`;\n\n    await this.api\n      .getData(url)\n      .then((data) => {\n        this.levelInfo = data;\n        this.levelInfoReceived = true;\n      })\n      .catch(() => {\n        this.levelInfoReceived = false;\n      });\n  }\n}\n\nexport default PlaygroundApi;\n","export const randomIndex = 0.5;\n\nexport const BUTTONS_TEXT_CONTENT = {\n  continueBtn: 'Continue',\n  checkBtn: 'Check',\n  autocompleteBtn: 'Autocomplete',\n} as const;\n","import ButtonModel from '../../../shared/button/model/ButtonModel.ts';\nimport { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport styles from './style.module.scss';\nimport { BUTTONS_TEXT_CONTENT } from '../types/constants.ts';\n\nclass PlaygroundView {\n  private playground: HTMLDivElement;\n\n  private gameBoard: HTMLDivElement;\n\n  private sourceBlock: HTMLDivElement;\n\n  private continueBtn: ButtonModel;\n\n  private checkBtn: ButtonModel;\n\n  private autocompleteBtn: ButtonModel;\n\n  constructor() {\n    this.gameBoard = this.createGameBoard();\n    this.sourceBlock = this.createSourceBlock();\n    this.continueBtn = this.createContinueBtn();\n    this.checkBtn = this.createCheckBtn();\n    this.autocompleteBtn = this.createAutocompleteBtn();\n    this.playground = this.createHTML();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.playground;\n  }\n\n  public getGameBoardHTML(): HTMLDivElement {\n    return this.gameBoard;\n  }\n\n  public clearGameBoardHTML(): void {\n    this.gameBoard.innerHTML = '';\n  }\n\n  public getSourceBlockHTML(): HTMLDivElement {\n    return this.sourceBlock;\n  }\n\n  public clearSourceBlockHTML(): void {\n    this.sourceBlock.innerHTML = '';\n  }\n\n  public getContinueBtn(): ButtonModel {\n    return this.continueBtn;\n  }\n\n  public getCheckBtn(): ButtonModel {\n    return this.checkBtn;\n  }\n\n  public getAutocompleteBtn(): ButtonModel {\n    return this.autocompleteBtn;\n  }\n\n  private createGameBoard(): HTMLDivElement {\n    this.gameBoard = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.game_board],\n    });\n\n    return this.gameBoard;\n  }\n\n  private createSourceBlock(): HTMLDivElement {\n    this.sourceBlock = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.source_data],\n    });\n\n    return this.sourceBlock;\n  }\n\n  private createContinueBtn(): ButtonModel {\n    this.continueBtn = new ButtonModel(BUTTONS_TEXT_CONTENT.continueBtn, [\n      styles.continue_btn,\n      styles.btn__hidden,\n    ]);\n\n    return this.continueBtn;\n  }\n\n  private createCheckBtn(): ButtonModel {\n    this.checkBtn = new ButtonModel(BUTTONS_TEXT_CONTENT.checkBtn, [\n      styles.check_btn,\n    ]);\n\n    this.checkBtn.setDisabled();\n\n    return this.checkBtn;\n  }\n\n  private createAutocompleteBtn(): ButtonModel {\n    this.autocompleteBtn = new ButtonModel(\n      BUTTONS_TEXT_CONTENT.autocompleteBtn,\n      [styles.autocomplete_btn],\n    );\n\n    return this.autocompleteBtn;\n  }\n\n  private createHTML(): HTMLDivElement {\n    this.playground = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.playground],\n    });\n\n    this.playground.append(\n      this.gameBoard,\n      this.sourceBlock,\n      this.continueBtn.getHTML(),\n      this.checkBtn.getHTML(),\n      this.autocompleteBtn.getHTML(),\n    );\n    return this.playground;\n  }\n}\n\nexport default PlaygroundView;\n","export const PUZZLE_STYLE = {\n  none: 'none',\n  auto: 'auto',\n  opacity_on: '1',\n  opacity_off: '0',\n  fill: 'forwards',\n} as const;\n\nexport const PUZZLE_ANIMATION_OPTIONS = {\n  duration: 500,\n  iterations: 1,\n  fill: PUZZLE_STYLE.fill,\n} as const;\n\nexport const COPY_PUZZLE_ANIMATION_OPTIONS = {\n  duration: 1000,\n  iterations: 1,\n  fill: PUZZLE_STYLE.fill,\n} as const;\n","// import type PlaygroundComponent from '@/widgets/playground/Playground.ts';\nimport type PlaygroundView from '../../widgets/playground/ui/PlaygroundView.ts';\nimport { EVENT_NAMES } from '../../shared/types/enums.ts';\nimport createBaseElement from '../../utils/createBaseElement.ts';\nimport styles from './style.module.scss';\nimport {\n  PUZZLE_STYLE,\n  COPY_PUZZLE_ANIMATION_OPTIONS,\n} from './types/constans.ts';\nimport type PlaygroundModel from '../../widgets/playground/model/PlaygroundModel.ts';\n\nclass PuzzleComponent {\n  private puzzle: HTMLDivElement;\n\n  private word: string;\n\n  private playground: PlaygroundModel;\n\n  private playgroundView: PlaygroundView;\n\n  constructor(\n    word: string,\n    playground: PlaygroundModel,\n    playgroundView: PlaygroundView,\n  ) {\n    this.word = word;\n    this.playground = playground;\n    this.playgroundView = playgroundView;\n    this.puzzle = this.createHTML(this.word);\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.puzzle;\n  }\n\n  private calculateSizePuzzle(elem: HTMLDivElement): void {\n    const currentElem = elem;\n    const wordLength = this.word.length;\n    const paddingX = 1;\n    const paddingY = 0.5;\n\n    const pivotFont = 5;\n    const minFontSize = 1;\n    const maxFontSize = 1.2;\n    const fontSize = wordLength > pivotFont ? minFontSize : maxFontSize;\n\n    currentElem.style.padding = `${paddingY}dvw ${paddingX}dvw`;\n    currentElem.style.fontSize = `${fontSize}dvw`;\n  }\n\n  private createDuplicateWordElement(): HTMLDivElement {\n    const copyWord = createBaseElement({\n      tag: 'div',\n      cssClasses: [styles.puzzle],\n      attributes: {},\n      innerContent: this.word,\n    });\n\n    this.calculateSizePuzzle(copyWord);\n    return copyWord;\n  }\n\n  private clickPuzzleCopyHandler(copyWord: HTMLDivElement): void {\n    this.puzzle.style.pointerEvents = PUZZLE_STYLE.auto;\n    this.puzzle.classList.remove(styles.puzzle_placeholder);\n\n    const newWordsInCurrentLine = this.playground\n      .getWordsInCurrentLine()\n      .filter((word) => word !== this.word);\n    this.playground.setWordsInCurrentLine(newWordsInCurrentLine);\n\n    const newCopyPuzzles = this.playground\n      .getCopyPuzzles()\n      .filter((copy) => copy !== copyWord);\n    this.playground.setCopyPuzzles(newCopyPuzzles);\n\n    const continueBtn = this.playgroundView.getContinueBtn();\n    continueBtn.setDisabled();\n\n    const checkBtn = this.playgroundView.getCheckBtn();\n    checkBtn.setDisabled();\n\n    this.playground.checkLine();\n    copyWord.remove();\n  }\n\n  private setPuzzleAnimation(copyWord: HTMLDivElement): void {\n    const linesArr = this.playground.getWordLinesHTML();\n    const currentRound = this.playground.getCurrentRound();\n    const lineRect = linesArr[currentRound].getBoundingClientRect();\n\n    const gameBoard = this.playgroundView.getGameBoardHTML();\n    const gameBoardRect = gameBoard.getBoundingClientRect();\n\n    const sourceBlock = this.playgroundView.getSourceBlockHTML();\n\n    const horizontallyTransform = 0;\n    const verticallyTransform =\n      gameBoardRect.height - lineRect.height + sourceBlock.clientHeight;\n    const startTransformTranslate = `translate(${horizontallyTransform}px, ${verticallyTransform}px)`;\n    const endTransformTranslate = `translate(${0}, ${0})`;\n\n    const COPY_PUZZLE_ANIMATION_PROPERTY = [\n      { transform: startTransformTranslate },\n      { transform: endTransformTranslate },\n    ];\n\n    copyWord.animate(\n      COPY_PUZZLE_ANIMATION_PROPERTY,\n      COPY_PUZZLE_ANIMATION_OPTIONS,\n    );\n  }\n\n  private clickPuzzleHandler(): void {\n    const wordsInCurrentLine = this.playground.getWordsInCurrentLine();\n    wordsInCurrentLine.push(this.word);\n    this.playground.checkLine();\n    const words = this.playground.getWords();\n    const currentRound = this.playground.getCurrentRound();\n    const checkBtn = this.playgroundView.getCheckBtn();\n    const copyPuzzles = this.playground.getCopyPuzzles();\n\n    if (wordsInCurrentLine.length === words[currentRound].length) {\n      checkBtn.switchDisabled();\n    }\n\n    const copyWord = this.createDuplicateWordElement();\n    copyPuzzles.push(copyWord);\n\n    copyWord.addEventListener(EVENT_NAMES.click, () => {\n      this.clickPuzzleCopyHandler.bind(this, copyWord)();\n    });\n\n    this.setPuzzleAnimation(copyWord);\n\n    copyWord.replaceWith(this.puzzle);\n    this.puzzle.style.pointerEvents = PUZZLE_STYLE.none;\n    this.puzzle.classList.add(styles.puzzle_placeholder);\n\n    const wordLines = this.playground.getWordLinesHTML();\n    wordLines[currentRound].append(copyWord);\n  }\n\n  private createHTML(word: string): HTMLDivElement {\n    this.puzzle = createBaseElement({\n      tag: 'div',\n      cssClasses: [styles.puzzle],\n      attributes: {},\n      innerContent: word,\n    });\n\n    this.calculateSizePuzzle(this.puzzle);\n\n    this.puzzle.addEventListener(\n      EVENT_NAMES.click,\n      this.clickPuzzleHandler.bind(this),\n    );\n\n    return this.puzzle;\n  }\n}\n\nexport default PuzzleComponent;\n","import { EVENT_NAMES, TAG_NAMES } from '../../../shared/types/enums.ts';\nimport type { wordsInfo } from '../../../shared/api/types/interfaces.ts';\nimport PlaygroundApi from '../api/PlaygroundApi.ts';\nimport { randomIndex } from '../types/constants.ts';\nimport PlaygroundView from '../ui/PlaygroundView.ts';\nimport styles from '../ui/style.module.scss';\nimport PuzzleComponent from '../../../entities/puzzle/Puzzle.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\n\nclass PlaygroundModel {\n  private view: PlaygroundView;\n\n  private api: PlaygroundApi;\n\n  private words: string[][] = [];\n\n  private shuffledWords: string[][];\n\n  private currentRoundLvl = 0;\n\n  private currentRound = 0;\n\n  private wordsInCurrentLine: string[] = [];\n\n  private puzzles: PuzzleComponent[][] = [];\n\n  private copyPuzzles: HTMLDivElement[] = [];\n\n  private wordLinesHTML: HTMLDivElement[] = [];\n\n  constructor() {\n    this.view = new PlaygroundView();\n    this.api = new PlaygroundApi();\n    this.shuffledWords = this.shuffleWords();\n    this.wordLinesHTML = this.createWordLines();\n    this.init();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.view.getHTML();\n  }\n\n  public getWordsInCurrentLine(): string[] {\n    return this.wordsInCurrentLine;\n  }\n\n  public setWordsInCurrentLine(words: string[]): void {\n    this.wordsInCurrentLine = words;\n  }\n\n  public getCopyPuzzles(): HTMLDivElement[] {\n    return this.copyPuzzles;\n  }\n\n  public setCopyPuzzles(copyPuzzles: HTMLDivElement[]): void {\n    this.copyPuzzles = copyPuzzles;\n  }\n\n  public getWordLinesHTML(): HTMLDivElement[] {\n    return this.wordLinesHTML;\n  }\n\n  public getCurrentRound(): number {\n    return this.currentRound;\n  }\n\n  public getWords(): string[][] {\n    return this.words;\n  }\n\n  public checkLine(): void {\n    if (\n      this.wordsInCurrentLine.length === this.words[this.currentRound].length &&\n      this.wordsInCurrentLine.every(\n        (word, index) => this.words[this.currentRound][index] === word,\n      )\n    ) {\n      const continueBtn = this.view.getContinueBtn();\n      continueBtn.switchDisabled();\n    }\n  }\n\n  private async setWords(): Promise<string[][]> {\n    const levelData = await this.api.getLevelData();\n    const currentWords = levelData.rounds[this.currentRoundLvl].words;\n\n    currentWords.forEach((word: wordsInfo) => {\n      this.words.push(word.textExample.split(' '));\n    });\n\n    return this.words;\n  }\n\n  private shuffleWords(): string[][] {\n    this.shuffledWords = this.words.map((wordArr: string[]) =>\n      [...wordArr].sort(() => Math.random() - randomIndex),\n    );\n\n    return this.shuffledWords;\n  }\n\n  private startNextLvl(): void {\n    this.currentRoundLvl += 1;\n    this.currentRound = 0;\n    this.wordsInCurrentLine = [];\n    this.puzzles = [];\n    this.wordLinesHTML = [];\n\n    this.view.clearGameBoardHTML();\n    this.view.clearSourceBlockHTML();\n\n    this.setWords()\n      .then(() => {\n        this.shuffleWords();\n        this.createWordLines();\n        this.startNextRound();\n      })\n      .catch(() => {});\n  }\n\n  private incrementCurrentRound(): void {\n    this.currentRound += 1;\n  }\n\n  private checkMatchingPuzzles(): void {\n    this.wordsInCurrentLine.forEach((word, index) => {\n      const isMatching = word === this.words[this.currentRound][index];\n      const copyPuzzle = this.copyPuzzles[index];\n\n      copyPuzzle.classList.toggle(styles.copy_puzzle__error, !isMatching);\n      copyPuzzle.classList.toggle(styles.copy_puzzle__success, isMatching);\n\n      const continueBtnHTML = this.view.getContinueBtn().getHTML();\n      const checkBtnHTML = this.view.getCheckBtn().getHTML();\n      const autoCompleteBtnHTML = this.view.getAutocompleteBtn().getHTML();\n\n      continueBtnHTML.classList.toggle(styles.btn__hidden, !isMatching);\n      checkBtnHTML.classList.toggle(styles.btn__hidden, isMatching);\n      autoCompleteBtnHTML.disabled = isMatching;\n    });\n  }\n\n  private startNextRound(): void {\n    const checkBtn = this.view.getCheckBtn();\n    const continueBtn = this.view.getContinueBtn();\n    const autoCompleteBtn = this.view.getAutocompleteBtn();\n    this.incrementCurrentRound();\n\n    continueBtn.getHTML().classList.add(styles.btn__hidden);\n    checkBtn.getHTML().classList.remove(styles.btn__hidden);\n\n    if (this.currentRound === this.words.length) {\n      this.startNextLvl();\n      return;\n    }\n\n    this.wordsInCurrentLine = [];\n    continueBtn.switchDisabled();\n    checkBtn.switchDisabled();\n    autoCompleteBtn.setEnabled();\n\n    this.copyPuzzles.forEach((copyWord) => {\n      copyWord.classList.remove(\n        styles.copy_puzzle__success,\n        styles.copy_puzzle__error,\n      );\n    });\n\n    this.copyPuzzles = [];\n    this.view.clearSourceBlockHTML();\n    this.fillSourcedBlock();\n  }\n\n  private autoCompleteLine(): void {\n    this.wordLinesHTML[this.currentRound].innerHTML = '';\n\n    this.words[this.currentRound].forEach((word) => {\n      const puzzle = new PuzzleComponent(word, this, this.view);\n      this.wordLinesHTML[this.currentRound].appendChild(puzzle.getHTML());\n    });\n    const checkBtnHTML = this.view.getCheckBtn();\n    const continueBtnHTML = this.view.getContinueBtn();\n\n    checkBtnHTML.setEnabled();\n    continueBtnHTML.setEnabled();\n    this.startNextRound();\n  }\n\n  private setHandlersToButtons(): void {\n    const checkBtnHTML = this.view.getCheckBtn().getHTML();\n    const continueBtnHTML = this.view.getContinueBtn().getHTML();\n    const autoCompleteBtnHTML = this.view.getAutocompleteBtn().getHTML();\n\n    checkBtnHTML.addEventListener(\n      EVENT_NAMES.click,\n      this.checkMatchingPuzzles.bind(this),\n    );\n\n    continueBtnHTML.addEventListener(\n      EVENT_NAMES.click,\n      this.startNextRound.bind(this),\n    );\n\n    autoCompleteBtnHTML.addEventListener(\n      EVENT_NAMES.click,\n      this.autoCompleteLine.bind(this),\n    );\n  }\n\n  private createWordLines(): HTMLDivElement[] {\n    this.words.forEach(() => {\n      const wordsLine = createBaseElement({\n        tag: TAG_NAMES.div,\n        cssClasses: [styles.line],\n      });\n\n      this.wordLinesHTML.push(wordsLine);\n    });\n\n    this.view.getGameBoardHTML().append(...this.wordLinesHTML);\n\n    return this.wordLinesHTML;\n  }\n\n  private createPuzzleElements(): PuzzleComponent[][] {\n    this.shuffledWords.forEach((wordsLine: string[]) => {\n      const lineArr: PuzzleComponent[] = [];\n\n      wordsLine.forEach((word) => {\n        const puzzle = new PuzzleComponent(word, this, this.view);\n        lineArr.push(puzzle);\n      });\n\n      this.puzzles.push(lineArr);\n    });\n\n    return this.puzzles;\n  }\n\n  private fillSourcedBlock(): void {\n    this.puzzles[this.currentRound].forEach((puzzle) => {\n      this.view.getSourceBlockHTML().append(puzzle.getHTML());\n    });\n  }\n\n  private init(): void {\n    this.setWords()\n      .then(() => {\n        this.shuffleWords();\n        this.createWordLines();\n        this.createPuzzleElements();\n        this.setHandlersToButtons();\n        this.fillSourcedBlock();\n      })\n      .catch(() => {});\n  }\n}\n\nexport default PlaygroundModel;\n","import createBaseElement from '../../../utils/createBaseElement.ts';\nimport PlaygroundModel from '../../../widgets/playground/model/PlaygroundModel.ts';\nimport type PageInterface from '../../types/interfaces.ts';\nimport styles from './style.module.scss';\nimport { PAGES_STATE } from '../../types/enums.ts';\nimport { TAG_NAMES } from '../../../shared/types/enums.ts';\n\nclass MainPageView implements PageInterface {\n  private id: string;\n\n  private parent: HTMLDivElement;\n\n  private page: HTMLDivElement;\n\n  private playground: PlaygroundModel;\n\n  constructor(id: string, parent: HTMLDivElement) {\n    this.id = id;\n    this.parent = parent;\n    this.playground = new PlaygroundModel();\n    this.page = this.createHTML(this.id);\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.page;\n  }\n\n  public getID(): string {\n    return this.id;\n  }\n\n  private createHTML(id: string): HTMLDivElement {\n    this.page = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.page],\n      attributes: { id },\n    });\n\n    const wrapper = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.game_wrapper],\n    });\n    this.page.append(wrapper);\n    wrapper.append(this.playground.getHTML());\n\n    this.page.style.display = PAGES_STATE.HIDDEN;\n    this.parent.append(this.page);\n    return this.page;\n  }\n}\n\nexport default MainPageView;\n","import type PageInterface from '../../types/interfaces.ts';\nimport MainPageView from '../ui/MainPageView.ts';\n\nclass MainPageModel implements PageInterface {\n  private id: string;\n\n  private pageView: MainPageView;\n\n  private page: HTMLDivElement;\n\n  constructor(id: string, parent: HTMLDivElement) {\n    this.id = id;\n    this.pageView = new MainPageView(id, parent);\n    this.page = this.pageView.getHTML();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.page;\n  }\n\n  public getID(): string {\n    return this.id;\n  }\n}\n\nexport default MainPageModel;\n","import { TAG_NAMES } from '../../../shared/types/enums.ts';\nimport createBaseElement from '../../../utils/createBaseElement.ts';\nimport styles from './style.module.scss';\n\nclass AppView {\n  private pagesContainer: HTMLDivElement;\n\n  constructor() {\n    this.pagesContainer = this.createHTML();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.pagesContainer;\n  }\n\n  private createHTML(): HTMLDivElement {\n    this.pagesContainer = createBaseElement({\n      tag: TAG_NAMES.div,\n      cssClasses: [styles.pagesContainer],\n    });\n    return this.pagesContainer;\n  }\n}\n\nexport default AppView;\n","import LogInPageModel from '../../../pages/logInPage/model/LoginPageModel.ts';\nimport StorageModel from '../../Storage/model/StorageModel.ts';\nimport StartPageModel from '../../../pages/startPage/model/StartPageModel.ts';\nimport RouterModel from '../../Router/model/RouterModel.ts';\nimport { PAGES_IDS } from '../../../pages/types/enums.ts';\nimport MainPageModel from '../../../pages/mainPage/model/MainPageModel.ts';\nimport AppView from '../ui/AppView.ts';\n\nclass AppModel {\n  private appView: AppView;\n\n  private app: HTMLDivElement;\n\n  private storage: StorageModel;\n\n  private pages: {\n    logIn: LogInPageModel;\n    start: StartPageModel;\n    main: MainPageModel;\n  };\n\n  private router: RouterModel;\n\n  constructor() {\n    this.appView = new AppView();\n    this.app = this.appView.getHTML();\n    this.storage = new StorageModel();\n\n    this.pages = {\n      logIn: new LogInPageModel(\n        PAGES_IDS.LOG_IN,\n        this.appView.getHTML(),\n        this.storage,\n      ),\n      start: new StartPageModel(\n        PAGES_IDS.START,\n        this.appView.getHTML(),\n        this.storage,\n      ),\n      main: new MainPageModel(PAGES_IDS.MAIN, this.appView.getHTML()),\n    };\n\n    this.router = new RouterModel(this.pages);\n    this.router.init();\n  }\n\n  public getHTML(): HTMLDivElement {\n    return this.app;\n  }\n}\n\nexport default AppModel;\n","import './index.scss';\nimport AppModel from './app/App/model/AppModel.ts';\n\nconst myApp = new AppModel();\ndocument.body.append(myApp.getHTML());\n"],"names":["ERRORS_NAME","styles","form","FIELD_NAMES","page","index","STORE_KEYS","BUTTONS_TEXT_CONTENT","playground","puzzle"],"mappings":"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"}